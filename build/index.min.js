(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
!function(){function n(n){return n&&(n.ownerDocument||n.document||n).documentElement}function t(n){return n&&(n.ownerDocument&&n.ownerDocument.defaultView||n.document&&n||n.defaultView)}function e(n,t){return t>n?-1:n>t?1:n>=t?0:NaN}function r(n){return null===n?NaN:+n}function u(n){return!isNaN(n)}function i(n){return{left:function(t,e,r,u){for(arguments.length<3&&(r=0),arguments.length<4&&(u=t.length);u>r;){var i=r+u>>>1;n(t[i],e)<0?r=i+1:u=i}return r},right:function(t,e,r,u){for(arguments.length<3&&(r=0),arguments.length<4&&(u=t.length);u>r;){var i=r+u>>>1;n(t[i],e)>0?u=i:r=i+1}return r}}}function a(n){return n.length}function o(n){for(var t=1;n*t%1;)t*=10;return t}function c(n,t){for(var e in t)Object.defineProperty(n.prototype,e,{value:t[e],enumerable:!1})}function l(){this._=Object.create(null)}function s(n){return(n+="")===pa||n[0]===va?va+n:n}function f(n){return(n+="")[0]===va?n.slice(1):n}function h(n){return s(n)in this._}function g(n){return(n=s(n))in this._&&delete this._[n]}function p(){var n=[];for(var t in this._)n.push(f(t));return n}function v(){var n=0;for(var t in this._)++n;return n}function d(){for(var n in this._)return!1;return!0}function m(){this._=Object.create(null)}function y(n){return n}function M(n,t,e){return function(){var r=e.apply(t,arguments);return r===t?n:r}}function x(n,t){if(t in n)return t;t=t.charAt(0).toUpperCase()+t.slice(1);for(var e=0,r=da.length;r>e;++e){var u=da[e]+t;if(u in n)return u}}function b(){}function _(){}function w(n){function t(){for(var t,r=e,u=-1,i=r.length;++u<i;)(t=r[u].on)&&t.apply(this,arguments);return n}var e=[],r=new l;return t.on=function(t,u){var i,a=r.get(t);return arguments.length<2?a&&a.on:(a&&(a.on=null,e=e.slice(0,i=e.indexOf(a)).concat(e.slice(i+1)),r.remove(t)),u&&e.push(r.set(t,{on:u})),n)},t}function S(){ta.event.preventDefault()}function k(){for(var n,t=ta.event;n=t.sourceEvent;)t=n;return t}function N(n){for(var t=new _,e=0,r=arguments.length;++e<r;)t[arguments[e]]=w(t);return t.of=function(e,r){return function(u){try{var i=u.sourceEvent=ta.event;u.target=n,ta.event=u,t[u.type].apply(e,r)}finally{ta.event=i}}},t}function E(n){return ya(n,_a),n}function A(n){return"function"==typeof n?n:function(){return Ma(n,this)}}function C(n){return"function"==typeof n?n:function(){return xa(n,this)}}function z(n,t){function e(){this.removeAttribute(n)}function r(){this.removeAttributeNS(n.space,n.local)}function u(){this.setAttribute(n,t)}function i(){this.setAttributeNS(n.space,n.local,t)}function a(){var e=t.apply(this,arguments);null==e?this.removeAttribute(n):this.setAttribute(n,e)}function o(){var e=t.apply(this,arguments);null==e?this.removeAttributeNS(n.space,n.local):this.setAttributeNS(n.space,n.local,e)}return n=ta.ns.qualify(n),null==t?n.local?r:e:"function"==typeof t?n.local?o:a:n.local?i:u}function q(n){return n.trim().replace(/\s+/g," ")}function L(n){return new RegExp("(?:^|\\s+)"+ta.requote(n)+"(?:\\s+|$)","g")}function T(n){return(n+"").trim().split(/^|\s+/)}function R(n,t){function e(){for(var e=-1;++e<u;)n[e](this,t)}function r(){for(var e=-1,r=t.apply(this,arguments);++e<u;)n[e](this,r)}n=T(n).map(D);var u=n.length;return"function"==typeof t?r:e}function D(n){var t=L(n);return function(e,r){if(u=e.classList)return r?u.add(n):u.remove(n);var u=e.getAttribute("class")||"";r?(t.lastIndex=0,t.test(u)||e.setAttribute("class",q(u+" "+n))):e.setAttribute("class",q(u.replace(t," ")))}}function P(n,t,e){function r(){this.style.removeProperty(n)}function u(){this.style.setProperty(n,t,e)}function i(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(n):this.style.setProperty(n,r,e)}return null==t?r:"function"==typeof t?i:u}function U(n,t){function e(){delete this[n]}function r(){this[n]=t}function u(){var e=t.apply(this,arguments);null==e?delete this[n]:this[n]=e}return null==t?e:"function"==typeof t?u:r}function j(n){function t(){var t=this.ownerDocument,e=this.namespaceURI;return e?t.createElementNS(e,n):t.createElement(n)}function e(){return this.ownerDocument.createElementNS(n.space,n.local)}return"function"==typeof n?n:(n=ta.ns.qualify(n)).local?e:t}function F(){var n=this.parentNode;n&&n.removeChild(this)}function H(n){return{__data__:n}}function O(n){return function(){return ba(this,n)}}function I(n){return arguments.length||(n=e),function(t,e){return t&&e?n(t.__data__,e.__data__):!t-!e}}function Y(n,t){for(var e=0,r=n.length;r>e;e++)for(var u,i=n[e],a=0,o=i.length;o>a;a++)(u=i[a])&&t(u,a,e);return n}function Z(n){return ya(n,Sa),n}function V(n){var t,e;return function(r,u,i){var a,o=n[i].update,c=o.length;for(i!=e&&(e=i,t=0),u>=t&&(t=u+1);!(a=o[t])&&++t<c;);return a}}function X(n,t,e){function r(){var t=this[a];t&&(this.removeEventListener(n,t,t.$),delete this[a])}function u(){var u=c(t,ra(arguments));r.call(this),this.addEventListener(n,this[a]=u,u.$=e),u._=t}function i(){var t,e=new RegExp("^__on([^.]+)"+ta.requote(n)+"$");for(var r in this)if(t=r.match(e)){var u=this[r];this.removeEventListener(t[1],u,u.$),delete this[r]}}var a="__on"+n,o=n.indexOf("."),c=$;o>0&&(n=n.slice(0,o));var l=ka.get(n);return l&&(n=l,c=B),o?t?u:r:t?b:i}function $(n,t){return function(e){var r=ta.event;ta.event=e,t[0]=this.__data__;try{n.apply(this,t)}finally{ta.event=r}}}function B(n,t){var e=$(n,t);return function(n){var t=this,r=n.relatedTarget;r&&(r===t||8&r.compareDocumentPosition(t))||e.call(t,n)}}function W(e){var r=".dragsuppress-"+ ++Ea,u="click"+r,i=ta.select(t(e)).on("touchmove"+r,S).on("dragstart"+r,S).on("selectstart"+r,S);if(null==Na&&(Na="onselectstart"in e?!1:x(e.style,"userSelect")),Na){var a=n(e).style,o=a[Na];a[Na]="none"}return function(n){if(i.on(r,null),Na&&(a[Na]=o),n){var t=function(){i.on(u,null)};i.on(u,function(){S(),t()},!0),setTimeout(t,0)}}}function J(n,e){e.changedTouches&&(e=e.changedTouches[0]);var r=n.ownerSVGElement||n;if(r.createSVGPoint){var u=r.createSVGPoint();if(0>Aa){var i=t(n);if(i.scrollX||i.scrollY){r=ta.select("body").append("svg").style({position:"absolute",top:0,left:0,margin:0,padding:0,border:"none"},"important");var a=r[0][0].getScreenCTM();Aa=!(a.f||a.e),r.remove()}}return Aa?(u.x=e.pageX,u.y=e.pageY):(u.x=e.clientX,u.y=e.clientY),u=u.matrixTransform(n.getScreenCTM().inverse()),[u.x,u.y]}var o=n.getBoundingClientRect();return[e.clientX-o.left-n.clientLeft,e.clientY-o.top-n.clientTop]}function G(){return ta.event.changedTouches[0].identifier}function K(n){return n>0?1:0>n?-1:0}function Q(n,t,e){return(t[0]-n[0])*(e[1]-n[1])-(t[1]-n[1])*(e[0]-n[0])}function nn(n){return n>1?0:-1>n?qa:Math.acos(n)}function tn(n){return n>1?Ra:-1>n?-Ra:Math.asin(n)}function en(n){return((n=Math.exp(n))-1/n)/2}function rn(n){return((n=Math.exp(n))+1/n)/2}function un(n){return((n=Math.exp(2*n))-1)/(n+1)}function an(n){return(n=Math.sin(n/2))*n}function on(){}function cn(n,t,e){return this instanceof cn?(this.h=+n,this.s=+t,void(this.l=+e)):arguments.length<2?n instanceof cn?new cn(n.h,n.s,n.l):_n(""+n,wn,cn):new cn(n,t,e)}function ln(n,t,e){function r(n){return n>360?n-=360:0>n&&(n+=360),60>n?i+(a-i)*n/60:180>n?a:240>n?i+(a-i)*(240-n)/60:i}function u(n){return Math.round(255*r(n))}var i,a;return n=isNaN(n)?0:(n%=360)<0?n+360:n,t=isNaN(t)?0:0>t?0:t>1?1:t,e=0>e?0:e>1?1:e,a=.5>=e?e*(1+t):e+t-e*t,i=2*e-a,new yn(u(n+120),u(n),u(n-120))}function sn(n,t,e){return this instanceof sn?(this.h=+n,this.c=+t,void(this.l=+e)):arguments.length<2?n instanceof sn?new sn(n.h,n.c,n.l):n instanceof hn?pn(n.l,n.a,n.b):pn((n=Sn((n=ta.rgb(n)).r,n.g,n.b)).l,n.a,n.b):new sn(n,t,e)}function fn(n,t,e){return isNaN(n)&&(n=0),isNaN(t)&&(t=0),new hn(e,Math.cos(n*=Da)*t,Math.sin(n)*t)}function hn(n,t,e){return this instanceof hn?(this.l=+n,this.a=+t,void(this.b=+e)):arguments.length<2?n instanceof hn?new hn(n.l,n.a,n.b):n instanceof sn?fn(n.h,n.c,n.l):Sn((n=yn(n)).r,n.g,n.b):new hn(n,t,e)}function gn(n,t,e){var r=(n+16)/116,u=r+t/500,i=r-e/200;return u=vn(u)*Xa,r=vn(r)*$a,i=vn(i)*Ba,new yn(mn(3.2404542*u-1.5371385*r-.4985314*i),mn(-.969266*u+1.8760108*r+.041556*i),mn(.0556434*u-.2040259*r+1.0572252*i))}function pn(n,t,e){return n>0?new sn(Math.atan2(e,t)*Pa,Math.sqrt(t*t+e*e),n):new sn(NaN,NaN,n)}function vn(n){return n>.206893034?n*n*n:(n-4/29)/7.787037}function dn(n){return n>.008856?Math.pow(n,1/3):7.787037*n+4/29}function mn(n){return Math.round(255*(.00304>=n?12.92*n:1.055*Math.pow(n,1/2.4)-.055))}function yn(n,t,e){return this instanceof yn?(this.r=~~n,this.g=~~t,void(this.b=~~e)):arguments.length<2?n instanceof yn?new yn(n.r,n.g,n.b):_n(""+n,yn,ln):new yn(n,t,e)}function Mn(n){return new yn(n>>16,n>>8&255,255&n)}function xn(n){return Mn(n)+""}function bn(n){return 16>n?"0"+Math.max(0,n).toString(16):Math.min(255,n).toString(16)}function _n(n,t,e){n=n.toLowerCase();var r,u,i,a=0,o=0,c=0;if(r=/([a-z]+)\((.*)\)/.exec(n))switch(u=r[2].split(","),r[1]){case"hsl":return e(parseFloat(u[0]),parseFloat(u[1])/100,parseFloat(u[2])/100);case"rgb":return t(Nn(u[0]),Nn(u[1]),Nn(u[2]))}return(i=Ga.get(n))?t(i.r,i.g,i.b):(null==n||"#"!==n.charAt(0)||isNaN(i=parseInt(n.slice(1),16))||(4===n.length?(a=(3840&i)>>4,a=a>>4|a,o=240&i,o=o>>4|o,c=15&i,c=c<<4|c):7===n.length&&(a=(16711680&i)>>16,o=(65280&i)>>8,c=255&i)),t(a,o,c))}function wn(n,t,e){var r,u,i=Math.min(n/=255,t/=255,e/=255),a=Math.max(n,t,e),o=a-i,c=(a+i)/2;return o?(u=.5>c?o/(a+i):o/(2-a-i),r=n==a?(t-e)/o+(e>t?6:0):t==a?(e-n)/o+2:(n-t)/o+4,r*=60):(r=NaN,u=c>0&&1>c?0:r),new cn(r,u,c)}function Sn(n,t,e){n=kn(n),t=kn(t),e=kn(e);var r=dn((.4124564*n+.3575761*t+.1804375*e)/Xa),u=dn((.2126729*n+.7151522*t+.072175*e)/$a),i=dn((.0193339*n+.119192*t+.9503041*e)/Ba);return hn(116*u-16,500*(r-u),200*(u-i))}function kn(n){return(n/=255)<=.04045?n/12.92:Math.pow((n+.055)/1.055,2.4)}function Nn(n){var t=parseFloat(n);return"%"===n.charAt(n.length-1)?Math.round(2.55*t):t}function En(n){return"function"==typeof n?n:function(){return n}}function An(n){return function(t,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=null),Cn(t,e,n,r)}}function Cn(n,t,e,r){function u(){var n,t=c.status;if(!t&&qn(c)||t>=200&&300>t||304===t){try{n=e.call(i,c)}catch(r){return void a.error.call(i,r)}a.load.call(i,n)}else a.error.call(i,c)}var i={},a=ta.dispatch("beforesend","progress","load","error"),o={},c=new XMLHttpRequest,l=null;return!this.XDomainRequest||"withCredentials"in c||!/^(http(s)?:)?\/\//.test(n)||(c=new XDomainRequest),"onload"in c?c.onload=c.onerror=u:c.onreadystatechange=function(){c.readyState>3&&u()},c.onprogress=function(n){var t=ta.event;ta.event=n;try{a.progress.call(i,c)}finally{ta.event=t}},i.header=function(n,t){return n=(n+"").toLowerCase(),arguments.length<2?o[n]:(null==t?delete o[n]:o[n]=t+"",i)},i.mimeType=function(n){return arguments.length?(t=null==n?null:n+"",i):t},i.responseType=function(n){return arguments.length?(l=n,i):l},i.response=function(n){return e=n,i},["get","post"].forEach(function(n){i[n]=function(){return i.send.apply(i,[n].concat(ra(arguments)))}}),i.send=function(e,r,u){if(2===arguments.length&&"function"==typeof r&&(u=r,r=null),c.open(e,n,!0),null==t||"accept"in o||(o.accept=t+",*/*"),c.setRequestHeader)for(var s in o)c.setRequestHeader(s,o[s]);return null!=t&&c.overrideMimeType&&c.overrideMimeType(t),null!=l&&(c.responseType=l),null!=u&&i.on("error",u).on("load",function(n){u(null,n)}),a.beforesend.call(i,c),c.send(null==r?null:r),i},i.abort=function(){return c.abort(),i},ta.rebind(i,a,"on"),null==r?i:i.get(zn(r))}function zn(n){return 1===n.length?function(t,e){n(null==t?e:null)}:n}function qn(n){var t=n.responseType;return t&&"text"!==t?n.response:n.responseText}function Ln(){var n=Tn(),t=Rn()-n;t>24?(isFinite(t)&&(clearTimeout(to),to=setTimeout(Ln,t)),no=0):(no=1,ro(Ln))}function Tn(){var n=Date.now();for(eo=Ka;eo;)n>=eo.t&&(eo.f=eo.c(n-eo.t)),eo=eo.n;return n}function Rn(){for(var n,t=Ka,e=1/0;t;)t.f?t=n?n.n=t.n:Ka=t.n:(t.t<e&&(e=t.t),t=(n=t).n);return Qa=n,e}function Dn(n,t){return t-(n?Math.ceil(Math.log(n)/Math.LN10):1)}function Pn(n,t){var e=Math.pow(10,3*ga(8-t));return{scale:t>8?function(n){return n/e}:function(n){return n*e},symbol:n}}function Un(n){var t=n.decimal,e=n.thousands,r=n.grouping,u=n.currency,i=r&&e?function(n,t){for(var u=n.length,i=[],a=0,o=r[0],c=0;u>0&&o>0&&(c+o+1>t&&(o=Math.max(1,t-c)),i.push(n.substring(u-=o,u+o)),!((c+=o+1)>t));)o=r[a=(a+1)%r.length];return i.reverse().join(e)}:y;return function(n){var e=io.exec(n),r=e[1]||" ",a=e[2]||">",o=e[3]||"-",c=e[4]||"",l=e[5],s=+e[6],f=e[7],h=e[8],g=e[9],p=1,v="",d="",m=!1,y=!0;switch(h&&(h=+h.substring(1)),(l||"0"===r&&"="===a)&&(l=r="0",a="="),g){case"n":f=!0,g="g";break;case"%":p=100,d="%",g="f";break;case"p":p=100,d="%",g="r";break;case"b":case"o":case"x":case"X":"#"===c&&(v="0"+g.toLowerCase());case"c":y=!1;case"d":m=!0,h=0;break;case"s":p=-1,g="r"}"$"===c&&(v=u[0],d=u[1]),"r"!=g||h||(g="g"),null!=h&&("g"==g?h=Math.max(1,Math.min(21,h)):("e"==g||"f"==g)&&(h=Math.max(0,Math.min(20,h)))),g=ao.get(g)||jn;var M=l&&f;return function(n){var e=d;if(m&&n%1)return"";var u=0>n||0===n&&0>1/n?(n=-n,"-"):"-"===o?"":o;if(0>p){var c=ta.formatPrefix(n,h);n=c.scale(n),e=c.symbol+d}else n*=p;n=g(n,h);var x,b,_=n.lastIndexOf(".");if(0>_){var w=y?n.lastIndexOf("e"):-1;0>w?(x=n,b=""):(x=n.substring(0,w),b=n.substring(w))}else x=n.substring(0,_),b=t+n.substring(_+1);!l&&f&&(x=i(x,1/0));var S=v.length+x.length+b.length+(M?0:u.length),k=s>S?new Array(S=s-S+1).join(r):"";return M&&(x=i(k+x,k.length?s-b.length:1/0)),u+=v,n=x+b,("<"===a?u+n+k:">"===a?k+u+n:"^"===a?k.substring(0,S>>=1)+u+n+k.substring(S):u+(M?n:k+n))+e}}}function jn(n){return n+""}function Fn(){this._=new Date(arguments.length>1?Date.UTC.apply(this,arguments):arguments[0])}function Hn(n,t,e){function r(t){var e=n(t),r=i(e,1);return r-t>t-e?e:r}function u(e){return t(e=n(new co(e-1)),1),e}function i(n,e){return t(n=new co(+n),e),n}function a(n,r,i){var a=u(n),o=[];if(i>1)for(;r>a;)e(a)%i||o.push(new Date(+a)),t(a,1);else for(;r>a;)o.push(new Date(+a)),t(a,1);return o}function o(n,t,e){try{co=Fn;var r=new Fn;return r._=n,a(r,t,e)}finally{co=Date}}n.floor=n,n.round=r,n.ceil=u,n.offset=i,n.range=a;var c=n.utc=On(n);return c.floor=c,c.round=On(r),c.ceil=On(u),c.offset=On(i),c.range=o,n}function On(n){return function(t,e){try{co=Fn;var r=new Fn;return r._=t,n(r,e)._}finally{co=Date}}}function In(n){function t(n){function t(t){for(var e,u,i,a=[],o=-1,c=0;++o<r;)37===n.charCodeAt(o)&&(a.push(n.slice(c,o)),null!=(u=so[e=n.charAt(++o)])&&(e=n.charAt(++o)),(i=A[e])&&(e=i(t,null==u?"e"===e?" ":"0":u)),a.push(e),c=o+1);return a.push(n.slice(c,o)),a.join("")}var r=n.length;return t.parse=function(t){var r={y:1900,m:0,d:1,H:0,M:0,S:0,L:0,Z:null},u=e(r,n,t,0);if(u!=t.length)return null;"p"in r&&(r.H=r.H%12+12*r.p);var i=null!=r.Z&&co!==Fn,a=new(i?Fn:co);return"j"in r?a.setFullYear(r.y,0,r.j):"w"in r&&("W"in r||"U"in r)?(a.setFullYear(r.y,0,1),a.setFullYear(r.y,0,"W"in r?(r.w+6)%7+7*r.W-(a.getDay()+5)%7:r.w+7*r.U-(a.getDay()+6)%7)):a.setFullYear(r.y,r.m,r.d),a.setHours(r.H+(r.Z/100|0),r.M+r.Z%100,r.S,r.L),i?a._:a},t.toString=function(){return n},t}function e(n,t,e,r){for(var u,i,a,o=0,c=t.length,l=e.length;c>o;){if(r>=l)return-1;if(u=t.charCodeAt(o++),37===u){if(a=t.charAt(o++),i=C[a in so?t.charAt(o++):a],!i||(r=i(n,e,r))<0)return-1}else if(u!=e.charCodeAt(r++))return-1}return r}function r(n,t,e){_.lastIndex=0;var r=_.exec(t.slice(e));return r?(n.w=w.get(r[0].toLowerCase()),e+r[0].length):-1}function u(n,t,e){x.lastIndex=0;var r=x.exec(t.slice(e));return r?(n.w=b.get(r[0].toLowerCase()),e+r[0].length):-1}function i(n,t,e){N.lastIndex=0;var r=N.exec(t.slice(e));return r?(n.m=E.get(r[0].toLowerCase()),e+r[0].length):-1}function a(n,t,e){S.lastIndex=0;var r=S.exec(t.slice(e));return r?(n.m=k.get(r[0].toLowerCase()),e+r[0].length):-1}function o(n,t,r){return e(n,A.c.toString(),t,r)}function c(n,t,r){return e(n,A.x.toString(),t,r)}function l(n,t,r){return e(n,A.X.toString(),t,r)}function s(n,t,e){var r=M.get(t.slice(e,e+=2).toLowerCase());return null==r?-1:(n.p=r,e)}var f=n.dateTime,h=n.date,g=n.time,p=n.periods,v=n.days,d=n.shortDays,m=n.months,y=n.shortMonths;t.utc=function(n){function e(n){try{co=Fn;var t=new co;return t._=n,r(t)}finally{co=Date}}var r=t(n);return e.parse=function(n){try{co=Fn;var t=r.parse(n);return t&&t._}finally{co=Date}},e.toString=r.toString,e},t.multi=t.utc.multi=ct;var M=ta.map(),x=Zn(v),b=Vn(v),_=Zn(d),w=Vn(d),S=Zn(m),k=Vn(m),N=Zn(y),E=Vn(y);p.forEach(function(n,t){M.set(n.toLowerCase(),t)});var A={a:function(n){return d[n.getDay()]},A:function(n){return v[n.getDay()]},b:function(n){return y[n.getMonth()]},B:function(n){return m[n.getMonth()]},c:t(f),d:function(n,t){return Yn(n.getDate(),t,2)},e:function(n,t){return Yn(n.getDate(),t,2)},H:function(n,t){return Yn(n.getHours(),t,2)},I:function(n,t){return Yn(n.getHours()%12||12,t,2)},j:function(n,t){return Yn(1+oo.dayOfYear(n),t,3)},L:function(n,t){return Yn(n.getMilliseconds(),t,3)},m:function(n,t){return Yn(n.getMonth()+1,t,2)},M:function(n,t){return Yn(n.getMinutes(),t,2)},p:function(n){return p[+(n.getHours()>=12)]},S:function(n,t){return Yn(n.getSeconds(),t,2)},U:function(n,t){return Yn(oo.sundayOfYear(n),t,2)},w:function(n){return n.getDay()},W:function(n,t){return Yn(oo.mondayOfYear(n),t,2)},x:t(h),X:t(g),y:function(n,t){return Yn(n.getFullYear()%100,t,2)},Y:function(n,t){return Yn(n.getFullYear()%1e4,t,4)},Z:at,"%":function(){return"%"}},C={a:r,A:u,b:i,B:a,c:o,d:nt,e:nt,H:et,I:et,j:tt,L:it,m:Qn,M:rt,p:s,S:ut,U:$n,w:Xn,W:Bn,x:c,X:l,y:Jn,Y:Wn,Z:Gn,"%":ot};return t}function Yn(n,t,e){var r=0>n?"-":"",u=(r?-n:n)+"",i=u.length;return r+(e>i?new Array(e-i+1).join(t)+u:u)}function Zn(n){return new RegExp("^(?:"+n.map(ta.requote).join("|")+")","i")}function Vn(n){for(var t=new l,e=-1,r=n.length;++e<r;)t.set(n[e].toLowerCase(),e);return t}function Xn(n,t,e){fo.lastIndex=0;var r=fo.exec(t.slice(e,e+1));return r?(n.w=+r[0],e+r[0].length):-1}function $n(n,t,e){fo.lastIndex=0;var r=fo.exec(t.slice(e));return r?(n.U=+r[0],e+r[0].length):-1}function Bn(n,t,e){fo.lastIndex=0;var r=fo.exec(t.slice(e));return r?(n.W=+r[0],e+r[0].length):-1}function Wn(n,t,e){fo.lastIndex=0;var r=fo.exec(t.slice(e,e+4));return r?(n.y=+r[0],e+r[0].length):-1}function Jn(n,t,e){fo.lastIndex=0;var r=fo.exec(t.slice(e,e+2));return r?(n.y=Kn(+r[0]),e+r[0].length):-1}function Gn(n,t,e){return/^[+-]\d{4}$/.test(t=t.slice(e,e+5))?(n.Z=-t,e+5):-1}function Kn(n){return n+(n>68?1900:2e3)}function Qn(n,t,e){fo.lastIndex=0;var r=fo.exec(t.slice(e,e+2));return r?(n.m=r[0]-1,e+r[0].length):-1}function nt(n,t,e){fo.lastIndex=0;var r=fo.exec(t.slice(e,e+2));return r?(n.d=+r[0],e+r[0].length):-1}function tt(n,t,e){fo.lastIndex=0;var r=fo.exec(t.slice(e,e+3));return r?(n.j=+r[0],e+r[0].length):-1}function et(n,t,e){fo.lastIndex=0;var r=fo.exec(t.slice(e,e+2));return r?(n.H=+r[0],e+r[0].length):-1}function rt(n,t,e){fo.lastIndex=0;var r=fo.exec(t.slice(e,e+2));return r?(n.M=+r[0],e+r[0].length):-1}function ut(n,t,e){fo.lastIndex=0;var r=fo.exec(t.slice(e,e+2));return r?(n.S=+r[0],e+r[0].length):-1}function it(n,t,e){fo.lastIndex=0;var r=fo.exec(t.slice(e,e+3));return r?(n.L=+r[0],e+r[0].length):-1}function at(n){var t=n.getTimezoneOffset(),e=t>0?"-":"+",r=ga(t)/60|0,u=ga(t)%60;return e+Yn(r,"0",2)+Yn(u,"0",2)}function ot(n,t,e){ho.lastIndex=0;var r=ho.exec(t.slice(e,e+1));return r?e+r[0].length:-1}function ct(n){for(var t=n.length,e=-1;++e<t;)n[e][0]=this(n[e][0]);return function(t){for(var e=0,r=n[e];!r[1](t);)r=n[++e];return r[0](t)}}function lt(){}function st(n,t,e){var r=e.s=n+t,u=r-n,i=r-u;e.t=n-i+(t-u)}function ft(n,t){n&&mo.hasOwnProperty(n.type)&&mo[n.type](n,t)}function ht(n,t,e){var r,u=-1,i=n.length-e;for(t.lineStart();++u<i;)r=n[u],t.point(r[0],r[1],r[2]);t.lineEnd()}function gt(n,t){var e=-1,r=n.length;for(t.polygonStart();++e<r;)ht(n[e],t,1);t.polygonEnd()}function pt(){function n(n,t){n*=Da,t=t*Da/2+qa/4;var e=n-r,a=e>=0?1:-1,o=a*e,c=Math.cos(t),l=Math.sin(t),s=i*l,f=u*c+s*Math.cos(o),h=s*a*Math.sin(o);Mo.add(Math.atan2(h,f)),r=n,u=c,i=l}var t,e,r,u,i;xo.point=function(a,o){xo.point=n,r=(t=a)*Da,u=Math.cos(o=(e=o)*Da/2+qa/4),i=Math.sin(o)},xo.lineEnd=function(){n(t,e)}}function vt(n){var t=n[0],e=n[1],r=Math.cos(e);return[r*Math.cos(t),r*Math.sin(t),Math.sin(e)]}function dt(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]}function mt(n,t){return[n[1]*t[2]-n[2]*t[1],n[2]*t[0]-n[0]*t[2],n[0]*t[1]-n[1]*t[0]]}function yt(n,t){n[0]+=t[0],n[1]+=t[1],n[2]+=t[2]}function Mt(n,t){return[n[0]*t,n[1]*t,n[2]*t]}function xt(n){var t=Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]);n[0]/=t,n[1]/=t,n[2]/=t}function bt(n){return[Math.atan2(n[1],n[0]),tn(n[2])]}function _t(n,t){return ga(n[0]-t[0])<Ca&&ga(n[1]-t[1])<Ca}function wt(n,t){n*=Da;var e=Math.cos(t*=Da);St(e*Math.cos(n),e*Math.sin(n),Math.sin(t))}function St(n,t,e){++bo,wo+=(n-wo)/bo,So+=(t-So)/bo,ko+=(e-ko)/bo}function kt(){function n(n,u){n*=Da;var i=Math.cos(u*=Da),a=i*Math.cos(n),o=i*Math.sin(n),c=Math.sin(u),l=Math.atan2(Math.sqrt((l=e*c-r*o)*l+(l=r*a-t*c)*l+(l=t*o-e*a)*l),t*a+e*o+r*c);_o+=l,No+=l*(t+(t=a)),Eo+=l*(e+(e=o)),Ao+=l*(r+(r=c)),St(t,e,r)}var t,e,r;Lo.point=function(u,i){u*=Da;var a=Math.cos(i*=Da);t=a*Math.cos(u),e=a*Math.sin(u),r=Math.sin(i),Lo.point=n,St(t,e,r)}}function Nt(){Lo.point=wt}function Et(){function n(n,t){n*=Da;var e=Math.cos(t*=Da),a=e*Math.cos(n),o=e*Math.sin(n),c=Math.sin(t),l=u*c-i*o,s=i*a-r*c,f=r*o-u*a,h=Math.sqrt(l*l+s*s+f*f),g=r*a+u*o+i*c,p=h&&-nn(g)/h,v=Math.atan2(h,g);Co+=p*l,zo+=p*s,qo+=p*f,_o+=v,No+=v*(r+(r=a)),Eo+=v*(u+(u=o)),Ao+=v*(i+(i=c)),St(r,u,i)}var t,e,r,u,i;Lo.point=function(a,o){t=a,e=o,Lo.point=n,a*=Da;var c=Math.cos(o*=Da);r=c*Math.cos(a),u=c*Math.sin(a),i=Math.sin(o),St(r,u,i)},Lo.lineEnd=function(){n(t,e),Lo.lineEnd=Nt,Lo.point=wt}}function At(n,t){function e(e,r){return e=n(e,r),t(e[0],e[1])}return n.invert&&t.invert&&(e.invert=function(e,r){return e=t.invert(e,r),e&&n.invert(e[0],e[1])}),e}function Ct(){return!0}function zt(n,t,e,r,u){var i=[],a=[];if(n.forEach(function(n){if(!((t=n.length-1)<=0)){var t,e=n[0],r=n[t];if(_t(e,r)){u.lineStart();for(var o=0;t>o;++o)u.point((e=n[o])[0],e[1]);return void u.lineEnd()}var c=new Lt(e,n,null,!0),l=new Lt(e,null,c,!1);c.o=l,i.push(c),a.push(l),c=new Lt(r,n,null,!1),l=new Lt(r,null,c,!0),c.o=l,i.push(c),a.push(l)}}),a.sort(t),qt(i),qt(a),i.length){for(var o=0,c=e,l=a.length;l>o;++o)a[o].e=c=!c;for(var s,f,h=i[0];;){for(var g=h,p=!0;g.v;)if((g=g.n)===h)return;s=g.z,u.lineStart();do{if(g.v=g.o.v=!0,g.e){if(p)for(var o=0,l=s.length;l>o;++o)u.point((f=s[o])[0],f[1]);else r(g.x,g.n.x,1,u);g=g.n}else{if(p){s=g.p.z;for(var o=s.length-1;o>=0;--o)u.point((f=s[o])[0],f[1])}else r(g.x,g.p.x,-1,u);g=g.p}g=g.o,s=g.z,p=!p}while(!g.v);u.lineEnd()}}}function qt(n){if(t=n.length){for(var t,e,r=0,u=n[0];++r<t;)u.n=e=n[r],e.p=u,u=e;u.n=e=n[0],e.p=u}}function Lt(n,t,e,r){this.x=n,this.z=t,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function Tt(n,t,e,r){return function(u,i){function a(t,e){var r=u(t,e);n(t=r[0],e=r[1])&&i.point(t,e)}function o(n,t){var e=u(n,t);d.point(e[0],e[1])}function c(){y.point=o,d.lineStart()}function l(){y.point=a,d.lineEnd()}function s(n,t){v.push([n,t]);var e=u(n,t);x.point(e[0],e[1])}function f(){x.lineStart(),v=[]}function h(){s(v[0][0],v[0][1]),x.lineEnd();var n,t=x.clean(),e=M.buffer(),r=e.length;if(v.pop(),p.push(v),v=null,r)if(1&t){n=e[0];var u,r=n.length-1,a=-1;if(r>0){for(b||(i.polygonStart(),b=!0),i.lineStart();++a<r;)i.point((u=n[a])[0],u[1]);i.lineEnd()}}else r>1&&2&t&&e.push(e.pop().concat(e.shift())),g.push(e.filter(Rt))}var g,p,v,d=t(i),m=u.invert(r[0],r[1]),y={point:a,lineStart:c,lineEnd:l,polygonStart:function(){y.point=s,y.lineStart=f,y.lineEnd=h,g=[],p=[]},polygonEnd:function(){y.point=a,y.lineStart=c,y.lineEnd=l,g=ta.merge(g);var n=Ht(m,p);g.length?(b||(i.polygonStart(),b=!0),zt(g,Pt,n,e,i)):n&&(b||(i.polygonStart(),b=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),b&&(i.polygonEnd(),b=!1),g=p=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}},M=Dt(),x=t(M),b=!1;return y}}function Rt(n){return n.length>1}function Dt(){var n,t=[];return{lineStart:function(){t.push(n=[])},point:function(t,e){n.push([t,e])},lineEnd:b,buffer:function(){var e=t;return t=[],n=null,e},rejoin:function(){t.length>1&&t.push(t.pop().concat(t.shift()))}}}function Pt(n,t){return((n=n.x)[0]<0?n[1]-Ra-Ca:Ra-n[1])-((t=t.x)[0]<0?t[1]-Ra-Ca:Ra-t[1])}function Ut(n){var t,e=NaN,r=NaN,u=NaN;return{lineStart:function(){n.lineStart(),t=1},point:function(i,a){var o=i>0?qa:-qa,c=ga(i-e);ga(c-qa)<Ca?(n.point(e,r=(r+a)/2>0?Ra:-Ra),n.point(u,r),n.lineEnd(),n.lineStart(),n.point(o,r),n.point(i,r),t=0):u!==o&&c>=qa&&(ga(e-u)<Ca&&(e-=u*Ca),ga(i-o)<Ca&&(i-=o*Ca),r=jt(e,r,i,a),n.point(u,r),n.lineEnd(),n.lineStart(),n.point(o,r),t=0),n.point(e=i,r=a),u=o},lineEnd:function(){n.lineEnd(),e=r=NaN},clean:function(){return 2-t}}}function jt(n,t,e,r){var u,i,a=Math.sin(n-e);return ga(a)>Ca?Math.atan((Math.sin(t)*(i=Math.cos(r))*Math.sin(e)-Math.sin(r)*(u=Math.cos(t))*Math.sin(n))/(u*i*a)):(t+r)/2}function Ft(n,t,e,r){var u;if(null==n)u=e*Ra,r.point(-qa,u),r.point(0,u),r.point(qa,u),r.point(qa,0),r.point(qa,-u),r.point(0,-u),r.point(-qa,-u),r.point(-qa,0),r.point(-qa,u);else if(ga(n[0]-t[0])>Ca){var i=n[0]<t[0]?qa:-qa;u=e*i/2,r.point(-i,u),r.point(0,u),r.point(i,u)}else r.point(t[0],t[1])}function Ht(n,t){var e=n[0],r=n[1],u=[Math.sin(e),-Math.cos(e),0],i=0,a=0;Mo.reset();for(var o=0,c=t.length;c>o;++o){var l=t[o],s=l.length;if(s)for(var f=l[0],h=f[0],g=f[1]/2+qa/4,p=Math.sin(g),v=Math.cos(g),d=1;;){d===s&&(d=0),n=l[d];var m=n[0],y=n[1]/2+qa/4,M=Math.sin(y),x=Math.cos(y),b=m-h,_=b>=0?1:-1,w=_*b,S=w>qa,k=p*M;if(Mo.add(Math.atan2(k*_*Math.sin(w),v*x+k*Math.cos(w))),i+=S?b+_*La:b,S^h>=e^m>=e){var N=mt(vt(f),vt(n));xt(N);var E=mt(u,N);xt(E);var A=(S^b>=0?-1:1)*tn(E[2]);(r>A||r===A&&(N[0]||N[1]))&&(a+=S^b>=0?1:-1)}if(!d++)break;h=m,p=M,v=x,f=n}}return(-Ca>i||Ca>i&&0>Mo)^1&a}function Ot(n){function t(n,t){return Math.cos(n)*Math.cos(t)>i}function e(n){var e,i,c,l,s;return{lineStart:function(){l=c=!1,s=1},point:function(f,h){var g,p=[f,h],v=t(f,h),d=a?v?0:u(f,h):v?u(f+(0>f?qa:-qa),h):0;if(!e&&(l=c=v)&&n.lineStart(),v!==c&&(g=r(e,p),(_t(e,g)||_t(p,g))&&(p[0]+=Ca,p[1]+=Ca,v=t(p[0],p[1]))),v!==c)s=0,v?(n.lineStart(),g=r(p,e),n.point(g[0],g[1])):(g=r(e,p),n.point(g[0],g[1]),n.lineEnd()),e=g;else if(o&&e&&a^v){var m;d&i||!(m=r(p,e,!0))||(s=0,a?(n.lineStart(),n.point(m[0][0],m[0][1]),n.point(m[1][0],m[1][1]),n.lineEnd()):(n.point(m[1][0],m[1][1]),n.lineEnd(),n.lineStart(),n.point(m[0][0],m[0][1])))}!v||e&&_t(e,p)||n.point(p[0],p[1]),e=p,c=v,i=d},lineEnd:function(){c&&n.lineEnd(),e=null},clean:function(){return s|(l&&c)<<1}}}function r(n,t,e){var r=vt(n),u=vt(t),a=[1,0,0],o=mt(r,u),c=dt(o,o),l=o[0],s=c-l*l;if(!s)return!e&&n;var f=i*c/s,h=-i*l/s,g=mt(a,o),p=Mt(a,f),v=Mt(o,h);yt(p,v);var d=g,m=dt(p,d),y=dt(d,d),M=m*m-y*(dt(p,p)-1);if(!(0>M)){var x=Math.sqrt(M),b=Mt(d,(-m-x)/y);if(yt(b,p),b=bt(b),!e)return b;var _,w=n[0],S=t[0],k=n[1],N=t[1];w>S&&(_=w,w=S,S=_);var E=S-w,A=ga(E-qa)<Ca,C=A||Ca>E;if(!A&&k>N&&(_=k,k=N,N=_),C?A?k+N>0^b[1]<(ga(b[0]-w)<Ca?k:N):k<=b[1]&&b[1]<=N:E>qa^(w<=b[0]&&b[0]<=S)){var z=Mt(d,(-m+x)/y);return yt(z,p),[b,bt(z)]}}}function u(t,e){var r=a?n:qa-n,u=0;return-r>t?u|=1:t>r&&(u|=2),-r>e?u|=4:e>r&&(u|=8),u}var i=Math.cos(n),a=i>0,o=ga(i)>Ca,c=pe(n,6*Da);return Tt(t,e,c,a?[0,-n]:[-qa,n-qa])}function It(n,t,e,r){return function(u){var i,a=u.a,o=u.b,c=a.x,l=a.y,s=o.x,f=o.y,h=0,g=1,p=s-c,v=f-l;if(i=n-c,p||!(i>0)){if(i/=p,0>p){if(h>i)return;g>i&&(g=i)}else if(p>0){if(i>g)return;i>h&&(h=i)}if(i=e-c,p||!(0>i)){if(i/=p,0>p){if(i>g)return;i>h&&(h=i)}else if(p>0){if(h>i)return;g>i&&(g=i)}if(i=t-l,v||!(i>0)){if(i/=v,0>v){if(h>i)return;g>i&&(g=i)}else if(v>0){if(i>g)return;i>h&&(h=i)}if(i=r-l,v||!(0>i)){if(i/=v,0>v){if(i>g)return;i>h&&(h=i)}else if(v>0){if(h>i)return;g>i&&(g=i)}return h>0&&(u.a={x:c+h*p,y:l+h*v}),1>g&&(u.b={x:c+g*p,y:l+g*v}),u}}}}}}function Yt(n,t,e,r){function u(r,u){return ga(r[0]-n)<Ca?u>0?0:3:ga(r[0]-e)<Ca?u>0?2:1:ga(r[1]-t)<Ca?u>0?1:0:u>0?3:2}function i(n,t){return a(n.x,t.x)}function a(n,t){var e=u(n,1),r=u(t,1);return e!==r?e-r:0===e?t[1]-n[1]:1===e?n[0]-t[0]:2===e?n[1]-t[1]:t[0]-n[0]}return function(o){function c(n){for(var t=0,e=d.length,r=n[1],u=0;e>u;++u)for(var i,a=1,o=d[u],c=o.length,l=o[0];c>a;++a)i=o[a],l[1]<=r?i[1]>r&&Q(l,i,n)>0&&++t:i[1]<=r&&Q(l,i,n)<0&&--t,l=i;return 0!==t}function l(i,o,c,l){var s=0,f=0;if(null==i||(s=u(i,c))!==(f=u(o,c))||a(i,o)<0^c>0){do l.point(0===s||3===s?n:e,s>1?r:t);while((s=(s+c+4)%4)!==f)}else l.point(o[0],o[1])}function s(u,i){return u>=n&&e>=u&&i>=t&&r>=i}function f(n,t){s(n,t)&&o.point(n,t)}function h(){C.point=p,d&&d.push(m=[]),S=!0,w=!1,b=_=NaN}function g(){v&&(p(y,M),x&&w&&E.rejoin(),v.push(E.buffer())),C.point=f,w&&o.lineEnd()}function p(n,t){n=Math.max(-Ro,Math.min(Ro,n)),t=Math.max(-Ro,Math.min(Ro,t));var e=s(n,t);if(d&&m.push([n,t]),S)y=n,M=t,x=e,S=!1,e&&(o.lineStart(),o.point(n,t));else if(e&&w)o.point(n,t);else{var r={a:{x:b,y:_},b:{x:n,y:t}};A(r)?(w||(o.lineStart(),o.point(r.a.x,r.a.y)),o.point(r.b.x,r.b.y),e||o.lineEnd(),k=!1):e&&(o.lineStart(),o.point(n,t),k=!1)}b=n,_=t,w=e}var v,d,m,y,M,x,b,_,w,S,k,N=o,E=Dt(),A=It(n,t,e,r),C={point:f,lineStart:h,lineEnd:g,polygonStart:function(){o=E,v=[],d=[],k=!0},polygonEnd:function(){o=N,v=ta.merge(v);var t=c([n,r]),e=k&&t,u=v.length;(e||u)&&(o.polygonStart(),e&&(o.lineStart(),l(null,null,1,o),o.lineEnd()),u&&zt(v,i,t,l,o),o.polygonEnd()),v=d=m=null}};return C}}function Zt(n){var t=0,e=qa/3,r=ae(n),u=r(t,e);return u.parallels=function(n){return arguments.length?r(t=n[0]*qa/180,e=n[1]*qa/180):[t/qa*180,e/qa*180]},u}function Vt(n,t){function e(n,t){var e=Math.sqrt(i-2*u*Math.sin(t))/u;return[e*Math.sin(n*=u),a-e*Math.cos(n)]}var r=Math.sin(n),u=(r+Math.sin(t))/2,i=1+r*(2*u-r),a=Math.sqrt(i)/u;return e.invert=function(n,t){var e=a-t;return[Math.atan2(n,e)/u,tn((i-(n*n+e*e)*u*u)/(2*u))]},e}function Xt(){function n(n,t){Po+=u*n-r*t,r=n,u=t}var t,e,r,u;Oo.point=function(i,a){Oo.point=n,t=r=i,e=u=a},Oo.lineEnd=function(){n(t,e)}}function $t(n,t){Uo>n&&(Uo=n),n>Fo&&(Fo=n),jo>t&&(jo=t),t>Ho&&(Ho=t)}function Bt(){function n(n,t){a.push("M",n,",",t,i)}function t(n,t){a.push("M",n,",",t),o.point=e}function e(n,t){a.push("L",n,",",t)}function r(){o.point=n}function u(){a.push("Z")}var i=Wt(4.5),a=[],o={point:n,lineStart:function(){o.point=t},lineEnd:r,polygonStart:function(){o.lineEnd=u},polygonEnd:function(){o.lineEnd=r,o.point=n},pointRadius:function(n){return i=Wt(n),o},result:function(){if(a.length){var n=a.join("");return a=[],n}}};return o}function Wt(n){return"m0,"+n+"a"+n+","+n+" 0 1,1 0,"+-2*n+"a"+n+","+n+" 0 1,1 0,"+2*n+"z"}function Jt(n,t){wo+=n,So+=t,++ko}function Gt(){function n(n,r){var u=n-t,i=r-e,a=Math.sqrt(u*u+i*i);No+=a*(t+n)/2,Eo+=a*(e+r)/2,Ao+=a,Jt(t=n,e=r)}var t,e;Yo.point=function(r,u){Yo.point=n,Jt(t=r,e=u)}}function Kt(){Yo.point=Jt}function Qt(){function n(n,t){var e=n-r,i=t-u,a=Math.sqrt(e*e+i*i);No+=a*(r+n)/2,Eo+=a*(u+t)/2,Ao+=a,a=u*n-r*t,Co+=a*(r+n),zo+=a*(u+t),qo+=3*a,Jt(r=n,u=t)}var t,e,r,u;Yo.point=function(i,a){Yo.point=n,Jt(t=r=i,e=u=a)},Yo.lineEnd=function(){n(t,e)}}function ne(n){function t(t,e){n.moveTo(t+a,e),n.arc(t,e,a,0,La)}function e(t,e){n.moveTo(t,e),o.point=r}function r(t,e){n.lineTo(t,e)}function u(){o.point=t}function i(){n.closePath()}var a=4.5,o={point:t,lineStart:function(){o.point=e},lineEnd:u,polygonStart:function(){o.lineEnd=i},polygonEnd:function(){o.lineEnd=u,o.point=t},pointRadius:function(n){return a=n,o},result:b};return o}function te(n){function t(n){return(o?r:e)(n)}function e(t){return ue(t,function(e,r){e=n(e,r),t.point(e[0],e[1])})}function r(t){function e(e,r){e=n(e,r),t.point(e[0],e[1])}function r(){M=NaN,S.point=i,t.lineStart()}function i(e,r){var i=vt([e,r]),a=n(e,r);u(M,x,y,b,_,w,M=a[0],x=a[1],y=e,b=i[0],_=i[1],w=i[2],o,t),t.point(M,x)}function a(){S.point=e,t.lineEnd()}function c(){r(),S.point=l,S.lineEnd=s}function l(n,t){i(f=n,h=t),g=M,p=x,v=b,d=_,m=w,S.point=i}function s(){u(M,x,y,b,_,w,g,p,f,v,d,m,o,t),S.lineEnd=a,a()}var f,h,g,p,v,d,m,y,M,x,b,_,w,S={point:e,lineStart:r,lineEnd:a,polygonStart:function(){
t.polygonStart(),S.lineStart=c},polygonEnd:function(){t.polygonEnd(),S.lineStart=r}};return S}function u(t,e,r,o,c,l,s,f,h,g,p,v,d,m){var y=s-t,M=f-e,x=y*y+M*M;if(x>4*i&&d--){var b=o+g,_=c+p,w=l+v,S=Math.sqrt(b*b+_*_+w*w),k=Math.asin(w/=S),N=ga(ga(w)-1)<Ca||ga(r-h)<Ca?(r+h)/2:Math.atan2(_,b),E=n(N,k),A=E[0],C=E[1],z=A-t,q=C-e,L=M*z-y*q;(L*L/x>i||ga((y*z+M*q)/x-.5)>.3||a>o*g+c*p+l*v)&&(u(t,e,r,o,c,l,A,C,N,b/=S,_/=S,w,d,m),m.point(A,C),u(A,C,N,b,_,w,s,f,h,g,p,v,d,m))}}var i=.5,a=Math.cos(30*Da),o=16;return t.precision=function(n){return arguments.length?(o=(i=n*n)>0&&16,t):Math.sqrt(i)},t}function ee(n){var t=te(function(t,e){return n([t*Pa,e*Pa])});return function(n){return oe(t(n))}}function re(n){this.stream=n}function ue(n,t){return{point:t,sphere:function(){n.sphere()},lineStart:function(){n.lineStart()},lineEnd:function(){n.lineEnd()},polygonStart:function(){n.polygonStart()},polygonEnd:function(){n.polygonEnd()}}}function ie(n){return ae(function(){return n})()}function ae(n){function t(n){return n=o(n[0]*Da,n[1]*Da),[n[0]*h+c,l-n[1]*h]}function e(n){return n=o.invert((n[0]-c)/h,(l-n[1])/h),n&&[n[0]*Pa,n[1]*Pa]}function r(){o=At(a=se(m,M,x),i);var n=i(v,d);return c=g-n[0]*h,l=p+n[1]*h,u()}function u(){return s&&(s.valid=!1,s=null),t}var i,a,o,c,l,s,f=te(function(n,t){return n=i(n,t),[n[0]*h+c,l-n[1]*h]}),h=150,g=480,p=250,v=0,d=0,m=0,M=0,x=0,b=To,_=y,w=null,S=null;return t.stream=function(n){return s&&(s.valid=!1),s=oe(b(a,f(_(n)))),s.valid=!0,s},t.clipAngle=function(n){return arguments.length?(b=null==n?(w=n,To):Ot((w=+n)*Da),u()):w},t.clipExtent=function(n){return arguments.length?(S=n,_=n?Yt(n[0][0],n[0][1],n[1][0],n[1][1]):y,u()):S},t.scale=function(n){return arguments.length?(h=+n,r()):h},t.translate=function(n){return arguments.length?(g=+n[0],p=+n[1],r()):[g,p]},t.center=function(n){return arguments.length?(v=n[0]%360*Da,d=n[1]%360*Da,r()):[v*Pa,d*Pa]},t.rotate=function(n){return arguments.length?(m=n[0]%360*Da,M=n[1]%360*Da,x=n.length>2?n[2]%360*Da:0,r()):[m*Pa,M*Pa,x*Pa]},ta.rebind(t,f,"precision"),function(){return i=n.apply(this,arguments),t.invert=i.invert&&e,r()}}function oe(n){return ue(n,function(t,e){n.point(t*Da,e*Da)})}function ce(n,t){return[n,t]}function le(n,t){return[n>qa?n-La:-qa>n?n+La:n,t]}function se(n,t,e){return n?t||e?At(he(n),ge(t,e)):he(n):t||e?ge(t,e):le}function fe(n){return function(t,e){return t+=n,[t>qa?t-La:-qa>t?t+La:t,e]}}function he(n){var t=fe(n);return t.invert=fe(-n),t}function ge(n,t){function e(n,t){var e=Math.cos(t),o=Math.cos(n)*e,c=Math.sin(n)*e,l=Math.sin(t),s=l*r+o*u;return[Math.atan2(c*i-s*a,o*r-l*u),tn(s*i+c*a)]}var r=Math.cos(n),u=Math.sin(n),i=Math.cos(t),a=Math.sin(t);return e.invert=function(n,t){var e=Math.cos(t),o=Math.cos(n)*e,c=Math.sin(n)*e,l=Math.sin(t),s=l*i-c*a;return[Math.atan2(c*i+l*a,o*r+s*u),tn(s*r-o*u)]},e}function pe(n,t){var e=Math.cos(n),r=Math.sin(n);return function(u,i,a,o){var c=a*t;null!=u?(u=ve(e,u),i=ve(e,i),(a>0?i>u:u>i)&&(u+=a*La)):(u=n+a*La,i=n-.5*c);for(var l,s=u;a>0?s>i:i>s;s-=c)o.point((l=bt([e,-r*Math.cos(s),-r*Math.sin(s)]))[0],l[1])}}function ve(n,t){var e=vt(t);e[0]-=n,xt(e);var r=nn(-e[1]);return((-e[2]<0?-r:r)+2*Math.PI-Ca)%(2*Math.PI)}function de(n,t,e){var r=ta.range(n,t-Ca,e).concat(t);return function(n){return r.map(function(t){return[n,t]})}}function me(n,t,e){var r=ta.range(n,t-Ca,e).concat(t);return function(n){return r.map(function(t){return[t,n]})}}function ye(n){return n.source}function Me(n){return n.target}function xe(n,t,e,r){var u=Math.cos(t),i=Math.sin(t),a=Math.cos(r),o=Math.sin(r),c=u*Math.cos(n),l=u*Math.sin(n),s=a*Math.cos(e),f=a*Math.sin(e),h=2*Math.asin(Math.sqrt(an(r-t)+u*a*an(e-n))),g=1/Math.sin(h),p=h?function(n){var t=Math.sin(n*=h)*g,e=Math.sin(h-n)*g,r=e*c+t*s,u=e*l+t*f,a=e*i+t*o;return[Math.atan2(u,r)*Pa,Math.atan2(a,Math.sqrt(r*r+u*u))*Pa]}:function(){return[n*Pa,t*Pa]};return p.distance=h,p}function be(){function n(n,u){var i=Math.sin(u*=Da),a=Math.cos(u),o=ga((n*=Da)-t),c=Math.cos(o);Zo+=Math.atan2(Math.sqrt((o=a*Math.sin(o))*o+(o=r*i-e*a*c)*o),e*i+r*a*c),t=n,e=i,r=a}var t,e,r;Vo.point=function(u,i){t=u*Da,e=Math.sin(i*=Da),r=Math.cos(i),Vo.point=n},Vo.lineEnd=function(){Vo.point=Vo.lineEnd=b}}function _e(n,t){function e(t,e){var r=Math.cos(t),u=Math.cos(e),i=n(r*u);return[i*u*Math.sin(t),i*Math.sin(e)]}return e.invert=function(n,e){var r=Math.sqrt(n*n+e*e),u=t(r),i=Math.sin(u),a=Math.cos(u);return[Math.atan2(n*i,r*a),Math.asin(r&&e*i/r)]},e}function we(n,t){function e(n,t){a>0?-Ra+Ca>t&&(t=-Ra+Ca):t>Ra-Ca&&(t=Ra-Ca);var e=a/Math.pow(u(t),i);return[e*Math.sin(i*n),a-e*Math.cos(i*n)]}var r=Math.cos(n),u=function(n){return Math.tan(qa/4+n/2)},i=n===t?Math.sin(n):Math.log(r/Math.cos(t))/Math.log(u(t)/u(n)),a=r*Math.pow(u(n),i)/i;return i?(e.invert=function(n,t){var e=a-t,r=K(i)*Math.sqrt(n*n+e*e);return[Math.atan2(n,e)/i,2*Math.atan(Math.pow(a/r,1/i))-Ra]},e):ke}function Se(n,t){function e(n,t){var e=i-t;return[e*Math.sin(u*n),i-e*Math.cos(u*n)]}var r=Math.cos(n),u=n===t?Math.sin(n):(r-Math.cos(t))/(t-n),i=r/u+n;return ga(u)<Ca?ce:(e.invert=function(n,t){var e=i-t;return[Math.atan2(n,e)/u,i-K(u)*Math.sqrt(n*n+e*e)]},e)}function ke(n,t){return[n,Math.log(Math.tan(qa/4+t/2))]}function Ne(n){var t,e=ie(n),r=e.scale,u=e.translate,i=e.clipExtent;return e.scale=function(){var n=r.apply(e,arguments);return n===e?t?e.clipExtent(null):e:n},e.translate=function(){var n=u.apply(e,arguments);return n===e?t?e.clipExtent(null):e:n},e.clipExtent=function(n){var a=i.apply(e,arguments);if(a===e){if(t=null==n){var o=qa*r(),c=u();i([[c[0]-o,c[1]-o],[c[0]+o,c[1]+o]])}}else t&&(a=null);return a},e.clipExtent(null)}function Ee(n,t){return[Math.log(Math.tan(qa/4+t/2)),-n]}function Ae(n){return n[0]}function Ce(n){return n[1]}function ze(n){for(var t=n.length,e=[0,1],r=2,u=2;t>u;u++){for(;r>1&&Q(n[e[r-2]],n[e[r-1]],n[u])<=0;)--r;e[r++]=u}return e.slice(0,r)}function qe(n,t){return n[0]-t[0]||n[1]-t[1]}function Le(n,t,e){return(e[0]-t[0])*(n[1]-t[1])<(e[1]-t[1])*(n[0]-t[0])}function Te(n,t,e,r){var u=n[0],i=e[0],a=t[0]-u,o=r[0]-i,c=n[1],l=e[1],s=t[1]-c,f=r[1]-l,h=(o*(c-l)-f*(u-i))/(f*a-o*s);return[u+h*a,c+h*s]}function Re(n){var t=n[0],e=n[n.length-1];return!(t[0]-e[0]||t[1]-e[1])}function De(){er(this),this.edge=this.site=this.circle=null}function Pe(n){var t=rc.pop()||new De;return t.site=n,t}function Ue(n){$e(n),nc.remove(n),rc.push(n),er(n)}function je(n){var t=n.circle,e=t.x,r=t.cy,u={x:e,y:r},i=n.P,a=n.N,o=[n];Ue(n);for(var c=i;c.circle&&ga(e-c.circle.x)<Ca&&ga(r-c.circle.cy)<Ca;)i=c.P,o.unshift(c),Ue(c),c=i;o.unshift(c),$e(c);for(var l=a;l.circle&&ga(e-l.circle.x)<Ca&&ga(r-l.circle.cy)<Ca;)a=l.N,o.push(l),Ue(l),l=a;o.push(l),$e(l);var s,f=o.length;for(s=1;f>s;++s)l=o[s],c=o[s-1],Qe(l.edge,c.site,l.site,u);c=o[0],l=o[f-1],l.edge=Ge(c.site,l.site,null,u),Xe(c),Xe(l)}function Fe(n){for(var t,e,r,u,i=n.x,a=n.y,o=nc._;o;)if(r=He(o,a)-i,r>Ca)o=o.L;else{if(u=i-Oe(o,a),!(u>Ca)){r>-Ca?(t=o.P,e=o):u>-Ca?(t=o,e=o.N):t=e=o;break}if(!o.R){t=o;break}o=o.R}var c=Pe(n);if(nc.insert(t,c),t||e){if(t===e)return $e(t),e=Pe(t.site),nc.insert(c,e),c.edge=e.edge=Ge(t.site,c.site),Xe(t),void Xe(e);if(!e)return void(c.edge=Ge(t.site,c.site));$e(t),$e(e);var l=t.site,s=l.x,f=l.y,h=n.x-s,g=n.y-f,p=e.site,v=p.x-s,d=p.y-f,m=2*(h*d-g*v),y=h*h+g*g,M=v*v+d*d,x={x:(d*y-g*M)/m+s,y:(h*M-v*y)/m+f};Qe(e.edge,l,p,x),c.edge=Ge(l,n,null,x),e.edge=Ge(n,p,null,x),Xe(t),Xe(e)}}function He(n,t){var e=n.site,r=e.x,u=e.y,i=u-t;if(!i)return r;var a=n.P;if(!a)return-(1/0);e=a.site;var o=e.x,c=e.y,l=c-t;if(!l)return o;var s=o-r,f=1/i-1/l,h=s/l;return f?(-h+Math.sqrt(h*h-2*f*(s*s/(-2*l)-c+l/2+u-i/2)))/f+r:(r+o)/2}function Oe(n,t){var e=n.N;if(e)return He(e,t);var r=n.site;return r.y===t?r.x:1/0}function Ie(n){this.site=n,this.edges=[]}function Ye(n){for(var t,e,r,u,i,a,o,c,l,s,f=n[0][0],h=n[1][0],g=n[0][1],p=n[1][1],v=Qo,d=v.length;d--;)if(i=v[d],i&&i.prepare())for(o=i.edges,c=o.length,a=0;c>a;)s=o[a].end(),r=s.x,u=s.y,l=o[++a%c].start(),t=l.x,e=l.y,(ga(r-t)>Ca||ga(u-e)>Ca)&&(o.splice(a,0,new nr(Ke(i.site,s,ga(r-f)<Ca&&p-u>Ca?{x:f,y:ga(t-f)<Ca?e:p}:ga(u-p)<Ca&&h-r>Ca?{x:ga(e-p)<Ca?t:h,y:p}:ga(r-h)<Ca&&u-g>Ca?{x:h,y:ga(t-h)<Ca?e:g}:ga(u-g)<Ca&&r-f>Ca?{x:ga(e-g)<Ca?t:f,y:g}:null),i.site,null)),++c)}function Ze(n,t){return t.angle-n.angle}function Ve(){er(this),this.x=this.y=this.arc=this.site=this.cy=null}function Xe(n){var t=n.P,e=n.N;if(t&&e){var r=t.site,u=n.site,i=e.site;if(r!==i){var a=u.x,o=u.y,c=r.x-a,l=r.y-o,s=i.x-a,f=i.y-o,h=2*(c*f-l*s);if(!(h>=-za)){var g=c*c+l*l,p=s*s+f*f,v=(f*g-l*p)/h,d=(c*p-s*g)/h,f=d+o,m=uc.pop()||new Ve;m.arc=n,m.site=u,m.x=v+a,m.y=f+Math.sqrt(v*v+d*d),m.cy=f,n.circle=m;for(var y=null,M=ec._;M;)if(m.y<M.y||m.y===M.y&&m.x<=M.x){if(!M.L){y=M.P;break}M=M.L}else{if(!M.R){y=M;break}M=M.R}ec.insert(y,m),y||(tc=m)}}}}function $e(n){var t=n.circle;t&&(t.P||(tc=t.N),ec.remove(t),uc.push(t),er(t),n.circle=null)}function Be(n){for(var t,e=Ko,r=It(n[0][0],n[0][1],n[1][0],n[1][1]),u=e.length;u--;)t=e[u],(!We(t,n)||!r(t)||ga(t.a.x-t.b.x)<Ca&&ga(t.a.y-t.b.y)<Ca)&&(t.a=t.b=null,e.splice(u,1))}function We(n,t){var e=n.b;if(e)return!0;var r,u,i=n.a,a=t[0][0],o=t[1][0],c=t[0][1],l=t[1][1],s=n.l,f=n.r,h=s.x,g=s.y,p=f.x,v=f.y,d=(h+p)/2,m=(g+v)/2;if(v===g){if(a>d||d>=o)return;if(h>p){if(i){if(i.y>=l)return}else i={x:d,y:c};e={x:d,y:l}}else{if(i){if(i.y<c)return}else i={x:d,y:l};e={x:d,y:c}}}else if(r=(h-p)/(v-g),u=m-r*d,-1>r||r>1)if(h>p){if(i){if(i.y>=l)return}else i={x:(c-u)/r,y:c};e={x:(l-u)/r,y:l}}else{if(i){if(i.y<c)return}else i={x:(l-u)/r,y:l};e={x:(c-u)/r,y:c}}else if(v>g){if(i){if(i.x>=o)return}else i={x:a,y:r*a+u};e={x:o,y:r*o+u}}else{if(i){if(i.x<a)return}else i={x:o,y:r*o+u};e={x:a,y:r*a+u}}return n.a=i,n.b=e,!0}function Je(n,t){this.l=n,this.r=t,this.a=this.b=null}function Ge(n,t,e,r){var u=new Je(n,t);return Ko.push(u),e&&Qe(u,n,t,e),r&&Qe(u,t,n,r),Qo[n.i].edges.push(new nr(u,n,t)),Qo[t.i].edges.push(new nr(u,t,n)),u}function Ke(n,t,e){var r=new Je(n,null);return r.a=t,r.b=e,Ko.push(r),r}function Qe(n,t,e,r){n.a||n.b?n.l===e?n.b=r:n.a=r:(n.a=r,n.l=t,n.r=e)}function nr(n,t,e){var r=n.a,u=n.b;this.edge=n,this.site=t,this.angle=e?Math.atan2(e.y-t.y,e.x-t.x):n.l===t?Math.atan2(u.x-r.x,r.y-u.y):Math.atan2(r.x-u.x,u.y-r.y)}function tr(){this._=null}function er(n){n.U=n.C=n.L=n.R=n.P=n.N=null}function rr(n,t){var e=t,r=t.R,u=e.U;u?u.L===e?u.L=r:u.R=r:n._=r,r.U=u,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function ur(n,t){var e=t,r=t.L,u=e.U;u?u.L===e?u.L=r:u.R=r:n._=r,r.U=u,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function ir(n){for(;n.L;)n=n.L;return n}function ar(n,t){var e,r,u,i=n.sort(or).pop();for(Ko=[],Qo=new Array(n.length),nc=new tr,ec=new tr;;)if(u=tc,i&&(!u||i.y<u.y||i.y===u.y&&i.x<u.x))(i.x!==e||i.y!==r)&&(Qo[i.i]=new Ie(i),Fe(i),e=i.x,r=i.y),i=n.pop();else{if(!u)break;je(u.arc)}t&&(Be(t),Ye(t));var a={cells:Qo,edges:Ko};return nc=ec=Ko=Qo=null,a}function or(n,t){return t.y-n.y||t.x-n.x}function cr(n,t,e){return(n.x-e.x)*(t.y-n.y)-(n.x-t.x)*(e.y-n.y)}function lr(n){return n.x}function sr(n){return n.y}function fr(){return{leaf:!0,nodes:[],point:null,x:null,y:null}}function hr(n,t,e,r,u,i){if(!n(t,e,r,u,i)){var a=.5*(e+u),o=.5*(r+i),c=t.nodes;c[0]&&hr(n,c[0],e,r,a,o),c[1]&&hr(n,c[1],a,r,u,o),c[2]&&hr(n,c[2],e,o,a,i),c[3]&&hr(n,c[3],a,o,u,i)}}function gr(n,t,e,r,u,i,a){var o,c=1/0;return function l(n,s,f,h,g){if(!(s>i||f>a||r>h||u>g)){if(p=n.point){var p,v=t-n.x,d=e-n.y,m=v*v+d*d;if(c>m){var y=Math.sqrt(c=m);r=t-y,u=e-y,i=t+y,a=e+y,o=p}}for(var M=n.nodes,x=.5*(s+h),b=.5*(f+g),_=t>=x,w=e>=b,S=w<<1|_,k=S+4;k>S;++S)if(n=M[3&S])switch(3&S){case 0:l(n,s,f,x,b);break;case 1:l(n,x,f,h,b);break;case 2:l(n,s,b,x,g);break;case 3:l(n,x,b,h,g)}}}(n,r,u,i,a),o}function pr(n,t){n=ta.rgb(n),t=ta.rgb(t);var e=n.r,r=n.g,u=n.b,i=t.r-e,a=t.g-r,o=t.b-u;return function(n){return"#"+bn(Math.round(e+i*n))+bn(Math.round(r+a*n))+bn(Math.round(u+o*n))}}function vr(n,t){var e,r={},u={};for(e in n)e in t?r[e]=yr(n[e],t[e]):u[e]=n[e];for(e in t)e in n||(u[e]=t[e]);return function(n){for(e in r)u[e]=r[e](n);return u}}function dr(n,t){return n=+n,t=+t,function(e){return n*(1-e)+t*e}}function mr(n,t){var e,r,u,i=ac.lastIndex=oc.lastIndex=0,a=-1,o=[],c=[];for(n+="",t+="";(e=ac.exec(n))&&(r=oc.exec(t));)(u=r.index)>i&&(u=t.slice(i,u),o[a]?o[a]+=u:o[++a]=u),(e=e[0])===(r=r[0])?o[a]?o[a]+=r:o[++a]=r:(o[++a]=null,c.push({i:a,x:dr(e,r)})),i=oc.lastIndex;return i<t.length&&(u=t.slice(i),o[a]?o[a]+=u:o[++a]=u),o.length<2?c[0]?(t=c[0].x,function(n){return t(n)+""}):function(){return t}:(t=c.length,function(n){for(var e,r=0;t>r;++r)o[(e=c[r]).i]=e.x(n);return o.join("")})}function yr(n,t){for(var e,r=ta.interpolators.length;--r>=0&&!(e=ta.interpolators[r](n,t)););return e}function Mr(n,t){var e,r=[],u=[],i=n.length,a=t.length,o=Math.min(n.length,t.length);for(e=0;o>e;++e)r.push(yr(n[e],t[e]));for(;i>e;++e)u[e]=n[e];for(;a>e;++e)u[e]=t[e];return function(n){for(e=0;o>e;++e)u[e]=r[e](n);return u}}function xr(n){return function(t){return 0>=t?0:t>=1?1:n(t)}}function br(n){return function(t){return 1-n(1-t)}}function _r(n){return function(t){return.5*(.5>t?n(2*t):2-n(2-2*t))}}function wr(n){return n*n}function Sr(n){return n*n*n}function kr(n){if(0>=n)return 0;if(n>=1)return 1;var t=n*n,e=t*n;return 4*(.5>n?e:3*(n-t)+e-.75)}function Nr(n){return function(t){return Math.pow(t,n)}}function Er(n){return 1-Math.cos(n*Ra)}function Ar(n){return Math.pow(2,10*(n-1))}function Cr(n){return 1-Math.sqrt(1-n*n)}function zr(n,t){var e;return arguments.length<2&&(t=.45),arguments.length?e=t/La*Math.asin(1/n):(n=1,e=t/4),function(r){return 1+n*Math.pow(2,-10*r)*Math.sin((r-e)*La/t)}}function qr(n){return n||(n=1.70158),function(t){return t*t*((n+1)*t-n)}}function Lr(n){return 1/2.75>n?7.5625*n*n:2/2.75>n?7.5625*(n-=1.5/2.75)*n+.75:2.5/2.75>n?7.5625*(n-=2.25/2.75)*n+.9375:7.5625*(n-=2.625/2.75)*n+.984375}function Tr(n,t){n=ta.hcl(n),t=ta.hcl(t);var e=n.h,r=n.c,u=n.l,i=t.h-e,a=t.c-r,o=t.l-u;return isNaN(a)&&(a=0,r=isNaN(r)?t.c:r),isNaN(i)?(i=0,e=isNaN(e)?t.h:e):i>180?i-=360:-180>i&&(i+=360),function(n){return fn(e+i*n,r+a*n,u+o*n)+""}}function Rr(n,t){n=ta.hsl(n),t=ta.hsl(t);var e=n.h,r=n.s,u=n.l,i=t.h-e,a=t.s-r,o=t.l-u;return isNaN(a)&&(a=0,r=isNaN(r)?t.s:r),isNaN(i)?(i=0,e=isNaN(e)?t.h:e):i>180?i-=360:-180>i&&(i+=360),function(n){return ln(e+i*n,r+a*n,u+o*n)+""}}function Dr(n,t){n=ta.lab(n),t=ta.lab(t);var e=n.l,r=n.a,u=n.b,i=t.l-e,a=t.a-r,o=t.b-u;return function(n){return gn(e+i*n,r+a*n,u+o*n)+""}}function Pr(n,t){return t-=n,function(e){return Math.round(n+t*e)}}function Ur(n){var t=[n.a,n.b],e=[n.c,n.d],r=Fr(t),u=jr(t,e),i=Fr(Hr(e,t,-u))||0;t[0]*e[1]<e[0]*t[1]&&(t[0]*=-1,t[1]*=-1,r*=-1,u*=-1),this.rotate=(r?Math.atan2(t[1],t[0]):Math.atan2(-e[0],e[1]))*Pa,this.translate=[n.e,n.f],this.scale=[r,i],this.skew=i?Math.atan2(u,i)*Pa:0}function jr(n,t){return n[0]*t[0]+n[1]*t[1]}function Fr(n){var t=Math.sqrt(jr(n,n));return t&&(n[0]/=t,n[1]/=t),t}function Hr(n,t,e){return n[0]+=e*t[0],n[1]+=e*t[1],n}function Or(n,t){var e,r=[],u=[],i=ta.transform(n),a=ta.transform(t),o=i.translate,c=a.translate,l=i.rotate,s=a.rotate,f=i.skew,h=a.skew,g=i.scale,p=a.scale;return o[0]!=c[0]||o[1]!=c[1]?(r.push("translate(",null,",",null,")"),u.push({i:1,x:dr(o[0],c[0])},{i:3,x:dr(o[1],c[1])})):c[0]||c[1]?r.push("translate("+c+")"):r.push(""),l!=s?(l-s>180?s+=360:s-l>180&&(l+=360),u.push({i:r.push(r.pop()+"rotate(",null,")")-2,x:dr(l,s)})):s&&r.push(r.pop()+"rotate("+s+")"),f!=h?u.push({i:r.push(r.pop()+"skewX(",null,")")-2,x:dr(f,h)}):h&&r.push(r.pop()+"skewX("+h+")"),g[0]!=p[0]||g[1]!=p[1]?(e=r.push(r.pop()+"scale(",null,",",null,")"),u.push({i:e-4,x:dr(g[0],p[0])},{i:e-2,x:dr(g[1],p[1])})):(1!=p[0]||1!=p[1])&&r.push(r.pop()+"scale("+p+")"),e=u.length,function(n){for(var t,i=-1;++i<e;)r[(t=u[i]).i]=t.x(n);return r.join("")}}function Ir(n,t){return t=(t-=n=+n)||1/t,function(e){return(e-n)/t}}function Yr(n,t){return t=(t-=n=+n)||1/t,function(e){return Math.max(0,Math.min(1,(e-n)/t))}}function Zr(n){for(var t=n.source,e=n.target,r=Xr(t,e),u=[t];t!==r;)t=t.parent,u.push(t);for(var i=u.length;e!==r;)u.splice(i,0,e),e=e.parent;return u}function Vr(n){for(var t=[],e=n.parent;null!=e;)t.push(n),n=e,e=e.parent;return t.push(n),t}function Xr(n,t){if(n===t)return n;for(var e=Vr(n),r=Vr(t),u=e.pop(),i=r.pop(),a=null;u===i;)a=u,u=e.pop(),i=r.pop();return a}function $r(n){n.fixed|=2}function Br(n){n.fixed&=-7}function Wr(n){n.fixed|=4,n.px=n.x,n.py=n.y}function Jr(n){n.fixed&=-5}function Gr(n,t,e){var r=0,u=0;if(n.charge=0,!n.leaf)for(var i,a=n.nodes,o=a.length,c=-1;++c<o;)i=a[c],null!=i&&(Gr(i,t,e),n.charge+=i.charge,r+=i.charge*i.cx,u+=i.charge*i.cy);if(n.point){n.leaf||(n.point.x+=Math.random()-.5,n.point.y+=Math.random()-.5);var l=t*e[n.point.index];n.charge+=n.pointCharge=l,r+=l*n.point.x,u+=l*n.point.y}n.cx=r/n.charge,n.cy=u/n.charge}function Kr(n,t){return ta.rebind(n,t,"sort","children","value"),n.nodes=n,n.links=uu,n}function Qr(n,t){for(var e=[n];null!=(n=e.pop());)if(t(n),(u=n.children)&&(r=u.length))for(var r,u;--r>=0;)e.push(u[r])}function nu(n,t){for(var e=[n],r=[];null!=(n=e.pop());)if(r.push(n),(i=n.children)&&(u=i.length))for(var u,i,a=-1;++a<u;)e.push(i[a]);for(;null!=(n=r.pop());)t(n)}function tu(n){return n.children}function eu(n){return n.value}function ru(n,t){return t.value-n.value}function uu(n){return ta.merge(n.map(function(n){return(n.children||[]).map(function(t){return{source:n,target:t}})}))}function iu(n){return n.x}function au(n){return n.y}function ou(n,t,e){n.y0=t,n.y=e}function cu(n){return ta.range(n.length)}function lu(n){for(var t=-1,e=n[0].length,r=[];++t<e;)r[t]=0;return r}function su(n){for(var t,e=1,r=0,u=n[0][1],i=n.length;i>e;++e)(t=n[e][1])>u&&(r=e,u=t);return r}function fu(n){return n.reduce(hu,0)}function hu(n,t){return n+t[1]}function gu(n,t){return pu(n,Math.ceil(Math.log(t.length)/Math.LN2+1))}function pu(n,t){for(var e=-1,r=+n[0],u=(n[1]-r)/t,i=[];++e<=t;)i[e]=u*e+r;return i}function vu(n){return[ta.min(n),ta.max(n)]}function du(n,t){return n.value-t.value}function mu(n,t){var e=n._pack_next;n._pack_next=t,t._pack_prev=n,t._pack_next=e,e._pack_prev=t}function yu(n,t){n._pack_next=t,t._pack_prev=n}function Mu(n,t){var e=t.x-n.x,r=t.y-n.y,u=n.r+t.r;return.999*u*u>e*e+r*r}function xu(n){function t(n){s=Math.min(n.x-n.r,s),f=Math.max(n.x+n.r,f),h=Math.min(n.y-n.r,h),g=Math.max(n.y+n.r,g)}if((e=n.children)&&(l=e.length)){var e,r,u,i,a,o,c,l,s=1/0,f=-(1/0),h=1/0,g=-(1/0);if(e.forEach(bu),r=e[0],r.x=-r.r,r.y=0,t(r),l>1&&(u=e[1],u.x=u.r,u.y=0,t(u),l>2))for(i=e[2],Su(r,u,i),t(i),mu(r,i),r._pack_prev=i,mu(i,u),u=r._pack_next,a=3;l>a;a++){Su(r,u,i=e[a]);var p=0,v=1,d=1;for(o=u._pack_next;o!==u;o=o._pack_next,v++)if(Mu(o,i)){p=1;break}if(1==p)for(c=r._pack_prev;c!==o._pack_prev&&!Mu(c,i);c=c._pack_prev,d++);p?(d>v||v==d&&u.r<r.r?yu(r,u=o):yu(r=c,u),a--):(mu(r,i),u=i,t(i))}var m=(s+f)/2,y=(h+g)/2,M=0;for(a=0;l>a;a++)i=e[a],i.x-=m,i.y-=y,M=Math.max(M,i.r+Math.sqrt(i.x*i.x+i.y*i.y));n.r=M,e.forEach(_u)}}function bu(n){n._pack_next=n._pack_prev=n}function _u(n){delete n._pack_next,delete n._pack_prev}function wu(n,t,e,r){var u=n.children;if(n.x=t+=r*n.x,n.y=e+=r*n.y,n.r*=r,u)for(var i=-1,a=u.length;++i<a;)wu(u[i],t,e,r)}function Su(n,t,e){var r=n.r+e.r,u=t.x-n.x,i=t.y-n.y;if(r&&(u||i)){var a=t.r+e.r,o=u*u+i*i;a*=a,r*=r;var c=.5+(r-a)/(2*o),l=Math.sqrt(Math.max(0,2*a*(r+o)-(r-=o)*r-a*a))/(2*o);e.x=n.x+c*u+l*i,e.y=n.y+c*i-l*u}else e.x=n.x+r,e.y=n.y}function ku(n,t){return n.parent==t.parent?1:2}function Nu(n){var t=n.children;return t.length?t[0]:n.t}function Eu(n){var t,e=n.children;return(t=e.length)?e[t-1]:n.t}function Au(n,t,e){var r=e/(t.i-n.i);t.c-=r,t.s+=e,n.c+=r,t.z+=e,t.m+=e}function Cu(n){for(var t,e=0,r=0,u=n.children,i=u.length;--i>=0;)t=u[i],t.z+=e,t.m+=e,e+=t.s+(r+=t.c)}function zu(n,t,e){return n.a.parent===t.parent?n.a:e}function qu(n){return 1+ta.max(n,function(n){return n.y})}function Lu(n){return n.reduce(function(n,t){return n+t.x},0)/n.length}function Tu(n){var t=n.children;return t&&t.length?Tu(t[0]):n}function Ru(n){var t,e=n.children;return e&&(t=e.length)?Ru(e[t-1]):n}function Du(n){return{x:n.x,y:n.y,dx:n.dx,dy:n.dy}}function Pu(n,t){var e=n.x+t[3],r=n.y+t[0],u=n.dx-t[1]-t[3],i=n.dy-t[0]-t[2];return 0>u&&(e+=u/2,u=0),0>i&&(r+=i/2,i=0),{x:e,y:r,dx:u,dy:i}}function Uu(n){var t=n[0],e=n[n.length-1];return e>t?[t,e]:[e,t]}function ju(n){return n.rangeExtent?n.rangeExtent():Uu(n.range())}function Fu(n,t,e,r){var u=e(n[0],n[1]),i=r(t[0],t[1]);return function(n){return i(u(n))}}function Hu(n,t){var e,r=0,u=n.length-1,i=n[r],a=n[u];return i>a&&(e=r,r=u,u=e,e=i,i=a,a=e),n[r]=t.floor(i),n[u]=t.ceil(a),n}function Ou(n){return n?{floor:function(t){return Math.floor(t/n)*n},ceil:function(t){return Math.ceil(t/n)*n}}:yc}function Iu(n,t,e,r){var u=[],i=[],a=0,o=Math.min(n.length,t.length)-1;for(n[o]<n[0]&&(n=n.slice().reverse(),t=t.slice().reverse());++a<=o;)u.push(e(n[a-1],n[a])),i.push(r(t[a-1],t[a]));return function(t){var e=ta.bisect(n,t,1,o)-1;return i[e](u[e](t))}}function Yu(n,t,e,r){function u(){var u=Math.min(n.length,t.length)>2?Iu:Fu,c=r?Yr:Ir;return a=u(n,t,c,e),o=u(t,n,c,yr),i}function i(n){return a(n)}var a,o;return i.invert=function(n){return o(n)},i.domain=function(t){return arguments.length?(n=t.map(Number),u()):n},i.range=function(n){return arguments.length?(t=n,u()):t},i.rangeRound=function(n){return i.range(n).interpolate(Pr)},i.clamp=function(n){return arguments.length?(r=n,u()):r},i.interpolate=function(n){return arguments.length?(e=n,u()):e},i.ticks=function(t){return $u(n,t)},i.tickFormat=function(t,e){return Bu(n,t,e)},i.nice=function(t){return Vu(n,t),u()},i.copy=function(){return Yu(n,t,e,r)},u()}function Zu(n,t){return ta.rebind(n,t,"range","rangeRound","interpolate","clamp")}function Vu(n,t){return Hu(n,Ou(Xu(n,t)[2]))}function Xu(n,t){null==t&&(t=10);var e=Uu(n),r=e[1]-e[0],u=Math.pow(10,Math.floor(Math.log(r/t)/Math.LN10)),i=t/r*u;return.15>=i?u*=10:.35>=i?u*=5:.75>=i&&(u*=2),e[0]=Math.ceil(e[0]/u)*u,e[1]=Math.floor(e[1]/u)*u+.5*u,e[2]=u,e}function $u(n,t){return ta.range.apply(ta,Xu(n,t))}function Bu(n,t,e){var r=Xu(n,t);if(e){var u=io.exec(e);if(u.shift(),"s"===u[8]){var i=ta.formatPrefix(Math.max(ga(r[0]),ga(r[1])));return u[7]||(u[7]="."+Wu(i.scale(r[2]))),u[8]="f",e=ta.format(u.join("")),function(n){return e(i.scale(n))+i.symbol}}u[7]||(u[7]="."+Ju(u[8],r)),e=u.join("")}else e=",."+Wu(r[2])+"f";return ta.format(e)}function Wu(n){return-Math.floor(Math.log(n)/Math.LN10+.01)}function Ju(n,t){var e=Wu(t[2]);return n in Mc?Math.abs(e-Wu(Math.max(ga(t[0]),ga(t[1]))))+ +("e"!==n):e-2*("%"===n)}function Gu(n,t,e,r){function u(n){return(e?Math.log(0>n?0:n):-Math.log(n>0?0:-n))/Math.log(t)}function i(n){return e?Math.pow(t,n):-Math.pow(t,-n)}function a(t){return n(u(t))}return a.invert=function(t){return i(n.invert(t))},a.domain=function(t){return arguments.length?(e=t[0]>=0,n.domain((r=t.map(Number)).map(u)),a):r},a.base=function(e){return arguments.length?(t=+e,n.domain(r.map(u)),a):t},a.nice=function(){var t=Hu(r.map(u),e?Math:bc);return n.domain(t),r=t.map(i),a},a.ticks=function(){var n=Uu(r),a=[],o=n[0],c=n[1],l=Math.floor(u(o)),s=Math.ceil(u(c)),f=t%1?2:t;if(isFinite(s-l)){if(e){for(;s>l;l++)for(var h=1;f>h;h++)a.push(i(l)*h);a.push(i(l))}else for(a.push(i(l));l++<s;)for(var h=f-1;h>0;h--)a.push(i(l)*h);for(l=0;a[l]<o;l++);for(s=a.length;a[s-1]>c;s--);a=a.slice(l,s)}return a},a.tickFormat=function(n,t){if(!arguments.length)return xc;arguments.length<2?t=xc:"function"!=typeof t&&(t=ta.format(t));var r,o=Math.max(.1,n/a.ticks().length),c=e?(r=1e-12,Math.ceil):(r=-1e-12,Math.floor);return function(n){return n/i(c(u(n)+r))<=o?t(n):""}},a.copy=function(){return Gu(n.copy(),t,e,r)},Zu(a,n)}function Ku(n,t,e){function r(t){return n(u(t))}var u=Qu(t),i=Qu(1/t);return r.invert=function(t){return i(n.invert(t))},r.domain=function(t){return arguments.length?(n.domain((e=t.map(Number)).map(u)),r):e},r.ticks=function(n){return $u(e,n)},r.tickFormat=function(n,t){return Bu(e,n,t)},r.nice=function(n){return r.domain(Vu(e,n))},r.exponent=function(a){return arguments.length?(u=Qu(t=a),i=Qu(1/t),n.domain(e.map(u)),r):t},r.copy=function(){return Ku(n.copy(),t,e)},Zu(r,n)}function Qu(n){return function(t){return 0>t?-Math.pow(-t,n):Math.pow(t,n)}}function ni(n,t){function e(e){return i[((u.get(e)||("range"===t.t?u.set(e,n.push(e)):NaN))-1)%i.length]}function r(t,e){return ta.range(n.length).map(function(n){return t+e*n})}var u,i,a;return e.domain=function(r){if(!arguments.length)return n;n=[],u=new l;for(var i,a=-1,o=r.length;++a<o;)u.has(i=r[a])||u.set(i,n.push(i));return e[t.t].apply(e,t.a)},e.range=function(n){return arguments.length?(i=n,a=0,t={t:"range",a:arguments},e):i},e.rangePoints=function(u,o){arguments.length<2&&(o=0);var c=u[0],l=u[1],s=n.length<2?(c=(c+l)/2,0):(l-c)/(n.length-1+o);return i=r(c+s*o/2,s),a=0,t={t:"rangePoints",a:arguments},e},e.rangeRoundPoints=function(u,o){arguments.length<2&&(o=0);var c=u[0],l=u[1],s=n.length<2?(c=l=Math.round((c+l)/2),0):(l-c)/(n.length-1+o)|0;return i=r(c+Math.round(s*o/2+(l-c-(n.length-1+o)*s)/2),s),a=0,t={t:"rangeRoundPoints",a:arguments},e},e.rangeBands=function(u,o,c){arguments.length<2&&(o=0),arguments.length<3&&(c=o);var l=u[1]<u[0],s=u[l-0],f=u[1-l],h=(f-s)/(n.length-o+2*c);return i=r(s+h*c,h),l&&i.reverse(),a=h*(1-o),t={t:"rangeBands",a:arguments},e},e.rangeRoundBands=function(u,o,c){arguments.length<2&&(o=0),arguments.length<3&&(c=o);var l=u[1]<u[0],s=u[l-0],f=u[1-l],h=Math.floor((f-s)/(n.length-o+2*c));return i=r(s+Math.round((f-s-(n.length-o)*h)/2),h),l&&i.reverse(),a=Math.round(h*(1-o)),t={t:"rangeRoundBands",a:arguments},e},e.rangeBand=function(){return a},e.rangeExtent=function(){return Uu(t.a[0])},e.copy=function(){return ni(n,t)},e.domain(n)}function ti(n,t){function i(){var e=0,r=t.length;for(o=[];++e<r;)o[e-1]=ta.quantile(n,e/r);return a}function a(n){return isNaN(n=+n)?void 0:t[ta.bisect(o,n)]}var o;return a.domain=function(t){return arguments.length?(n=t.map(r).filter(u).sort(e),i()):n},a.range=function(n){return arguments.length?(t=n,i()):t},a.quantiles=function(){return o},a.invertExtent=function(e){return e=t.indexOf(e),0>e?[NaN,NaN]:[e>0?o[e-1]:n[0],e<o.length?o[e]:n[n.length-1]]},a.copy=function(){return ti(n,t)},i()}function ei(n,t,e){function r(t){return e[Math.max(0,Math.min(a,Math.floor(i*(t-n))))]}function u(){return i=e.length/(t-n),a=e.length-1,r}var i,a;return r.domain=function(e){return arguments.length?(n=+e[0],t=+e[e.length-1],u()):[n,t]},r.range=function(n){return arguments.length?(e=n,u()):e},r.invertExtent=function(t){return t=e.indexOf(t),t=0>t?NaN:t/i+n,[t,t+1/i]},r.copy=function(){return ei(n,t,e)},u()}function ri(n,t){function e(e){return e>=e?t[ta.bisect(n,e)]:void 0}return e.domain=function(t){return arguments.length?(n=t,e):n},e.range=function(n){return arguments.length?(t=n,e):t},e.invertExtent=function(e){return e=t.indexOf(e),[n[e-1],n[e]]},e.copy=function(){return ri(n,t)},e}function ui(n){function t(n){return+n}return t.invert=t,t.domain=t.range=function(e){return arguments.length?(n=e.map(t),t):n},t.ticks=function(t){return $u(n,t)},t.tickFormat=function(t,e){return Bu(n,t,e)},t.copy=function(){return ui(n)},t}function ii(){return 0}function ai(n){return n.innerRadius}function oi(n){return n.outerRadius}function ci(n){return n.startAngle}function li(n){return n.endAngle}function si(n){return n&&n.padAngle}function fi(n,t,e,r){return(n-e)*t-(t-r)*n>0?0:1}function hi(n,t,e,r,u){var i=n[0]-t[0],a=n[1]-t[1],o=(u?r:-r)/Math.sqrt(i*i+a*a),c=o*a,l=-o*i,s=n[0]+c,f=n[1]+l,h=t[0]+c,g=t[1]+l,p=(s+h)/2,v=(f+g)/2,d=h-s,m=g-f,y=d*d+m*m,M=e-r,x=s*g-h*f,b=(0>m?-1:1)*Math.sqrt(M*M*y-x*x),_=(x*m-d*b)/y,w=(-x*d-m*b)/y,S=(x*m+d*b)/y,k=(-x*d+m*b)/y,N=_-p,E=w-v,A=S-p,C=k-v;return N*N+E*E>A*A+C*C&&(_=S,w=k),[[_-c,w-l],[_*e/M,w*e/M]]}function gi(n){function t(t){function a(){l.push("M",i(n(s),o))}for(var c,l=[],s=[],f=-1,h=t.length,g=En(e),p=En(r);++f<h;)u.call(this,c=t[f],f)?s.push([+g.call(this,c,f),+p.call(this,c,f)]):s.length&&(a(),s=[]);return s.length&&a(),l.length?l.join(""):null}var e=Ae,r=Ce,u=Ct,i=pi,a=i.key,o=.7;return t.x=function(n){return arguments.length?(e=n,t):e},t.y=function(n){return arguments.length?(r=n,t):r},t.defined=function(n){return arguments.length?(u=n,t):u},t.interpolate=function(n){return arguments.length?(a="function"==typeof n?i=n:(i=Ec.get(n)||pi).key,t):a},t.tension=function(n){return arguments.length?(o=n,t):o},t}function pi(n){return n.join("L")}function vi(n){return pi(n)+"Z"}function di(n){for(var t=0,e=n.length,r=n[0],u=[r[0],",",r[1]];++t<e;)u.push("H",(r[0]+(r=n[t])[0])/2,"V",r[1]);return e>1&&u.push("H",r[0]),u.join("")}function mi(n){for(var t=0,e=n.length,r=n[0],u=[r[0],",",r[1]];++t<e;)u.push("V",(r=n[t])[1],"H",r[0]);return u.join("")}function yi(n){for(var t=0,e=n.length,r=n[0],u=[r[0],",",r[1]];++t<e;)u.push("H",(r=n[t])[0],"V",r[1]);return u.join("")}function Mi(n,t){return n.length<4?pi(n):n[1]+_i(n.slice(1,-1),wi(n,t))}function xi(n,t){return n.length<3?pi(n):n[0]+_i((n.push(n[0]),n),wi([n[n.length-2]].concat(n,[n[1]]),t))}function bi(n,t){return n.length<3?pi(n):n[0]+_i(n,wi(n,t))}function _i(n,t){if(t.length<1||n.length!=t.length&&n.length!=t.length+2)return pi(n);var e=n.length!=t.length,r="",u=n[0],i=n[1],a=t[0],o=a,c=1;if(e&&(r+="Q"+(i[0]-2*a[0]/3)+","+(i[1]-2*a[1]/3)+","+i[0]+","+i[1],u=n[1],c=2),t.length>1){o=t[1],i=n[c],c++,r+="C"+(u[0]+a[0])+","+(u[1]+a[1])+","+(i[0]-o[0])+","+(i[1]-o[1])+","+i[0]+","+i[1];for(var l=2;l<t.length;l++,c++)i=n[c],o=t[l],r+="S"+(i[0]-o[0])+","+(i[1]-o[1])+","+i[0]+","+i[1]}if(e){var s=n[c];r+="Q"+(i[0]+2*o[0]/3)+","+(i[1]+2*o[1]/3)+","+s[0]+","+s[1]}return r}function wi(n,t){for(var e,r=[],u=(1-t)/2,i=n[0],a=n[1],o=1,c=n.length;++o<c;)e=i,i=a,a=n[o],r.push([u*(a[0]-e[0]),u*(a[1]-e[1])]);return r}function Si(n){if(n.length<3)return pi(n);var t=1,e=n.length,r=n[0],u=r[0],i=r[1],a=[u,u,u,(r=n[1])[0]],o=[i,i,i,r[1]],c=[u,",",i,"L",Ai(zc,a),",",Ai(zc,o)];for(n.push(n[e-1]);++t<=e;)r=n[t],a.shift(),a.push(r[0]),o.shift(),o.push(r[1]),Ci(c,a,o);return n.pop(),c.push("L",r),c.join("")}function ki(n){if(n.length<4)return pi(n);for(var t,e=[],r=-1,u=n.length,i=[0],a=[0];++r<3;)t=n[r],i.push(t[0]),a.push(t[1]);for(e.push(Ai(zc,i)+","+Ai(zc,a)),--r;++r<u;)t=n[r],i.shift(),i.push(t[0]),a.shift(),a.push(t[1]),Ci(e,i,a);return e.join("")}function Ni(n){for(var t,e,r=-1,u=n.length,i=u+4,a=[],o=[];++r<4;)e=n[r%u],a.push(e[0]),o.push(e[1]);for(t=[Ai(zc,a),",",Ai(zc,o)],--r;++r<i;)e=n[r%u],a.shift(),a.push(e[0]),o.shift(),o.push(e[1]),Ci(t,a,o);return t.join("")}function Ei(n,t){var e=n.length-1;if(e)for(var r,u,i=n[0][0],a=n[0][1],o=n[e][0]-i,c=n[e][1]-a,l=-1;++l<=e;)r=n[l],u=l/e,r[0]=t*r[0]+(1-t)*(i+u*o),r[1]=t*r[1]+(1-t)*(a+u*c);return Si(n)}function Ai(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]+n[3]*t[3]}function Ci(n,t,e){n.push("C",Ai(Ac,t),",",Ai(Ac,e),",",Ai(Cc,t),",",Ai(Cc,e),",",Ai(zc,t),",",Ai(zc,e))}function zi(n,t){return(t[1]-n[1])/(t[0]-n[0])}function qi(n){for(var t=0,e=n.length-1,r=[],u=n[0],i=n[1],a=r[0]=zi(u,i);++t<e;)r[t]=(a+(a=zi(u=i,i=n[t+1])))/2;return r[t]=a,r}function Li(n){for(var t,e,r,u,i=[],a=qi(n),o=-1,c=n.length-1;++o<c;)t=zi(n[o],n[o+1]),ga(t)<Ca?a[o]=a[o+1]=0:(e=a[o]/t,r=a[o+1]/t,u=e*e+r*r,u>9&&(u=3*t/Math.sqrt(u),a[o]=u*e,a[o+1]=u*r));for(o=-1;++o<=c;)u=(n[Math.min(c,o+1)][0]-n[Math.max(0,o-1)][0])/(6*(1+a[o]*a[o])),i.push([u||0,a[o]*u||0]);return i}function Ti(n){return n.length<3?pi(n):n[0]+_i(n,Li(n))}function Ri(n){for(var t,e,r,u=-1,i=n.length;++u<i;)t=n[u],e=t[0],r=t[1]-Ra,t[0]=e*Math.cos(r),t[1]=e*Math.sin(r);return n}function Di(n){function t(t){function c(){v.push("M",o(n(m),f),s,l(n(d.reverse()),f),"Z")}for(var h,g,p,v=[],d=[],m=[],y=-1,M=t.length,x=En(e),b=En(u),_=e===r?function(){return g}:En(r),w=u===i?function(){return p}:En(i);++y<M;)a.call(this,h=t[y],y)?(d.push([g=+x.call(this,h,y),p=+b.call(this,h,y)]),m.push([+_.call(this,h,y),+w.call(this,h,y)])):d.length&&(c(),d=[],m=[]);return d.length&&c(),v.length?v.join(""):null}var e=Ae,r=Ae,u=0,i=Ce,a=Ct,o=pi,c=o.key,l=o,s="L",f=.7;return t.x=function(n){return arguments.length?(e=r=n,t):r},t.x0=function(n){return arguments.length?(e=n,
t):e},t.x1=function(n){return arguments.length?(r=n,t):r},t.y=function(n){return arguments.length?(u=i=n,t):i},t.y0=function(n){return arguments.length?(u=n,t):u},t.y1=function(n){return arguments.length?(i=n,t):i},t.defined=function(n){return arguments.length?(a=n,t):a},t.interpolate=function(n){return arguments.length?(c="function"==typeof n?o=n:(o=Ec.get(n)||pi).key,l=o.reverse||o,s=o.closed?"M":"L",t):c},t.tension=function(n){return arguments.length?(f=n,t):f},t}function Pi(n){return n.radius}function Ui(n){return[n.x,n.y]}function ji(n){return function(){var t=n.apply(this,arguments),e=t[0],r=t[1]-Ra;return[e*Math.cos(r),e*Math.sin(r)]}}function Fi(){return 64}function Hi(){return"circle"}function Oi(n){var t=Math.sqrt(n/qa);return"M0,"+t+"A"+t+","+t+" 0 1,1 0,"+-t+"A"+t+","+t+" 0 1,1 0,"+t+"Z"}function Ii(n){return function(){var t,e;(t=this[n])&&(e=t[t.active])&&(--t.count?delete t[t.active]:delete this[n],t.active+=.5,e.event&&e.event.interrupt.call(this,this.__data__,e.index))}}function Yi(n,t,e){return ya(n,Uc),n.namespace=t,n.id=e,n}function Zi(n,t,e,r){var u=n.id,i=n.namespace;return Y(n,"function"==typeof e?function(n,a,o){n[i][u].tween.set(t,r(e.call(n,n.__data__,a,o)))}:(e=r(e),function(n){n[i][u].tween.set(t,e)}))}function Vi(n){return null==n&&(n=""),function(){this.textContent=n}}function Xi(n){return null==n?"__transition__":"__transition_"+n+"__"}function $i(n,t,e,r,u){var i=n[e]||(n[e]={active:0,count:0}),a=i[r];if(!a){var o=u.time;a=i[r]={tween:new l,time:o,delay:u.delay,duration:u.duration,ease:u.ease,index:t},u=null,++i.count,ta.timer(function(u){function c(e){if(i.active>r)return s();var u=i[i.active];u&&(--i.count,delete i[i.active],u.event&&u.event.interrupt.call(n,n.__data__,u.index)),i.active=r,a.event&&a.event.start.call(n,n.__data__,t),a.tween.forEach(function(e,r){(r=r.call(n,n.__data__,t))&&v.push(r)}),h=a.ease,f=a.duration,ta.timer(function(){return p.c=l(e||1)?Ct:l,1},0,o)}function l(e){if(i.active!==r)return 1;for(var u=e/f,o=h(u),c=v.length;c>0;)v[--c].call(n,o);return u>=1?(a.event&&a.event.end.call(n,n.__data__,t),s()):void 0}function s(){return--i.count?delete i[r]:delete n[e],1}var f,h,g=a.delay,p=eo,v=[];return p.t=g+o,u>=g?c(u-g):void(p.c=c)},0,o)}}function Bi(n,t,e){n.attr("transform",function(n){var r=t(n);return"translate("+(isFinite(r)?r:e(n))+",0)"})}function Wi(n,t,e){n.attr("transform",function(n){var r=t(n);return"translate(0,"+(isFinite(r)?r:e(n))+")"})}function Ji(n){return n.toISOString()}function Gi(n,t,e){function r(t){return n(t)}function u(n,e){var r=n[1]-n[0],u=r/e,i=ta.bisect(Xc,u);return i==Xc.length?[t.year,Xu(n.map(function(n){return n/31536e6}),e)[2]]:i?t[u/Xc[i-1]<Xc[i]/u?i-1:i]:[Wc,Xu(n,e)[2]]}return r.invert=function(t){return Ki(n.invert(t))},r.domain=function(t){return arguments.length?(n.domain(t),r):n.domain().map(Ki)},r.nice=function(n,t){function e(e){return!isNaN(e)&&!n.range(e,Ki(+e+1),t).length}var i=r.domain(),a=Uu(i),o=null==n?u(a,10):"number"==typeof n&&u(a,n);return o&&(n=o[0],t=o[1]),r.domain(Hu(i,t>1?{floor:function(t){for(;e(t=n.floor(t));)t=Ki(t-1);return t},ceil:function(t){for(;e(t=n.ceil(t));)t=Ki(+t+1);return t}}:n))},r.ticks=function(n,t){var e=Uu(r.domain()),i=null==n?u(e,10):"number"==typeof n?u(e,n):!n.range&&[{range:n},t];return i&&(n=i[0],t=i[1]),n.range(e[0],Ki(+e[1]+1),1>t?1:t)},r.tickFormat=function(){return e},r.copy=function(){return Gi(n.copy(),t,e)},Zu(r,n)}function Ki(n){return new Date(n)}function Qi(n){return JSON.parse(n.responseText)}function na(n){var t=ua.createRange();return t.selectNode(ua.body),t.createContextualFragment(n.responseText)}var ta={version:"3.5.6"},ea=[].slice,ra=function(n){return ea.call(n)},ua=this.document;if(ua)try{ra(ua.documentElement.childNodes)[0].nodeType}catch(ia){ra=function(n){for(var t=n.length,e=new Array(t);t--;)e[t]=n[t];return e}}if(Date.now||(Date.now=function(){return+new Date}),ua)try{ua.createElement("DIV").style.setProperty("opacity",0,"")}catch(aa){var oa=this.Element.prototype,ca=oa.setAttribute,la=oa.setAttributeNS,sa=this.CSSStyleDeclaration.prototype,fa=sa.setProperty;oa.setAttribute=function(n,t){ca.call(this,n,t+"")},oa.setAttributeNS=function(n,t,e){la.call(this,n,t,e+"")},sa.setProperty=function(n,t,e){fa.call(this,n,t+"",e)}}ta.ascending=e,ta.descending=function(n,t){return n>t?-1:t>n?1:t>=n?0:NaN},ta.min=function(n,t){var e,r,u=-1,i=n.length;if(1===arguments.length){for(;++u<i;)if(null!=(r=n[u])&&r>=r){e=r;break}for(;++u<i;)null!=(r=n[u])&&e>r&&(e=r)}else{for(;++u<i;)if(null!=(r=t.call(n,n[u],u))&&r>=r){e=r;break}for(;++u<i;)null!=(r=t.call(n,n[u],u))&&e>r&&(e=r)}return e},ta.max=function(n,t){var e,r,u=-1,i=n.length;if(1===arguments.length){for(;++u<i;)if(null!=(r=n[u])&&r>=r){e=r;break}for(;++u<i;)null!=(r=n[u])&&r>e&&(e=r)}else{for(;++u<i;)if(null!=(r=t.call(n,n[u],u))&&r>=r){e=r;break}for(;++u<i;)null!=(r=t.call(n,n[u],u))&&r>e&&(e=r)}return e},ta.extent=function(n,t){var e,r,u,i=-1,a=n.length;if(1===arguments.length){for(;++i<a;)if(null!=(r=n[i])&&r>=r){e=u=r;break}for(;++i<a;)null!=(r=n[i])&&(e>r&&(e=r),r>u&&(u=r))}else{for(;++i<a;)if(null!=(r=t.call(n,n[i],i))&&r>=r){e=u=r;break}for(;++i<a;)null!=(r=t.call(n,n[i],i))&&(e>r&&(e=r),r>u&&(u=r))}return[e,u]},ta.sum=function(n,t){var e,r=0,i=n.length,a=-1;if(1===arguments.length)for(;++a<i;)u(e=+n[a])&&(r+=e);else for(;++a<i;)u(e=+t.call(n,n[a],a))&&(r+=e);return r},ta.mean=function(n,t){var e,i=0,a=n.length,o=-1,c=a;if(1===arguments.length)for(;++o<a;)u(e=r(n[o]))?i+=e:--c;else for(;++o<a;)u(e=r(t.call(n,n[o],o)))?i+=e:--c;return c?i/c:void 0},ta.quantile=function(n,t){var e=(n.length-1)*t+1,r=Math.floor(e),u=+n[r-1],i=e-r;return i?u+i*(n[r]-u):u},ta.median=function(n,t){var i,a=[],o=n.length,c=-1;if(1===arguments.length)for(;++c<o;)u(i=r(n[c]))&&a.push(i);else for(;++c<o;)u(i=r(t.call(n,n[c],c)))&&a.push(i);return a.length?ta.quantile(a.sort(e),.5):void 0},ta.variance=function(n,t){var e,i,a=n.length,o=0,c=0,l=-1,s=0;if(1===arguments.length)for(;++l<a;)u(e=r(n[l]))&&(i=e-o,o+=i/++s,c+=i*(e-o));else for(;++l<a;)u(e=r(t.call(n,n[l],l)))&&(i=e-o,o+=i/++s,c+=i*(e-o));return s>1?c/(s-1):void 0},ta.deviation=function(){var n=ta.variance.apply(this,arguments);return n?Math.sqrt(n):n};var ha=i(e);ta.bisectLeft=ha.left,ta.bisect=ta.bisectRight=ha.right,ta.bisector=function(n){return i(1===n.length?function(t,r){return e(n(t),r)}:n)},ta.shuffle=function(n,t,e){(i=arguments.length)<3&&(e=n.length,2>i&&(t=0));for(var r,u,i=e-t;i;)u=Math.random()*i--|0,r=n[i+t],n[i+t]=n[u+t],n[u+t]=r;return n},ta.permute=function(n,t){for(var e=t.length,r=new Array(e);e--;)r[e]=n[t[e]];return r},ta.pairs=function(n){for(var t,e=0,r=n.length-1,u=n[0],i=new Array(0>r?0:r);r>e;)i[e]=[t=u,u=n[++e]];return i},ta.zip=function(){if(!(r=arguments.length))return[];for(var n=-1,t=ta.min(arguments,a),e=new Array(t);++n<t;)for(var r,u=-1,i=e[n]=new Array(r);++u<r;)i[u]=arguments[u][n];return e},ta.transpose=function(n){return ta.zip.apply(ta,n)},ta.keys=function(n){var t=[];for(var e in n)t.push(e);return t},ta.values=function(n){var t=[];for(var e in n)t.push(n[e]);return t},ta.entries=function(n){var t=[];for(var e in n)t.push({key:e,value:n[e]});return t},ta.merge=function(n){for(var t,e,r,u=n.length,i=-1,a=0;++i<u;)a+=n[i].length;for(e=new Array(a);--u>=0;)for(r=n[u],t=r.length;--t>=0;)e[--a]=r[t];return e};var ga=Math.abs;ta.range=function(n,t,e){if(arguments.length<3&&(e=1,arguments.length<2&&(t=n,n=0)),(t-n)/e===1/0)throw new Error("infinite range");var r,u=[],i=o(ga(e)),a=-1;if(n*=i,t*=i,e*=i,0>e)for(;(r=n+e*++a)>t;)u.push(r/i);else for(;(r=n+e*++a)<t;)u.push(r/i);return u},ta.map=function(n,t){var e=new l;if(n instanceof l)n.forEach(function(n,t){e.set(n,t)});else if(Array.isArray(n)){var r,u=-1,i=n.length;if(1===arguments.length)for(;++u<i;)e.set(u,n[u]);else for(;++u<i;)e.set(t.call(n,r=n[u],u),r)}else for(var a in n)e.set(a,n[a]);return e};var pa="__proto__",va="\x00";c(l,{has:h,get:function(n){return this._[s(n)]},set:function(n,t){return this._[s(n)]=t},remove:g,keys:p,values:function(){var n=[];for(var t in this._)n.push(this._[t]);return n},entries:function(){var n=[];for(var t in this._)n.push({key:f(t),value:this._[t]});return n},size:v,empty:d,forEach:function(n){for(var t in this._)n.call(this,f(t),this._[t])}}),ta.nest=function(){function n(t,a,o){if(o>=i.length)return r?r.call(u,a):e?a.sort(e):a;for(var c,s,f,h,g=-1,p=a.length,v=i[o++],d=new l;++g<p;)(h=d.get(c=v(s=a[g])))?h.push(s):d.set(c,[s]);return t?(s=t(),f=function(e,r){s.set(e,n(t,r,o))}):(s={},f=function(e,r){s[e]=n(t,r,o)}),d.forEach(f),s}function t(n,e){if(e>=i.length)return n;var r=[],u=a[e++];return n.forEach(function(n,u){r.push({key:n,values:t(u,e)})}),u?r.sort(function(n,t){return u(n.key,t.key)}):r}var e,r,u={},i=[],a=[];return u.map=function(t,e){return n(e,t,0)},u.entries=function(e){return t(n(ta.map,e,0),0)},u.key=function(n){return i.push(n),u},u.sortKeys=function(n){return a[i.length-1]=n,u},u.sortValues=function(n){return e=n,u},u.rollup=function(n){return r=n,u},u},ta.set=function(n){var t=new m;if(n)for(var e=0,r=n.length;r>e;++e)t.add(n[e]);return t},c(m,{has:h,add:function(n){return this._[s(n+="")]=!0,n},remove:g,values:p,size:v,empty:d,forEach:function(n){for(var t in this._)n.call(this,f(t))}}),ta.behavior={},ta.rebind=function(n,t){for(var e,r=1,u=arguments.length;++r<u;)n[e=arguments[r]]=M(n,t,t[e]);return n};var da=["webkit","ms","moz","Moz","o","O"];ta.dispatch=function(){for(var n=new _,t=-1,e=arguments.length;++t<e;)n[arguments[t]]=w(n);return n},_.prototype.on=function(n,t){var e=n.indexOf("."),r="";if(e>=0&&(r=n.slice(e+1),n=n.slice(0,e)),n)return arguments.length<2?this[n].on(r):this[n].on(r,t);if(2===arguments.length){if(null==t)for(n in this)this.hasOwnProperty(n)&&this[n].on(r,null);return this}},ta.event=null,ta.requote=function(n){return n.replace(ma,"\\$&")};var ma=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g,ya={}.__proto__?function(n,t){n.__proto__=t}:function(n,t){for(var e in t)n[e]=t[e]},Ma=function(n,t){return t.querySelector(n)},xa=function(n,t){return t.querySelectorAll(n)},ba=function(n,t){var e=n.matches||n[x(n,"matchesSelector")];return(ba=function(n,t){return e.call(n,t)})(n,t)};"function"==typeof Sizzle&&(Ma=function(n,t){return Sizzle(n,t)[0]||null},xa=Sizzle,ba=Sizzle.matchesSelector),ta.selection=function(){return ta.select(ua.documentElement)};var _a=ta.selection.prototype=[];_a.select=function(n){var t,e,r,u,i=[];n=A(n);for(var a=-1,o=this.length;++a<o;){i.push(t=[]),t.parentNode=(r=this[a]).parentNode;for(var c=-1,l=r.length;++c<l;)(u=r[c])?(t.push(e=n.call(u,u.__data__,c,a)),e&&"__data__"in u&&(e.__data__=u.__data__)):t.push(null)}return E(i)},_a.selectAll=function(n){var t,e,r=[];n=C(n);for(var u=-1,i=this.length;++u<i;)for(var a=this[u],o=-1,c=a.length;++o<c;)(e=a[o])&&(r.push(t=ra(n.call(e,e.__data__,o,u))),t.parentNode=e);return E(r)};var wa={svg:"http://www.w3.org/2000/svg",xhtml:"http://www.w3.org/1999/xhtml",xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};ta.ns={prefix:wa,qualify:function(n){var t=n.indexOf(":"),e=n;return t>=0&&(e=n.slice(0,t),n=n.slice(t+1)),wa.hasOwnProperty(e)?{space:wa[e],local:n}:n}},_a.attr=function(n,t){if(arguments.length<2){if("string"==typeof n){var e=this.node();return n=ta.ns.qualify(n),n.local?e.getAttributeNS(n.space,n.local):e.getAttribute(n)}for(t in n)this.each(z(t,n[t]));return this}return this.each(z(n,t))},_a.classed=function(n,t){if(arguments.length<2){if("string"==typeof n){var e=this.node(),r=(n=T(n)).length,u=-1;if(t=e.classList){for(;++u<r;)if(!t.contains(n[u]))return!1}else for(t=e.getAttribute("class");++u<r;)if(!L(n[u]).test(t))return!1;return!0}for(t in n)this.each(R(t,n[t]));return this}return this.each(R(n,t))},_a.style=function(n,e,r){var u=arguments.length;if(3>u){if("string"!=typeof n){2>u&&(e="");for(r in n)this.each(P(r,n[r],e));return this}if(2>u){var i=this.node();return t(i).getComputedStyle(i,null).getPropertyValue(n)}r=""}return this.each(P(n,e,r))},_a.property=function(n,t){if(arguments.length<2){if("string"==typeof n)return this.node()[n];for(t in n)this.each(U(t,n[t]));return this}return this.each(U(n,t))},_a.text=function(n){return arguments.length?this.each("function"==typeof n?function(){var t=n.apply(this,arguments);this.textContent=null==t?"":t}:null==n?function(){this.textContent=""}:function(){this.textContent=n}):this.node().textContent},_a.html=function(n){return arguments.length?this.each("function"==typeof n?function(){var t=n.apply(this,arguments);this.innerHTML=null==t?"":t}:null==n?function(){this.innerHTML=""}:function(){this.innerHTML=n}):this.node().innerHTML},_a.append=function(n){return n=j(n),this.select(function(){return this.appendChild(n.apply(this,arguments))})},_a.insert=function(n,t){return n=j(n),t=A(t),this.select(function(){return this.insertBefore(n.apply(this,arguments),t.apply(this,arguments)||null)})},_a.remove=function(){return this.each(F)},_a.data=function(n,t){function e(n,e){var r,u,i,a=n.length,f=e.length,h=Math.min(a,f),g=new Array(f),p=new Array(f),v=new Array(a);if(t){var d,m=new l,y=new Array(a);for(r=-1;++r<a;)m.has(d=t.call(u=n[r],u.__data__,r))?v[r]=u:m.set(d,u),y[r]=d;for(r=-1;++r<f;)(u=m.get(d=t.call(e,i=e[r],r)))?u!==!0&&(g[r]=u,u.__data__=i):p[r]=H(i),m.set(d,!0);for(r=-1;++r<a;)m.get(y[r])!==!0&&(v[r]=n[r])}else{for(r=-1;++r<h;)u=n[r],i=e[r],u?(u.__data__=i,g[r]=u):p[r]=H(i);for(;f>r;++r)p[r]=H(e[r]);for(;a>r;++r)v[r]=n[r]}p.update=g,p.parentNode=g.parentNode=v.parentNode=n.parentNode,o.push(p),c.push(g),s.push(v)}var r,u,i=-1,a=this.length;if(!arguments.length){for(n=new Array(a=(r=this[0]).length);++i<a;)(u=r[i])&&(n[i]=u.__data__);return n}var o=Z([]),c=E([]),s=E([]);if("function"==typeof n)for(;++i<a;)e(r=this[i],n.call(r,r.parentNode.__data__,i));else for(;++i<a;)e(r=this[i],n);return c.enter=function(){return o},c.exit=function(){return s},c},_a.datum=function(n){return arguments.length?this.property("__data__",n):this.property("__data__")},_a.filter=function(n){var t,e,r,u=[];"function"!=typeof n&&(n=O(n));for(var i=0,a=this.length;a>i;i++){u.push(t=[]),t.parentNode=(e=this[i]).parentNode;for(var o=0,c=e.length;c>o;o++)(r=e[o])&&n.call(r,r.__data__,o,i)&&t.push(r)}return E(u)},_a.order=function(){for(var n=-1,t=this.length;++n<t;)for(var e,r=this[n],u=r.length-1,i=r[u];--u>=0;)(e=r[u])&&(i&&i!==e.nextSibling&&i.parentNode.insertBefore(e,i),i=e);return this},_a.sort=function(n){n=I.apply(this,arguments);for(var t=-1,e=this.length;++t<e;)this[t].sort(n);return this.order()},_a.each=function(n){return Y(this,function(t,e,r){n.call(t,t.__data__,e,r)})},_a.call=function(n){var t=ra(arguments);return n.apply(t[0]=this,t),this},_a.empty=function(){return!this.node()},_a.node=function(){for(var n=0,t=this.length;t>n;n++)for(var e=this[n],r=0,u=e.length;u>r;r++){var i=e[r];if(i)return i}return null},_a.size=function(){var n=0;return Y(this,function(){++n}),n};var Sa=[];ta.selection.enter=Z,ta.selection.enter.prototype=Sa,Sa.append=_a.append,Sa.empty=_a.empty,Sa.node=_a.node,Sa.call=_a.call,Sa.size=_a.size,Sa.select=function(n){for(var t,e,r,u,i,a=[],o=-1,c=this.length;++o<c;){r=(u=this[o]).update,a.push(t=[]),t.parentNode=u.parentNode;for(var l=-1,s=u.length;++l<s;)(i=u[l])?(t.push(r[l]=e=n.call(u.parentNode,i.__data__,l,o)),e.__data__=i.__data__):t.push(null)}return E(a)},Sa.insert=function(n,t){return arguments.length<2&&(t=V(this)),_a.insert.call(this,n,t)},ta.select=function(t){var e;return"string"==typeof t?(e=[Ma(t,ua)],e.parentNode=ua.documentElement):(e=[t],e.parentNode=n(t)),E([e])},ta.selectAll=function(n){var t;return"string"==typeof n?(t=ra(xa(n,ua)),t.parentNode=ua.documentElement):(t=n,t.parentNode=null),E([t])},_a.on=function(n,t,e){var r=arguments.length;if(3>r){if("string"!=typeof n){2>r&&(t=!1);for(e in n)this.each(X(e,n[e],t));return this}if(2>r)return(r=this.node()["__on"+n])&&r._;e=!1}return this.each(X(n,t,e))};var ka=ta.map({mouseenter:"mouseover",mouseleave:"mouseout"});ua&&ka.forEach(function(n){"on"+n in ua&&ka.remove(n)});var Na,Ea=0;ta.mouse=function(n){return J(n,k())};var Aa=this.navigator&&/WebKit/.test(this.navigator.userAgent)?-1:0;ta.touch=function(n,t,e){if(arguments.length<3&&(e=t,t=k().changedTouches),t)for(var r,u=0,i=t.length;i>u;++u)if((r=t[u]).identifier===e)return J(n,r)},ta.behavior.drag=function(){function n(){this.on("mousedown.drag",i).on("touchstart.drag",a)}function e(n,t,e,i,a){return function(){function o(){var n,e,r=t(h,v);r&&(n=r[0]-M[0],e=r[1]-M[1],p|=n|e,M=r,g({type:"drag",x:r[0]+l[0],y:r[1]+l[1],dx:n,dy:e}))}function c(){t(h,v)&&(m.on(i+d,null).on(a+d,null),y(p&&ta.event.target===f),g({type:"dragend"}))}var l,s=this,f=ta.event.target,h=s.parentNode,g=r.of(s,arguments),p=0,v=n(),d=".drag"+(null==v?"":"-"+v),m=ta.select(e(f)).on(i+d,o).on(a+d,c),y=W(f),M=t(h,v);u?(l=u.apply(s,arguments),l=[l.x-M[0],l.y-M[1]]):l=[0,0],g({type:"dragstart"})}}var r=N(n,"drag","dragstart","dragend"),u=null,i=e(b,ta.mouse,t,"mousemove","mouseup"),a=e(G,ta.touch,y,"touchmove","touchend");return n.origin=function(t){return arguments.length?(u=t,n):u},ta.rebind(n,r,"on")},ta.touches=function(n,t){return arguments.length<2&&(t=k().touches),t?ra(t).map(function(t){var e=J(n,t);return e.identifier=t.identifier,e}):[]};var Ca=1e-6,za=Ca*Ca,qa=Math.PI,La=2*qa,Ta=La-Ca,Ra=qa/2,Da=qa/180,Pa=180/qa,Ua=Math.SQRT2,ja=2,Fa=4;ta.interpolateZoom=function(n,t){function e(n){var t=n*y;if(m){var e=rn(v),a=i/(ja*h)*(e*un(Ua*t+v)-en(v));return[r+a*l,u+a*s,i*e/rn(Ua*t+v)]}return[r+n*l,u+n*s,i*Math.exp(Ua*t)]}var r=n[0],u=n[1],i=n[2],a=t[0],o=t[1],c=t[2],l=a-r,s=o-u,f=l*l+s*s,h=Math.sqrt(f),g=(c*c-i*i+Fa*f)/(2*i*ja*h),p=(c*c-i*i-Fa*f)/(2*c*ja*h),v=Math.log(Math.sqrt(g*g+1)-g),d=Math.log(Math.sqrt(p*p+1)-p),m=d-v,y=(m||Math.log(c/i))/Ua;return e.duration=1e3*y,e},ta.behavior.zoom=function(){function n(n){n.on(q,f).on(Oa+".zoom",g).on("dblclick.zoom",p).on(R,h)}function e(n){return[(n[0]-k.x)/k.k,(n[1]-k.y)/k.k]}function r(n){return[n[0]*k.k+k.x,n[1]*k.k+k.y]}function u(n){k.k=Math.max(A[0],Math.min(A[1],n))}function i(n,t){t=r(t),k.x+=n[0]-t[0],k.y+=n[1]-t[1]}function a(t,e,r,a){t.__chart__={x:k.x,y:k.y,k:k.k},u(Math.pow(2,a)),i(d=e,r),t=ta.select(t),C>0&&(t=t.transition().duration(C)),t.call(n.event)}function o(){b&&b.domain(x.range().map(function(n){return(n-k.x)/k.k}).map(x.invert)),w&&w.domain(_.range().map(function(n){return(n-k.y)/k.k}).map(_.invert))}function c(n){z++||n({type:"zoomstart"})}function l(n){o(),n({type:"zoom",scale:k.k,translate:[k.x,k.y]})}function s(n){--z||(n({type:"zoomend"}),d=null)}function f(){function n(){f=1,i(ta.mouse(u),g),l(o)}function r(){h.on(L,null).on(T,null),p(f&&ta.event.target===a),s(o)}var u=this,a=ta.event.target,o=D.of(u,arguments),f=0,h=ta.select(t(u)).on(L,n).on(T,r),g=e(ta.mouse(u)),p=W(u);Pc.call(u),c(o)}function h(){function n(){var n=ta.touches(p);return g=k.k,n.forEach(function(n){n.identifier in d&&(d[n.identifier]=e(n))}),n}function t(){var t=ta.event.target;ta.select(t).on(x,r).on(b,o),_.push(t);for(var e=ta.event.changedTouches,u=0,i=e.length;i>u;++u)d[e[u].identifier]=null;var c=n(),l=Date.now();if(1===c.length){if(500>l-M){var s=c[0];a(p,s,d[s.identifier],Math.floor(Math.log(k.k)/Math.LN2)+1),S()}M=l}else if(c.length>1){var s=c[0],f=c[1],h=s[0]-f[0],g=s[1]-f[1];m=h*h+g*g}}function r(){var n,t,e,r,a=ta.touches(p);Pc.call(p);for(var o=0,c=a.length;c>o;++o,r=null)if(e=a[o],r=d[e.identifier]){if(t)break;n=e,t=r}if(r){var s=(s=e[0]-n[0])*s+(s=e[1]-n[1])*s,f=m&&Math.sqrt(s/m);n=[(n[0]+e[0])/2,(n[1]+e[1])/2],t=[(t[0]+r[0])/2,(t[1]+r[1])/2],u(f*g)}M=null,i(n,t),l(v)}function o(){if(ta.event.touches.length){for(var t=ta.event.changedTouches,e=0,r=t.length;r>e;++e)delete d[t[e].identifier];for(var u in d)return void n()}ta.selectAll(_).on(y,null),w.on(q,f).on(R,h),N(),s(v)}var g,p=this,v=D.of(p,arguments),d={},m=0,y=".zoom-"+ta.event.changedTouches[0].identifier,x="touchmove"+y,b="touchend"+y,_=[],w=ta.select(p),N=W(p);t(),c(v),w.on(q,null).on(R,t)}function g(){var n=D.of(this,arguments);y?clearTimeout(y):(Pc.call(this),v=e(d=m||ta.mouse(this)),c(n)),y=setTimeout(function(){y=null,s(n)},50),S(),u(Math.pow(2,.002*Ha())*k.k),i(d,v),l(n)}function p(){var n=ta.mouse(this),t=Math.log(k.k)/Math.LN2;a(this,n,e(n),ta.event.shiftKey?Math.ceil(t)-1:Math.floor(t)+1)}var v,d,m,y,M,x,b,_,w,k={x:0,y:0,k:1},E=[960,500],A=Ia,C=250,z=0,q="mousedown.zoom",L="mousemove.zoom",T="mouseup.zoom",R="touchstart.zoom",D=N(n,"zoomstart","zoom","zoomend");return Oa||(Oa="onwheel"in ua?(Ha=function(){return-ta.event.deltaY*(ta.event.deltaMode?120:1)},"wheel"):"onmousewheel"in ua?(Ha=function(){return ta.event.wheelDelta},"mousewheel"):(Ha=function(){return-ta.event.detail},"MozMousePixelScroll")),n.event=function(n){n.each(function(){var n=D.of(this,arguments),t=k;Rc?ta.select(this).transition().each("start.zoom",function(){k=this.__chart__||{x:0,y:0,k:1},c(n)}).tween("zoom:zoom",function(){var e=E[0],r=E[1],u=d?d[0]:e/2,i=d?d[1]:r/2,a=ta.interpolateZoom([(u-k.x)/k.k,(i-k.y)/k.k,e/k.k],[(u-t.x)/t.k,(i-t.y)/t.k,e/t.k]);return function(t){var r=a(t),o=e/r[2];this.__chart__=k={x:u-r[0]*o,y:i-r[1]*o,k:o},l(n)}}).each("interrupt.zoom",function(){s(n)}).each("end.zoom",function(){s(n)}):(this.__chart__=k,c(n),l(n),s(n))})},n.translate=function(t){return arguments.length?(k={x:+t[0],y:+t[1],k:k.k},o(),n):[k.x,k.y]},n.scale=function(t){return arguments.length?(k={x:k.x,y:k.y,k:+t},o(),n):k.k},n.scaleExtent=function(t){return arguments.length?(A=null==t?Ia:[+t[0],+t[1]],n):A},n.center=function(t){return arguments.length?(m=t&&[+t[0],+t[1]],n):m},n.size=function(t){return arguments.length?(E=t&&[+t[0],+t[1]],n):E},n.duration=function(t){return arguments.length?(C=+t,n):C},n.x=function(t){return arguments.length?(b=t,x=t.copy(),k={x:0,y:0,k:1},n):b},n.y=function(t){return arguments.length?(w=t,_=t.copy(),k={x:0,y:0,k:1},n):w},ta.rebind(n,D,"on")};var Ha,Oa,Ia=[0,1/0];ta.color=on,on.prototype.toString=function(){return this.rgb()+""},ta.hsl=cn;var Ya=cn.prototype=new on;Ya.brighter=function(n){return n=Math.pow(.7,arguments.length?n:1),new cn(this.h,this.s,this.l/n)},Ya.darker=function(n){return n=Math.pow(.7,arguments.length?n:1),new cn(this.h,this.s,n*this.l)},Ya.rgb=function(){return ln(this.h,this.s,this.l)},ta.hcl=sn;var Za=sn.prototype=new on;Za.brighter=function(n){return new sn(this.h,this.c,Math.min(100,this.l+Va*(arguments.length?n:1)))},Za.darker=function(n){return new sn(this.h,this.c,Math.max(0,this.l-Va*(arguments.length?n:1)))},Za.rgb=function(){return fn(this.h,this.c,this.l).rgb()},ta.lab=hn;var Va=18,Xa=.95047,$a=1,Ba=1.08883,Wa=hn.prototype=new on;Wa.brighter=function(n){return new hn(Math.min(100,this.l+Va*(arguments.length?n:1)),this.a,this.b)},Wa.darker=function(n){return new hn(Math.max(0,this.l-Va*(arguments.length?n:1)),this.a,this.b)},Wa.rgb=function(){return gn(this.l,this.a,this.b)},ta.rgb=yn;var Ja=yn.prototype=new on;Ja.brighter=function(n){n=Math.pow(.7,arguments.length?n:1);var t=this.r,e=this.g,r=this.b,u=30;return t||e||r?(t&&u>t&&(t=u),e&&u>e&&(e=u),r&&u>r&&(r=u),new yn(Math.min(255,t/n),Math.min(255,e/n),Math.min(255,r/n))):new yn(u,u,u)},Ja.darker=function(n){return n=Math.pow(.7,arguments.length?n:1),new yn(n*this.r,n*this.g,n*this.b)},Ja.hsl=function(){return wn(this.r,this.g,this.b)},Ja.toString=function(){return"#"+bn(this.r)+bn(this.g)+bn(this.b)};var Ga=ta.map({aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074});Ga.forEach(function(n,t){Ga.set(n,Mn(t))}),ta.functor=En,ta.xhr=An(y),ta.dsv=function(n,t){function e(n,e,i){arguments.length<3&&(i=e,e=null);var a=Cn(n,t,null==e?r:u(e),i);return a.row=function(n){return arguments.length?a.response(null==(e=n)?r:u(n)):e},a}function r(n){return e.parse(n.responseText)}function u(n){return function(t){return e.parse(t.responseText,n)}}function i(t){return t.map(a).join(n)}function a(n){return o.test(n)?'"'+n.replace(/\"/g,'""')+'"':n}var o=new RegExp('["'+n+"\n]"),c=n.charCodeAt(0);return e.parse=function(n,t){var r;return e.parseRows(n,function(n,e){if(r)return r(n,e-1);var u=new Function("d","return {"+n.map(function(n,t){return JSON.stringify(n)+": d["+t+"]"}).join(",")+"}");r=t?function(n,e){return t(u(n),e)}:u})},e.parseRows=function(n,t){function e(){if(s>=l)return a;if(u)return u=!1,i;var t=s;if(34===n.charCodeAt(t)){for(var e=t;e++<l;)if(34===n.charCodeAt(e)){if(34!==n.charCodeAt(e+1))break;++e}s=e+2;var r=n.charCodeAt(e+1);return 13===r?(u=!0,10===n.charCodeAt(e+2)&&++s):10===r&&(u=!0),n.slice(t+1,e).replace(/""/g,'"')}for(;l>s;){var r=n.charCodeAt(s++),o=1;if(10===r)u=!0;else if(13===r)u=!0,10===n.charCodeAt(s)&&(++s,++o);else if(r!==c)continue;return n.slice(t,s-o)}return n.slice(t)}for(var r,u,i={},a={},o=[],l=n.length,s=0,f=0;(r=e())!==a;){for(var h=[];r!==i&&r!==a;)h.push(r),r=e();t&&null==(h=t(h,f++))||o.push(h)}return o},e.format=function(t){if(Array.isArray(t[0]))return e.formatRows(t);var r=new m,u=[];return t.forEach(function(n){for(var t in n)r.has(t)||u.push(r.add(t))}),[u.map(a).join(n)].concat(t.map(function(t){return u.map(function(n){return a(t[n])}).join(n)})).join("\n")},e.formatRows=function(n){return n.map(i).join("\n")},e},ta.csv=ta.dsv(",","text/csv"),ta.tsv=ta.dsv("	","text/tab-separated-values");var Ka,Qa,no,to,eo,ro=this[x(this,"requestAnimationFrame")]||function(n){setTimeout(n,17)};ta.timer=function(n,t,e){var r=arguments.length;2>r&&(t=0),3>r&&(e=Date.now());var u=e+t,i={c:n,t:u,f:!1,n:null};Qa?Qa.n=i:Ka=i,Qa=i,no||(to=clearTimeout(to),no=1,ro(Ln))},ta.timer.flush=function(){Tn(),Rn()},ta.round=function(n,t){return t?Math.round(n*(t=Math.pow(10,t)))/t:Math.round(n)};var uo=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"].map(Pn);ta.formatPrefix=function(n,t){var e=0;return n&&(0>n&&(n*=-1),t&&(n=ta.round(n,Dn(n,t))),e=1+Math.floor(1e-12+Math.log(n)/Math.LN10),e=Math.max(-24,Math.min(24,3*Math.floor((e-1)/3)))),uo[8+e/3]};var io=/(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i,ao=ta.map({b:function(n){return n.toString(2)},c:function(n){return String.fromCharCode(n)},o:function(n){return n.toString(8)},x:function(n){return n.toString(16)},X:function(n){return n.toString(16).toUpperCase()},g:function(n,t){return n.toPrecision(t)},e:function(n,t){return n.toExponential(t)},f:function(n,t){return n.toFixed(t)},r:function(n,t){return(n=ta.round(n,Dn(n,t))).toFixed(Math.max(0,Math.min(20,Dn(n*(1+1e-15),t))))}}),oo=ta.time={},co=Date;Fn.prototype={getDate:function(){return this._.getUTCDate()},getDay:function(){return this._.getUTCDay()},getFullYear:function(){return this._.getUTCFullYear()},getHours:function(){return this._.getUTCHours()},getMilliseconds:function(){return this._.getUTCMilliseconds()},getMinutes:function(){return this._.getUTCMinutes()},getMonth:function(){return this._.getUTCMonth()},getSeconds:function(){return this._.getUTCSeconds()},getTime:function(){return this._.getTime()},getTimezoneOffset:function(){return 0},valueOf:function(){return this._.valueOf()},setDate:function(){lo.setUTCDate.apply(this._,arguments)},setDay:function(){lo.setUTCDay.apply(this._,arguments)},setFullYear:function(){lo.setUTCFullYear.apply(this._,arguments)},setHours:function(){lo.setUTCHours.apply(this._,arguments)},setMilliseconds:function(){lo.setUTCMilliseconds.apply(this._,arguments)},setMinutes:function(){lo.setUTCMinutes.apply(this._,arguments)},setMonth:function(){lo.setUTCMonth.apply(this._,arguments)},setSeconds:function(){lo.setUTCSeconds.apply(this._,arguments)},setTime:function(){lo.setTime.apply(this._,arguments)}};var lo=Date.prototype;oo.year=Hn(function(n){return n=oo.day(n),n.setMonth(0,1),n},function(n,t){n.setFullYear(n.getFullYear()+t)},function(n){return n.getFullYear()}),oo.years=oo.year.range,oo.years.utc=oo.year.utc.range,oo.day=Hn(function(n){var t=new co(2e3,0);return t.setFullYear(n.getFullYear(),n.getMonth(),n.getDate()),t},function(n,t){n.setDate(n.getDate()+t)},function(n){return n.getDate()-1}),oo.days=oo.day.range,oo.days.utc=oo.day.utc.range,oo.dayOfYear=function(n){var t=oo.year(n);return Math.floor((n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5)},["sunday","monday","tuesday","wednesday","thursday","friday","saturday"].forEach(function(n,t){t=7-t;var e=oo[n]=Hn(function(n){return(n=oo.day(n)).setDate(n.getDate()-(n.getDay()+t)%7),n},function(n,t){n.setDate(n.getDate()+7*Math.floor(t))},function(n){var e=oo.year(n).getDay();return Math.floor((oo.dayOfYear(n)+(e+t)%7)/7)-(e!==t)});oo[n+"s"]=e.range,oo[n+"s"].utc=e.utc.range,oo[n+"OfYear"]=function(n){var e=oo.year(n).getDay();return Math.floor((oo.dayOfYear(n)+(e+t)%7)/7)}}),oo.week=oo.sunday,oo.weeks=oo.sunday.range,oo.weeks.utc=oo.sunday.utc.range,oo.weekOfYear=oo.sundayOfYear;var so={"-":"",_:" ",0:"0"},fo=/^\s*\d+/,ho=/^%/;ta.locale=function(n){return{numberFormat:Un(n),timeFormat:In(n)}};var go=ta.locale({decimal:".",thousands:",",grouping:[3],currency:["$",""],dateTime:"%a %b %e %X %Y",date:"%m/%d/%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});ta.format=go.numberFormat,ta.geo={},lt.prototype={s:0,t:0,add:function(n){
st(n,this.t,po),st(po.s,this.s,this),this.s?this.t+=po.t:this.s=po.t},reset:function(){this.s=this.t=0},valueOf:function(){return this.s}};var po=new lt;ta.geo.stream=function(n,t){n&&vo.hasOwnProperty(n.type)?vo[n.type](n,t):ft(n,t)};var vo={Feature:function(n,t){ft(n.geometry,t)},FeatureCollection:function(n,t){for(var e=n.features,r=-1,u=e.length;++r<u;)ft(e[r].geometry,t)}},mo={Sphere:function(n,t){t.sphere()},Point:function(n,t){n=n.coordinates,t.point(n[0],n[1],n[2])},MultiPoint:function(n,t){for(var e=n.coordinates,r=-1,u=e.length;++r<u;)n=e[r],t.point(n[0],n[1],n[2])},LineString:function(n,t){ht(n.coordinates,t,0)},MultiLineString:function(n,t){for(var e=n.coordinates,r=-1,u=e.length;++r<u;)ht(e[r],t,0)},Polygon:function(n,t){gt(n.coordinates,t)},MultiPolygon:function(n,t){for(var e=n.coordinates,r=-1,u=e.length;++r<u;)gt(e[r],t)},GeometryCollection:function(n,t){for(var e=n.geometries,r=-1,u=e.length;++r<u;)ft(e[r],t)}};ta.geo.area=function(n){return yo=0,ta.geo.stream(n,xo),yo};var yo,Mo=new lt,xo={sphere:function(){yo+=4*qa},point:b,lineStart:b,lineEnd:b,polygonStart:function(){Mo.reset(),xo.lineStart=pt},polygonEnd:function(){var n=2*Mo;yo+=0>n?4*qa+n:n,xo.lineStart=xo.lineEnd=xo.point=b}};ta.geo.bounds=function(){function n(n,t){M.push(x=[s=n,h=n]),f>t&&(f=t),t>g&&(g=t)}function t(t,e){var r=vt([t*Da,e*Da]);if(m){var u=mt(m,r),i=[u[1],-u[0],0],a=mt(i,u);xt(a),a=bt(a);var c=t-p,l=c>0?1:-1,v=a[0]*Pa*l,d=ga(c)>180;if(d^(v>l*p&&l*t>v)){var y=a[1]*Pa;y>g&&(g=y)}else if(v=(v+360)%360-180,d^(v>l*p&&l*t>v)){var y=-a[1]*Pa;f>y&&(f=y)}else f>e&&(f=e),e>g&&(g=e);d?p>t?o(s,t)>o(s,h)&&(h=t):o(t,h)>o(s,h)&&(s=t):h>=s?(s>t&&(s=t),t>h&&(h=t)):t>p?o(s,t)>o(s,h)&&(h=t):o(t,h)>o(s,h)&&(s=t)}else n(t,e);m=r,p=t}function e(){b.point=t}function r(){x[0]=s,x[1]=h,b.point=n,m=null}function u(n,e){if(m){var r=n-p;y+=ga(r)>180?r+(r>0?360:-360):r}else v=n,d=e;xo.point(n,e),t(n,e)}function i(){xo.lineStart()}function a(){u(v,d),xo.lineEnd(),ga(y)>Ca&&(s=-(h=180)),x[0]=s,x[1]=h,m=null}function o(n,t){return(t-=n)<0?t+360:t}function c(n,t){return n[0]-t[0]}function l(n,t){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}var s,f,h,g,p,v,d,m,y,M,x,b={point:n,lineStart:e,lineEnd:r,polygonStart:function(){b.point=u,b.lineStart=i,b.lineEnd=a,y=0,xo.polygonStart()},polygonEnd:function(){xo.polygonEnd(),b.point=n,b.lineStart=e,b.lineEnd=r,0>Mo?(s=-(h=180),f=-(g=90)):y>Ca?g=90:-Ca>y&&(f=-90),x[0]=s,x[1]=h}};return function(n){g=h=-(s=f=1/0),M=[],ta.geo.stream(n,b);var t=M.length;if(t){M.sort(c);for(var e,r=1,u=M[0],i=[u];t>r;++r)e=M[r],l(e[0],u)||l(e[1],u)?(o(u[0],e[1])>o(u[0],u[1])&&(u[1]=e[1]),o(e[0],u[1])>o(u[0],u[1])&&(u[0]=e[0])):i.push(u=e);for(var a,e,p=-(1/0),t=i.length-1,r=0,u=i[t];t>=r;u=e,++r)e=i[r],(a=o(u[1],e[0]))>p&&(p=a,s=e[0],h=u[1])}return M=x=null,s===1/0||f===1/0?[[NaN,NaN],[NaN,NaN]]:[[s,f],[h,g]]}}(),ta.geo.centroid=function(n){bo=_o=wo=So=ko=No=Eo=Ao=Co=zo=qo=0,ta.geo.stream(n,Lo);var t=Co,e=zo,r=qo,u=t*t+e*e+r*r;return za>u&&(t=No,e=Eo,r=Ao,Ca>_o&&(t=wo,e=So,r=ko),u=t*t+e*e+r*r,za>u)?[NaN,NaN]:[Math.atan2(e,t)*Pa,tn(r/Math.sqrt(u))*Pa]};var bo,_o,wo,So,ko,No,Eo,Ao,Co,zo,qo,Lo={sphere:b,point:wt,lineStart:kt,lineEnd:Nt,polygonStart:function(){Lo.lineStart=Et},polygonEnd:function(){Lo.lineStart=kt}},To=Tt(Ct,Ut,Ft,[-qa,-qa/2]),Ro=1e9;ta.geo.clipExtent=function(){var n,t,e,r,u,i,a={stream:function(n){return u&&(u.valid=!1),u=i(n),u.valid=!0,u},extent:function(o){return arguments.length?(i=Yt(n=+o[0][0],t=+o[0][1],e=+o[1][0],r=+o[1][1]),u&&(u.valid=!1,u=null),a):[[n,t],[e,r]]}};return a.extent([[0,0],[960,500]])},(ta.geo.conicEqualArea=function(){return Zt(Vt)}).raw=Vt,ta.geo.albers=function(){return ta.geo.conicEqualArea().rotate([96,0]).center([-.6,38.7]).parallels([29.5,45.5]).scale(1070)},ta.geo.albersUsa=function(){function n(n){var i=n[0],a=n[1];return t=null,e(i,a),t||(r(i,a),t)||u(i,a),t}var t,e,r,u,i=ta.geo.albers(),a=ta.geo.conicEqualArea().rotate([154,0]).center([-2,58.5]).parallels([55,65]),o=ta.geo.conicEqualArea().rotate([157,0]).center([-3,19.9]).parallels([8,18]),c={point:function(n,e){t=[n,e]}};return n.invert=function(n){var t=i.scale(),e=i.translate(),r=(n[0]-e[0])/t,u=(n[1]-e[1])/t;return(u>=.12&&.234>u&&r>=-.425&&-.214>r?a:u>=.166&&.234>u&&r>=-.214&&-.115>r?o:i).invert(n)},n.stream=function(n){var t=i.stream(n),e=a.stream(n),r=o.stream(n);return{point:function(n,u){t.point(n,u),e.point(n,u),r.point(n,u)},sphere:function(){t.sphere(),e.sphere(),r.sphere()},lineStart:function(){t.lineStart(),e.lineStart(),r.lineStart()},lineEnd:function(){t.lineEnd(),e.lineEnd(),r.lineEnd()},polygonStart:function(){t.polygonStart(),e.polygonStart(),r.polygonStart()},polygonEnd:function(){t.polygonEnd(),e.polygonEnd(),r.polygonEnd()}}},n.precision=function(t){return arguments.length?(i.precision(t),a.precision(t),o.precision(t),n):i.precision()},n.scale=function(t){return arguments.length?(i.scale(t),a.scale(.35*t),o.scale(t),n.translate(i.translate())):i.scale()},n.translate=function(t){if(!arguments.length)return i.translate();var l=i.scale(),s=+t[0],f=+t[1];return e=i.translate(t).clipExtent([[s-.455*l,f-.238*l],[s+.455*l,f+.238*l]]).stream(c).point,r=a.translate([s-.307*l,f+.201*l]).clipExtent([[s-.425*l+Ca,f+.12*l+Ca],[s-.214*l-Ca,f+.234*l-Ca]]).stream(c).point,u=o.translate([s-.205*l,f+.212*l]).clipExtent([[s-.214*l+Ca,f+.166*l+Ca],[s-.115*l-Ca,f+.234*l-Ca]]).stream(c).point,n},n.scale(1070)};var Do,Po,Uo,jo,Fo,Ho,Oo={point:b,lineStart:b,lineEnd:b,polygonStart:function(){Po=0,Oo.lineStart=Xt},polygonEnd:function(){Oo.lineStart=Oo.lineEnd=Oo.point=b,Do+=ga(Po/2)}},Io={point:$t,lineStart:b,lineEnd:b,polygonStart:b,polygonEnd:b},Yo={point:Jt,lineStart:Gt,lineEnd:Kt,polygonStart:function(){Yo.lineStart=Qt},polygonEnd:function(){Yo.point=Jt,Yo.lineStart=Gt,Yo.lineEnd=Kt}};ta.geo.path=function(){function n(n){return n&&("function"==typeof o&&i.pointRadius(+o.apply(this,arguments)),a&&a.valid||(a=u(i)),ta.geo.stream(n,a)),i.result()}function t(){return a=null,n}var e,r,u,i,a,o=4.5;return n.area=function(n){return Do=0,ta.geo.stream(n,u(Oo)),Do},n.centroid=function(n){return wo=So=ko=No=Eo=Ao=Co=zo=qo=0,ta.geo.stream(n,u(Yo)),qo?[Co/qo,zo/qo]:Ao?[No/Ao,Eo/Ao]:ko?[wo/ko,So/ko]:[NaN,NaN]},n.bounds=function(n){return Fo=Ho=-(Uo=jo=1/0),ta.geo.stream(n,u(Io)),[[Uo,jo],[Fo,Ho]]},n.projection=function(n){return arguments.length?(u=(e=n)?n.stream||ee(n):y,t()):e},n.context=function(n){return arguments.length?(i=null==(r=n)?new Bt:new ne(n),"function"!=typeof o&&i.pointRadius(o),t()):r},n.pointRadius=function(t){return arguments.length?(o="function"==typeof t?t:(i.pointRadius(+t),+t),n):o},n.projection(ta.geo.albersUsa()).context(null)},ta.geo.transform=function(n){return{stream:function(t){var e=new re(t);for(var r in n)e[r]=n[r];return e}}},re.prototype={point:function(n,t){this.stream.point(n,t)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}},ta.geo.projection=ie,ta.geo.projectionMutator=ae,(ta.geo.equirectangular=function(){return ie(ce)}).raw=ce.invert=ce,ta.geo.rotation=function(n){function t(t){return t=n(t[0]*Da,t[1]*Da),t[0]*=Pa,t[1]*=Pa,t}return n=se(n[0]%360*Da,n[1]*Da,n.length>2?n[2]*Da:0),t.invert=function(t){return t=n.invert(t[0]*Da,t[1]*Da),t[0]*=Pa,t[1]*=Pa,t},t},le.invert=ce,ta.geo.circle=function(){function n(){var n="function"==typeof r?r.apply(this,arguments):r,t=se(-n[0]*Da,-n[1]*Da,0).invert,u=[];return e(null,null,1,{point:function(n,e){u.push(n=t(n,e)),n[0]*=Pa,n[1]*=Pa}}),{type:"Polygon",coordinates:[u]}}var t,e,r=[0,0],u=6;return n.origin=function(t){return arguments.length?(r=t,n):r},n.angle=function(r){return arguments.length?(e=pe((t=+r)*Da,u*Da),n):t},n.precision=function(r){return arguments.length?(e=pe(t*Da,(u=+r)*Da),n):u},n.angle(90)},ta.geo.distance=function(n,t){var e,r=(t[0]-n[0])*Da,u=n[1]*Da,i=t[1]*Da,a=Math.sin(r),o=Math.cos(r),c=Math.sin(u),l=Math.cos(u),s=Math.sin(i),f=Math.cos(i);return Math.atan2(Math.sqrt((e=f*a)*e+(e=l*s-c*f*o)*e),c*s+l*f*o)},ta.geo.graticule=function(){function n(){return{type:"MultiLineString",coordinates:t()}}function t(){return ta.range(Math.ceil(i/d)*d,u,d).map(h).concat(ta.range(Math.ceil(l/m)*m,c,m).map(g)).concat(ta.range(Math.ceil(r/p)*p,e,p).filter(function(n){return ga(n%d)>Ca}).map(s)).concat(ta.range(Math.ceil(o/v)*v,a,v).filter(function(n){return ga(n%m)>Ca}).map(f))}var e,r,u,i,a,o,c,l,s,f,h,g,p=10,v=p,d=90,m=360,y=2.5;return n.lines=function(){return t().map(function(n){return{type:"LineString",coordinates:n}})},n.outline=function(){return{type:"Polygon",coordinates:[h(i).concat(g(c).slice(1),h(u).reverse().slice(1),g(l).reverse().slice(1))]}},n.extent=function(t){return arguments.length?n.majorExtent(t).minorExtent(t):n.minorExtent()},n.majorExtent=function(t){return arguments.length?(i=+t[0][0],u=+t[1][0],l=+t[0][1],c=+t[1][1],i>u&&(t=i,i=u,u=t),l>c&&(t=l,l=c,c=t),n.precision(y)):[[i,l],[u,c]]},n.minorExtent=function(t){return arguments.length?(r=+t[0][0],e=+t[1][0],o=+t[0][1],a=+t[1][1],r>e&&(t=r,r=e,e=t),o>a&&(t=o,o=a,a=t),n.precision(y)):[[r,o],[e,a]]},n.step=function(t){return arguments.length?n.majorStep(t).minorStep(t):n.minorStep()},n.majorStep=function(t){return arguments.length?(d=+t[0],m=+t[1],n):[d,m]},n.minorStep=function(t){return arguments.length?(p=+t[0],v=+t[1],n):[p,v]},n.precision=function(t){return arguments.length?(y=+t,s=de(o,a,90),f=me(r,e,y),h=de(l,c,90),g=me(i,u,y),n):y},n.majorExtent([[-180,-90+Ca],[180,90-Ca]]).minorExtent([[-180,-80-Ca],[180,80+Ca]])},ta.geo.greatArc=function(){function n(){return{type:"LineString",coordinates:[t||r.apply(this,arguments),e||u.apply(this,arguments)]}}var t,e,r=ye,u=Me;return n.distance=function(){return ta.geo.distance(t||r.apply(this,arguments),e||u.apply(this,arguments))},n.source=function(e){return arguments.length?(r=e,t="function"==typeof e?null:e,n):r},n.target=function(t){return arguments.length?(u=t,e="function"==typeof t?null:t,n):u},n.precision=function(){return arguments.length?n:0},n},ta.geo.interpolate=function(n,t){return xe(n[0]*Da,n[1]*Da,t[0]*Da,t[1]*Da)},ta.geo.length=function(n){return Zo=0,ta.geo.stream(n,Vo),Zo};var Zo,Vo={sphere:b,point:b,lineStart:be,lineEnd:b,polygonStart:b,polygonEnd:b},Xo=_e(function(n){return Math.sqrt(2/(1+n))},function(n){return 2*Math.asin(n/2)});(ta.geo.azimuthalEqualArea=function(){return ie(Xo)}).raw=Xo;var $o=_e(function(n){var t=Math.acos(n);return t&&t/Math.sin(t)},y);(ta.geo.azimuthalEquidistant=function(){return ie($o)}).raw=$o,(ta.geo.conicConformal=function(){return Zt(we)}).raw=we,(ta.geo.conicEquidistant=function(){return Zt(Se)}).raw=Se;var Bo=_e(function(n){return 1/n},Math.atan);(ta.geo.gnomonic=function(){return ie(Bo)}).raw=Bo,ke.invert=function(n,t){return[n,2*Math.atan(Math.exp(t))-Ra]},(ta.geo.mercator=function(){return Ne(ke)}).raw=ke;var Wo=_e(function(){return 1},Math.asin);(ta.geo.orthographic=function(){return ie(Wo)}).raw=Wo;var Jo=_e(function(n){return 1/(1+n)},function(n){return 2*Math.atan(n)});(ta.geo.stereographic=function(){return ie(Jo)}).raw=Jo,Ee.invert=function(n,t){return[-t,2*Math.atan(Math.exp(n))-Ra]},(ta.geo.transverseMercator=function(){var n=Ne(Ee),t=n.center,e=n.rotate;return n.center=function(n){return n?t([-n[1],n[0]]):(n=t(),[n[1],-n[0]])},n.rotate=function(n){return n?e([n[0],n[1],n.length>2?n[2]+90:90]):(n=e(),[n[0],n[1],n[2]-90])},e([0,0,90])}).raw=Ee,ta.geom={},ta.geom.hull=function(n){function t(n){if(n.length<3)return[];var t,u=En(e),i=En(r),a=n.length,o=[],c=[];for(t=0;a>t;t++)o.push([+u.call(this,n[t],t),+i.call(this,n[t],t),t]);for(o.sort(qe),t=0;a>t;t++)c.push([o[t][0],-o[t][1]]);var l=ze(o),s=ze(c),f=s[0]===l[0],h=s[s.length-1]===l[l.length-1],g=[];for(t=l.length-1;t>=0;--t)g.push(n[o[l[t]][2]]);for(t=+f;t<s.length-h;++t)g.push(n[o[s[t]][2]]);return g}var e=Ae,r=Ce;return arguments.length?t(n):(t.x=function(n){return arguments.length?(e=n,t):e},t.y=function(n){return arguments.length?(r=n,t):r},t)},ta.geom.polygon=function(n){return ya(n,Go),n};var Go=ta.geom.polygon.prototype=[];Go.area=function(){for(var n,t=-1,e=this.length,r=this[e-1],u=0;++t<e;)n=r,r=this[t],u+=n[1]*r[0]-n[0]*r[1];return.5*u},Go.centroid=function(n){var t,e,r=-1,u=this.length,i=0,a=0,o=this[u-1];for(arguments.length||(n=-1/(6*this.area()));++r<u;)t=o,o=this[r],e=t[0]*o[1]-o[0]*t[1],i+=(t[0]+o[0])*e,a+=(t[1]+o[1])*e;return[i*n,a*n]},Go.clip=function(n){for(var t,e,r,u,i,a,o=Re(n),c=-1,l=this.length-Re(this),s=this[l-1];++c<l;){for(t=n.slice(),n.length=0,u=this[c],i=t[(r=t.length-o)-1],e=-1;++e<r;)a=t[e],Le(a,s,u)?(Le(i,s,u)||n.push(Te(i,a,s,u)),n.push(a)):Le(i,s,u)&&n.push(Te(i,a,s,u)),i=a;o&&n.push(n[0]),s=u}return n};var Ko,Qo,nc,tc,ec,rc=[],uc=[];Ie.prototype.prepare=function(){for(var n,t=this.edges,e=t.length;e--;)n=t[e].edge,n.b&&n.a||t.splice(e,1);return t.sort(Ze),t.length},nr.prototype={start:function(){return this.edge.l===this.site?this.edge.a:this.edge.b},end:function(){return this.edge.l===this.site?this.edge.b:this.edge.a}},tr.prototype={insert:function(n,t){var e,r,u;if(n){if(t.P=n,t.N=n.N,n.N&&(n.N.P=t),n.N=t,n.R){for(n=n.R;n.L;)n=n.L;n.L=t}else n.R=t;e=n}else this._?(n=ir(this._),t.P=null,t.N=n,n.P=n.L=t,e=n):(t.P=t.N=null,this._=t,e=null);for(t.L=t.R=null,t.U=e,t.C=!0,n=t;e&&e.C;)r=e.U,e===r.L?(u=r.R,u&&u.C?(e.C=u.C=!1,r.C=!0,n=r):(n===e.R&&(rr(this,e),n=e,e=n.U),e.C=!1,r.C=!0,ur(this,r))):(u=r.L,u&&u.C?(e.C=u.C=!1,r.C=!0,n=r):(n===e.L&&(ur(this,e),n=e,e=n.U),e.C=!1,r.C=!0,rr(this,r))),e=n.U;this._.C=!1},remove:function(n){n.N&&(n.N.P=n.P),n.P&&(n.P.N=n.N),n.N=n.P=null;var t,e,r,u=n.U,i=n.L,a=n.R;if(e=i?a?ir(a):i:a,u?u.L===n?u.L=e:u.R=e:this._=e,i&&a?(r=e.C,e.C=n.C,e.L=i,i.U=e,e!==a?(u=e.U,e.U=n.U,n=e.R,u.L=n,e.R=a,a.U=e):(e.U=u,u=e,n=e.R)):(r=n.C,n=e),n&&(n.U=u),!r){if(n&&n.C)return void(n.C=!1);do{if(n===this._)break;if(n===u.L){if(t=u.R,t.C&&(t.C=!1,u.C=!0,rr(this,u),t=u.R),t.L&&t.L.C||t.R&&t.R.C){t.R&&t.R.C||(t.L.C=!1,t.C=!0,ur(this,t),t=u.R),t.C=u.C,u.C=t.R.C=!1,rr(this,u),n=this._;break}}else if(t=u.L,t.C&&(t.C=!1,u.C=!0,ur(this,u),t=u.L),t.L&&t.L.C||t.R&&t.R.C){t.L&&t.L.C||(t.R.C=!1,t.C=!0,rr(this,t),t=u.L),t.C=u.C,u.C=t.L.C=!1,ur(this,u),n=this._;break}t.C=!0,n=u,u=u.U}while(!n.C);n&&(n.C=!1)}}},ta.geom.voronoi=function(n){function t(n){var t=new Array(n.length),r=o[0][0],u=o[0][1],i=o[1][0],a=o[1][1];return ar(e(n),o).cells.forEach(function(e,o){var c=e.edges,l=e.site,s=t[o]=c.length?c.map(function(n){var t=n.start();return[t.x,t.y]}):l.x>=r&&l.x<=i&&l.y>=u&&l.y<=a?[[r,a],[i,a],[i,u],[r,u]]:[];s.point=n[o]}),t}function e(n){return n.map(function(n,t){return{x:Math.round(i(n,t)/Ca)*Ca,y:Math.round(a(n,t)/Ca)*Ca,i:t}})}var r=Ae,u=Ce,i=r,a=u,o=ic;return n?t(n):(t.links=function(n){return ar(e(n)).edges.filter(function(n){return n.l&&n.r}).map(function(t){return{source:n[t.l.i],target:n[t.r.i]}})},t.triangles=function(n){var t=[];return ar(e(n)).cells.forEach(function(e,r){for(var u,i,a=e.site,o=e.edges.sort(Ze),c=-1,l=o.length,s=o[l-1].edge,f=s.l===a?s.r:s.l;++c<l;)u=s,i=f,s=o[c].edge,f=s.l===a?s.r:s.l,r<i.i&&r<f.i&&cr(a,i,f)<0&&t.push([n[r],n[i.i],n[f.i]])}),t},t.x=function(n){return arguments.length?(i=En(r=n),t):r},t.y=function(n){return arguments.length?(a=En(u=n),t):u},t.clipExtent=function(n){return arguments.length?(o=null==n?ic:n,t):o===ic?null:o},t.size=function(n){return arguments.length?t.clipExtent(n&&[[0,0],n]):o===ic?null:o&&o[1]},t)};var ic=[[-1e6,-1e6],[1e6,1e6]];ta.geom.delaunay=function(n){return ta.geom.voronoi().triangles(n)},ta.geom.quadtree=function(n,t,e,r,u){function i(n){function i(n,t,e,r,u,i,a,o){if(!isNaN(e)&&!isNaN(r))if(n.leaf){var c=n.x,s=n.y;if(null!=c)if(ga(c-e)+ga(s-r)<.01)l(n,t,e,r,u,i,a,o);else{var f=n.point;n.x=n.y=n.point=null,l(n,f,c,s,u,i,a,o),l(n,t,e,r,u,i,a,o)}else n.x=e,n.y=r,n.point=t}else l(n,t,e,r,u,i,a,o)}function l(n,t,e,r,u,a,o,c){var l=.5*(u+o),s=.5*(a+c),f=e>=l,h=r>=s,g=h<<1|f;n.leaf=!1,n=n.nodes[g]||(n.nodes[g]=fr()),f?u=l:o=l,h?a=s:c=s,i(n,t,e,r,u,a,o,c)}var s,f,h,g,p,v,d,m,y,M=En(o),x=En(c);if(null!=t)v=t,d=e,m=r,y=u;else if(m=y=-(v=d=1/0),f=[],h=[],p=n.length,a)for(g=0;p>g;++g)s=n[g],s.x<v&&(v=s.x),s.y<d&&(d=s.y),s.x>m&&(m=s.x),s.y>y&&(y=s.y),f.push(s.x),h.push(s.y);else for(g=0;p>g;++g){var b=+M(s=n[g],g),_=+x(s,g);v>b&&(v=b),d>_&&(d=_),b>m&&(m=b),_>y&&(y=_),f.push(b),h.push(_)}var w=m-v,S=y-d;w>S?y=d+w:m=v+S;var k=fr();if(k.add=function(n){i(k,n,+M(n,++g),+x(n,g),v,d,m,y)},k.visit=function(n){hr(n,k,v,d,m,y)},k.find=function(n){return gr(k,n[0],n[1],v,d,m,y)},g=-1,null==t){for(;++g<p;)i(k,n[g],f[g],h[g],v,d,m,y);--g}else n.forEach(k.add);return f=h=n=s=null,k}var a,o=Ae,c=Ce;return(a=arguments.length)?(o=lr,c=sr,3===a&&(u=e,r=t,e=t=0),i(n)):(i.x=function(n){return arguments.length?(o=n,i):o},i.y=function(n){return arguments.length?(c=n,i):c},i.extent=function(n){return arguments.length?(null==n?t=e=r=u=null:(t=+n[0][0],e=+n[0][1],r=+n[1][0],u=+n[1][1]),i):null==t?null:[[t,e],[r,u]]},i.size=function(n){return arguments.length?(null==n?t=e=r=u=null:(t=e=0,r=+n[0],u=+n[1]),i):null==t?null:[r-t,u-e]},i)},ta.interpolateRgb=pr,ta.interpolateObject=vr,ta.interpolateNumber=dr,ta.interpolateString=mr;var ac=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,oc=new RegExp(ac.source,"g");ta.interpolate=yr,ta.interpolators=[function(n,t){var e=typeof t;return("string"===e?Ga.has(t.toLowerCase())||/^(#|rgb\(|hsl\()/i.test(t)?pr:mr:t instanceof on?pr:Array.isArray(t)?Mr:"object"===e&&isNaN(t)?vr:dr)(n,t)}],ta.interpolateArray=Mr;var cc=function(){return y},lc=ta.map({linear:cc,poly:Nr,quad:function(){return wr},cubic:function(){return Sr},sin:function(){return Er},exp:function(){return Ar},circle:function(){return Cr},elastic:zr,back:qr,bounce:function(){return Lr}}),sc=ta.map({"in":y,out:br,"in-out":_r,"out-in":function(n){return _r(br(n))}});ta.ease=function(n){var t=n.indexOf("-"),e=t>=0?n.slice(0,t):n,r=t>=0?n.slice(t+1):"in";return e=lc.get(e)||cc,r=sc.get(r)||y,xr(r(e.apply(null,ea.call(arguments,1))))},ta.interpolateHcl=Tr,ta.interpolateHsl=Rr,ta.interpolateLab=Dr,ta.interpolateRound=Pr,ta.transform=function(n){var t=ua.createElementNS(ta.ns.prefix.svg,"g");return(ta.transform=function(n){if(null!=n){t.setAttribute("transform",n);var e=t.transform.baseVal.consolidate()}return new Ur(e?e.matrix:fc)})(n)},Ur.prototype.toString=function(){return"translate("+this.translate+")rotate("+this.rotate+")skewX("+this.skew+")scale("+this.scale+")"};var fc={a:1,b:0,c:0,d:1,e:0,f:0};ta.interpolateTransform=Or,ta.layout={},ta.layout.bundle=function(){return function(n){for(var t=[],e=-1,r=n.length;++e<r;)t.push(Zr(n[e]));return t}},ta.layout.chord=function(){function n(){var n,l,f,h,g,p={},v=[],d=ta.range(i),m=[];for(e=[],r=[],n=0,h=-1;++h<i;){for(l=0,g=-1;++g<i;)l+=u[h][g];v.push(l),m.push(ta.range(i)),n+=l}for(a&&d.sort(function(n,t){return a(v[n],v[t])}),o&&m.forEach(function(n,t){n.sort(function(n,e){return o(u[t][n],u[t][e])})}),n=(La-s*i)/n,l=0,h=-1;++h<i;){for(f=l,g=-1;++g<i;){var y=d[h],M=m[y][g],x=u[y][M],b=l,_=l+=x*n;p[y+"-"+M]={index:y,subindex:M,startAngle:b,endAngle:_,value:x}}r[y]={index:y,startAngle:f,endAngle:l,value:(l-f)/n},l+=s}for(h=-1;++h<i;)for(g=h-1;++g<i;){var w=p[h+"-"+g],S=p[g+"-"+h];(w.value||S.value)&&e.push(w.value<S.value?{source:S,target:w}:{source:w,target:S})}c&&t()}function t(){e.sort(function(n,t){return c((n.source.value+n.target.value)/2,(t.source.value+t.target.value)/2)})}var e,r,u,i,a,o,c,l={},s=0;return l.matrix=function(n){return arguments.length?(i=(u=n)&&u.length,e=r=null,l):u},l.padding=function(n){return arguments.length?(s=n,e=r=null,l):s},l.sortGroups=function(n){return arguments.length?(a=n,e=r=null,l):a},l.sortSubgroups=function(n){return arguments.length?(o=n,e=null,l):o},l.sortChords=function(n){return arguments.length?(c=n,e&&t(),l):c},l.chords=function(){return e||n(),e},l.groups=function(){return r||n(),r},l},ta.layout.force=function(){function n(n){return function(t,e,r,u){if(t.point!==n){var i=t.cx-n.x,a=t.cy-n.y,o=u-e,c=i*i+a*a;if(c>o*o/d){if(p>c){var l=t.charge/c;n.px-=i*l,n.py-=a*l}return!0}if(t.point&&c&&p>c){var l=t.pointCharge/c;n.px-=i*l,n.py-=a*l}}return!t.charge}}function t(n){n.px=ta.event.x,n.py=ta.event.y,o.resume()}var e,r,u,i,a,o={},c=ta.dispatch("start","tick","end"),l=[1,1],s=.9,f=hc,h=gc,g=-30,p=pc,v=.1,d=.64,m=[],M=[];return o.tick=function(){if((r*=.99)<.005)return c.end({type:"end",alpha:r=0}),!0;var t,e,o,f,h,p,d,y,x,b=m.length,_=M.length;for(e=0;_>e;++e)o=M[e],f=o.source,h=o.target,y=h.x-f.x,x=h.y-f.y,(p=y*y+x*x)&&(p=r*i[e]*((p=Math.sqrt(p))-u[e])/p,y*=p,x*=p,h.x-=y*(d=f.weight/(h.weight+f.weight)),h.y-=x*d,f.x+=y*(d=1-d),f.y+=x*d);if((d=r*v)&&(y=l[0]/2,x=l[1]/2,e=-1,d))for(;++e<b;)o=m[e],o.x+=(y-o.x)*d,o.y+=(x-o.y)*d;if(g)for(Gr(t=ta.geom.quadtree(m),r,a),e=-1;++e<b;)(o=m[e]).fixed||t.visit(n(o));for(e=-1;++e<b;)o=m[e],o.fixed?(o.x=o.px,o.y=o.py):(o.x-=(o.px-(o.px=o.x))*s,o.y-=(o.py-(o.py=o.y))*s);c.tick({type:"tick",alpha:r})},o.nodes=function(n){return arguments.length?(m=n,o):m},o.links=function(n){return arguments.length?(M=n,o):M},o.size=function(n){return arguments.length?(l=n,o):l},o.linkDistance=function(n){return arguments.length?(f="function"==typeof n?n:+n,o):f},o.distance=o.linkDistance,o.linkStrength=function(n){return arguments.length?(h="function"==typeof n?n:+n,o):h},o.friction=function(n){return arguments.length?(s=+n,o):s},o.charge=function(n){return arguments.length?(g="function"==typeof n?n:+n,o):g},o.chargeDistance=function(n){return arguments.length?(p=n*n,o):Math.sqrt(p)},o.gravity=function(n){return arguments.length?(v=+n,o):v},o.theta=function(n){return arguments.length?(d=n*n,o):Math.sqrt(d)},o.alpha=function(n){return arguments.length?(n=+n,r?r=n>0?n:0:n>0&&(c.start({type:"start",alpha:r=n}),ta.timer(o.tick)),o):r},o.start=function(){function n(n,r){if(!e){for(e=new Array(c),o=0;c>o;++o)e[o]=[];for(o=0;s>o;++o){var u=M[o];e[u.source.index].push(u.target),e[u.target.index].push(u.source)}}for(var i,a=e[t],o=-1,l=a.length;++o<l;)if(!isNaN(i=a[o][n]))return i;return Math.random()*r}var t,e,r,c=m.length,s=M.length,p=l[0],v=l[1];for(t=0;c>t;++t)(r=m[t]).index=t,r.weight=0;for(t=0;s>t;++t)r=M[t],"number"==typeof r.source&&(r.source=m[r.source]),"number"==typeof r.target&&(r.target=m[r.target]),++r.source.weight,++r.target.weight;for(t=0;c>t;++t)r=m[t],isNaN(r.x)&&(r.x=n("x",p)),isNaN(r.y)&&(r.y=n("y",v)),isNaN(r.px)&&(r.px=r.x),isNaN(r.py)&&(r.py=r.y);if(u=[],"function"==typeof f)for(t=0;s>t;++t)u[t]=+f.call(this,M[t],t);else for(t=0;s>t;++t)u[t]=f;if(i=[],"function"==typeof h)for(t=0;s>t;++t)i[t]=+h.call(this,M[t],t);else for(t=0;s>t;++t)i[t]=h;if(a=[],"function"==typeof g)for(t=0;c>t;++t)a[t]=+g.call(this,m[t],t);else for(t=0;c>t;++t)a[t]=g;return o.resume()},o.resume=function(){return o.alpha(.1)},o.stop=function(){return o.alpha(0)},o.drag=function(){return e||(e=ta.behavior.drag().origin(y).on("dragstart.force",$r).on("drag.force",t).on("dragend.force",Br)),arguments.length?void this.on("mouseover.force",Wr).on("mouseout.force",Jr).call(e):e},ta.rebind(o,c,"on")};var hc=20,gc=1,pc=1/0;ta.layout.hierarchy=function(){function n(u){var i,a=[u],o=[];for(u.depth=0;null!=(i=a.pop());)if(o.push(i),(l=e.call(n,i,i.depth))&&(c=l.length)){for(var c,l,s;--c>=0;)a.push(s=l[c]),s.parent=i,s.depth=i.depth+1;r&&(i.value=0),i.children=l}else r&&(i.value=+r.call(n,i,i.depth)||0),delete i.children;return nu(u,function(n){var e,u;t&&(e=n.children)&&e.sort(t),r&&(u=n.parent)&&(u.value+=n.value)}),o}var t=ru,e=tu,r=eu;return n.sort=function(e){return arguments.length?(t=e,n):t},n.children=function(t){return arguments.length?(e=t,n):e},n.value=function(t){return arguments.length?(r=t,n):r},n.revalue=function(t){return r&&(Qr(t,function(n){n.children&&(n.value=0)}),nu(t,function(t){var e;t.children||(t.value=+r.call(n,t,t.depth)||0),(e=t.parent)&&(e.value+=t.value)})),t},n},ta.layout.partition=function(){function n(t,e,r,u){var i=t.children;if(t.x=e,t.y=t.depth*u,t.dx=r,t.dy=u,i&&(a=i.length)){var a,o,c,l=-1;for(r=t.value?r/t.value:0;++l<a;)n(o=i[l],e,c=o.value*r,u),e+=c}}function t(n){var e=n.children,r=0;if(e&&(u=e.length))for(var u,i=-1;++i<u;)r=Math.max(r,t(e[i]));return 1+r}function e(e,i){var a=r.call(this,e,i);return n(a[0],0,u[0],u[1]/t(a[0])),a}var r=ta.layout.hierarchy(),u=[1,1];return e.size=function(n){return arguments.length?(u=n,e):u},Kr(e,r)},ta.layout.pie=function(){function n(a){var o,c=a.length,l=a.map(function(e,r){return+t.call(n,e,r)}),s=+("function"==typeof r?r.apply(this,arguments):r),f=("function"==typeof u?u.apply(this,arguments):u)-s,h=Math.min(Math.abs(f)/c,+("function"==typeof i?i.apply(this,arguments):i)),g=h*(0>f?-1:1),p=(f-c*g)/ta.sum(l),v=ta.range(c),d=[];return null!=e&&v.sort(e===vc?function(n,t){return l[t]-l[n]}:function(n,t){return e(a[n],a[t])}),v.forEach(function(n){d[n]={data:a[n],value:o=l[n],startAngle:s,endAngle:s+=o*p+g,padAngle:h}}),d}var t=Number,e=vc,r=0,u=La,i=0;return n.value=function(e){return arguments.length?(t=e,n):t},n.sort=function(t){return arguments.length?(e=t,n):e},n.startAngle=function(t){return arguments.length?(r=t,n):r},n.endAngle=function(t){return arguments.length?(u=t,n):u},n.padAngle=function(t){return arguments.length?(i=t,n):i},n};var vc={};ta.layout.stack=function(){function n(o,c){if(!(h=o.length))return o;var l=o.map(function(e,r){return t.call(n,e,r)}),s=l.map(function(t){return t.map(function(t,e){return[i.call(n,t,e),a.call(n,t,e)]})}),f=e.call(n,s,c);l=ta.permute(l,f),s=ta.permute(s,f);var h,g,p,v,d=r.call(n,s,c),m=l[0].length;for(p=0;m>p;++p)for(u.call(n,l[0][p],v=d[p],s[0][p][1]),g=1;h>g;++g)u.call(n,l[g][p],v+=s[g-1][p][1],s[g][p][1]);return o}var t=y,e=cu,r=lu,u=ou,i=iu,a=au;return n.values=function(e){return arguments.length?(t=e,n):t},n.order=function(t){return arguments.length?(e="function"==typeof t?t:dc.get(t)||cu,n):e},n.offset=function(t){return arguments.length?(r="function"==typeof t?t:mc.get(t)||lu,n):r},n.x=function(t){return arguments.length?(i=t,n):i},n.y=function(t){return arguments.length?(a=t,n):a},n.out=function(t){return arguments.length?(u=t,n):u},n};var dc=ta.map({"inside-out":function(n){var t,e,r=n.length,u=n.map(su),i=n.map(fu),a=ta.range(r).sort(function(n,t){return u[n]-u[t]}),o=0,c=0,l=[],s=[];for(t=0;r>t;++t)e=a[t],c>o?(o+=i[e],l.push(e)):(c+=i[e],s.push(e));return s.reverse().concat(l)},reverse:function(n){return ta.range(n.length).reverse()},"default":cu}),mc=ta.map({silhouette:function(n){var t,e,r,u=n.length,i=n[0].length,a=[],o=0,c=[];for(e=0;i>e;++e){for(t=0,r=0;u>t;t++)r+=n[t][e][1];r>o&&(o=r),a.push(r)}for(e=0;i>e;++e)c[e]=(o-a[e])/2;return c},wiggle:function(n){var t,e,r,u,i,a,o,c,l,s=n.length,f=n[0],h=f.length,g=[];for(g[0]=c=l=0,e=1;h>e;++e){for(t=0,u=0;s>t;++t)u+=n[t][e][1];for(t=0,i=0,o=f[e][0]-f[e-1][0];s>t;++t){for(r=0,a=(n[t][e][1]-n[t][e-1][1])/(2*o);t>r;++r)a+=(n[r][e][1]-n[r][e-1][1])/o;i+=a*n[t][e][1]}g[e]=c-=u?i/u*o:0,l>c&&(l=c)}for(e=0;h>e;++e)g[e]-=l;return g},expand:function(n){var t,e,r,u=n.length,i=n[0].length,a=1/u,o=[];for(e=0;i>e;++e){for(t=0,r=0;u>t;t++)r+=n[t][e][1];if(r)for(t=0;u>t;t++)n[t][e][1]/=r;else for(t=0;u>t;t++)n[t][e][1]=a}for(e=0;i>e;++e)o[e]=0;return o},zero:lu});ta.layout.histogram=function(){function n(n,i){for(var a,o,c=[],l=n.map(e,this),s=r.call(this,l,i),f=u.call(this,s,l,i),i=-1,h=l.length,g=f.length-1,p=t?1:1/h;++i<g;)a=c[i]=[],a.dx=f[i+1]-(a.x=f[i]),a.y=0;if(g>0)for(i=-1;++i<h;)o=l[i],o>=s[0]&&o<=s[1]&&(a=c[ta.bisect(f,o,1,g)-1],a.y+=p,a.push(n[i]));return c}var t=!0,e=Number,r=vu,u=gu;return n.value=function(t){return arguments.length?(e=t,n):e},n.range=function(t){return arguments.length?(r=En(t),n):r},n.bins=function(t){return arguments.length?(u="number"==typeof t?function(n){return pu(n,t)}:En(t),n):u},n.frequency=function(e){return arguments.length?(t=!!e,n):t},n},ta.layout.pack=function(){function n(n,i){var a=e.call(this,n,i),o=a[0],c=u[0],l=u[1],s=null==t?Math.sqrt:"function"==typeof t?t:function(){return t};if(o.x=o.y=0,nu(o,function(n){n.r=+s(n.value)}),nu(o,xu),r){var f=r*(t?1:Math.max(2*o.r/c,2*o.r/l))/2;nu(o,function(n){n.r+=f}),nu(o,xu),nu(o,function(n){n.r-=f})}return wu(o,c/2,l/2,t?1:1/Math.max(2*o.r/c,2*o.r/l)),a}var t,e=ta.layout.hierarchy().sort(du),r=0,u=[1,1];return n.size=function(t){return arguments.length?(u=t,n):u},n.radius=function(e){return arguments.length?(t=null==e||"function"==typeof e?e:+e,n):t},n.padding=function(t){return arguments.length?(r=+t,n):r},Kr(n,e)},ta.layout.tree=function(){function n(n,u){var s=a.call(this,n,u),f=s[0],h=t(f);if(nu(h,e),h.parent.m=-h.z,Qr(h,r),l)Qr(f,i);else{var g=f,p=f,v=f;Qr(f,function(n){n.x<g.x&&(g=n),n.x>p.x&&(p=n),n.depth>v.depth&&(v=n)});var d=o(g,p)/2-g.x,m=c[0]/(p.x+o(p,g)/2+d),y=c[1]/(v.depth||1);Qr(f,function(n){n.x=(n.x+d)*m,n.y=n.depth*y})}return s}function t(n){for(var t,e={A:null,children:[n]},r=[e];null!=(t=r.pop());)for(var u,i=t.children,a=0,o=i.length;o>a;++a)r.push((i[a]=u={_:i[a],parent:t,children:(u=i[a].children)&&u.slice()||[],A:null,a:null,z:0,m:0,c:0,s:0,t:null,i:a}).a=u);return e.children[0]}function e(n){var t=n.children,e=n.parent.children,r=n.i?e[n.i-1]:null;if(t.length){Cu(n);var i=(t[0].z+t[t.length-1].z)/2;r?(n.z=r.z+o(n._,r._),n.m=n.z-i):n.z=i}else r&&(n.z=r.z+o(n._,r._));n.parent.A=u(n,r,n.parent.A||e[0])}function r(n){n._.x=n.z+n.parent.m,n.m+=n.parent.m}function u(n,t,e){if(t){for(var r,u=n,i=n,a=t,c=u.parent.children[0],l=u.m,s=i.m,f=a.m,h=c.m;a=Eu(a),u=Nu(u),a&&u;)c=Nu(c),i=Eu(i),i.a=n,r=a.z+f-u.z-l+o(a._,u._),r>0&&(Au(zu(a,n,e),n,r),l+=r,s+=r),f+=a.m,l+=u.m,h+=c.m,s+=i.m;a&&!Eu(i)&&(i.t=a,i.m+=f-s),u&&!Nu(c)&&(c.t=u,c.m+=l-h,e=n)}return e}function i(n){n.x*=c[0],n.y=n.depth*c[1]}var a=ta.layout.hierarchy().sort(null).value(null),o=ku,c=[1,1],l=null;return n.separation=function(t){return arguments.length?(o=t,n):o},n.size=function(t){return arguments.length?(l=null==(c=t)?i:null,n):l?null:c},n.nodeSize=function(t){return arguments.length?(l=null==(c=t)?null:i,n):l?c:null},Kr(n,a)},ta.layout.cluster=function(){function n(n,i){var a,o=t.call(this,n,i),c=o[0],l=0;nu(c,function(n){var t=n.children;t&&t.length?(n.x=Lu(t),n.y=qu(t)):(n.x=a?l+=e(n,a):0,n.y=0,a=n)});var s=Tu(c),f=Ru(c),h=s.x-e(s,f)/2,g=f.x+e(f,s)/2;return nu(c,u?function(n){n.x=(n.x-c.x)*r[0],n.y=(c.y-n.y)*r[1]}:function(n){n.x=(n.x-h)/(g-h)*r[0],n.y=(1-(c.y?n.y/c.y:1))*r[1]}),o}var t=ta.layout.hierarchy().sort(null).value(null),e=ku,r=[1,1],u=!1;return n.separation=function(t){return arguments.length?(e=t,n):e},n.size=function(t){return arguments.length?(u=null==(r=t),n):u?null:r},n.nodeSize=function(t){return arguments.length?(u=null!=(r=t),n):u?r:null},Kr(n,t)},ta.layout.treemap=function(){function n(n,t){for(var e,r,u=-1,i=n.length;++u<i;)r=(e=n[u]).value*(0>t?0:t),e.area=isNaN(r)||0>=r?0:r}function t(e){var i=e.children;if(i&&i.length){var a,o,c,l=f(e),s=[],h=i.slice(),p=1/0,v="slice"===g?l.dx:"dice"===g?l.dy:"slice-dice"===g?1&e.depth?l.dy:l.dx:Math.min(l.dx,l.dy);for(n(h,l.dx*l.dy/e.value),s.area=0;(c=h.length)>0;)s.push(a=h[c-1]),s.area+=a.area,"squarify"!==g||(o=r(s,v))<=p?(h.pop(),p=o):(s.area-=s.pop().area,u(s,v,l,!1),v=Math.min(l.dx,l.dy),s.length=s.area=0,p=1/0);s.length&&(u(s,v,l,!0),s.length=s.area=0),i.forEach(t)}}function e(t){var r=t.children;if(r&&r.length){var i,a=f(t),o=r.slice(),c=[];for(n(o,a.dx*a.dy/t.value),c.area=0;i=o.pop();)c.push(i),c.area+=i.area,null!=i.z&&(u(c,i.z?a.dx:a.dy,a,!o.length),c.length=c.area=0);r.forEach(e)}}function r(n,t){for(var e,r=n.area,u=0,i=1/0,a=-1,o=n.length;++a<o;)(e=n[a].area)&&(i>e&&(i=e),e>u&&(u=e));return r*=r,t*=t,r?Math.max(t*u*p/r,r/(t*i*p)):1/0}function u(n,t,e,r){var u,i=-1,a=n.length,o=e.x,l=e.y,s=t?c(n.area/t):0;if(t==e.dx){for((r||s>e.dy)&&(s=e.dy);++i<a;)u=n[i],u.x=o,u.y=l,u.dy=s,o+=u.dx=Math.min(e.x+e.dx-o,s?c(u.area/s):0);u.z=!0,u.dx+=e.x+e.dx-o,e.y+=s,e.dy-=s}else{for((r||s>e.dx)&&(s=e.dx);++i<a;)u=n[i],u.x=o,u.y=l,u.dx=s,l+=u.dy=Math.min(e.y+e.dy-l,s?c(u.area/s):0);u.z=!1,u.dy+=e.y+e.dy-l,e.x+=s,e.dx-=s}}function i(r){var u=a||o(r),i=u[0];return i.x=0,i.y=0,i.dx=l[0],i.dy=l[1],a&&o.revalue(i),
n([i],i.dx*i.dy/i.value),(a?e:t)(i),h&&(a=u),u}var a,o=ta.layout.hierarchy(),c=Math.round,l=[1,1],s=null,f=Du,h=!1,g="squarify",p=.5*(1+Math.sqrt(5));return i.size=function(n){return arguments.length?(l=n,i):l},i.padding=function(n){function t(t){var e=n.call(i,t,t.depth);return null==e?Du(t):Pu(t,"number"==typeof e?[e,e,e,e]:e)}function e(t){return Pu(t,n)}if(!arguments.length)return s;var r;return f=null==(s=n)?Du:"function"==(r=typeof n)?t:"number"===r?(n=[n,n,n,n],e):e,i},i.round=function(n){return arguments.length?(c=n?Math.round:Number,i):c!=Number},i.sticky=function(n){return arguments.length?(h=n,a=null,i):h},i.ratio=function(n){return arguments.length?(p=n,i):p},i.mode=function(n){return arguments.length?(g=n+"",i):g},Kr(i,o)},ta.random={normal:function(n,t){var e=arguments.length;return 2>e&&(t=1),1>e&&(n=0),function(){var e,r,u;do e=2*Math.random()-1,r=2*Math.random()-1,u=e*e+r*r;while(!u||u>1);return n+t*e*Math.sqrt(-2*Math.log(u)/u)}},logNormal:function(){var n=ta.random.normal.apply(ta,arguments);return function(){return Math.exp(n())}},bates:function(n){var t=ta.random.irwinHall(n);return function(){return t()/n}},irwinHall:function(n){return function(){for(var t=0,e=0;n>e;e++)t+=Math.random();return t}}},ta.scale={};var yc={floor:y,ceil:y};ta.scale.linear=function(){return Yu([0,1],[0,1],yr,!1)};var Mc={s:1,g:1,p:1,r:1,e:1};ta.scale.log=function(){return Gu(ta.scale.linear().domain([0,1]),10,!0,[1,10])};var xc=ta.format(".0e"),bc={floor:function(n){return-Math.ceil(-n)},ceil:function(n){return-Math.floor(-n)}};ta.scale.pow=function(){return Ku(ta.scale.linear(),1,[0,1])},ta.scale.sqrt=function(){return ta.scale.pow().exponent(.5)},ta.scale.ordinal=function(){return ni([],{t:"range",a:[[]]})},ta.scale.category10=function(){return ta.scale.ordinal().range(_c)},ta.scale.category20=function(){return ta.scale.ordinal().range(wc)},ta.scale.category20b=function(){return ta.scale.ordinal().range(Sc)},ta.scale.category20c=function(){return ta.scale.ordinal().range(kc)};var _c=[2062260,16744206,2924588,14034728,9725885,9197131,14907330,8355711,12369186,1556175].map(xn),wc=[2062260,11454440,16744206,16759672,2924588,10018698,14034728,16750742,9725885,12955861,9197131,12885140,14907330,16234194,8355711,13092807,12369186,14408589,1556175,10410725].map(xn),Sc=[3750777,5395619,7040719,10264286,6519097,9216594,11915115,13556636,9202993,12426809,15186514,15190932,8666169,11356490,14049643,15177372,8077683,10834324,13528509,14589654].map(xn),kc=[3244733,7057110,10406625,13032431,15095053,16616764,16625259,16634018,3253076,7652470,10607003,13101504,7695281,10394312,12369372,14342891,6513507,9868950,12434877,14277081].map(xn);ta.scale.quantile=function(){return ti([],[])},ta.scale.quantize=function(){return ei(0,1,[0,1])},ta.scale.threshold=function(){return ri([.5],[0,1])},ta.scale.identity=function(){return ui([0,1])},ta.svg={},ta.svg.arc=function(){function n(){var n=Math.max(0,+e.apply(this,arguments)),l=Math.max(0,+r.apply(this,arguments)),s=a.apply(this,arguments)-Ra,f=o.apply(this,arguments)-Ra,h=Math.abs(f-s),g=s>f?0:1;if(n>l&&(p=l,l=n,n=p),h>=Ta)return t(l,g)+(n?t(n,1-g):"")+"Z";var p,v,d,m,y,M,x,b,_,w,S,k,N=0,E=0,A=[];if((m=(+c.apply(this,arguments)||0)/2)&&(d=i===Nc?Math.sqrt(n*n+l*l):+i.apply(this,arguments),g||(E*=-1),l&&(E=tn(d/l*Math.sin(m))),n&&(N=tn(d/n*Math.sin(m)))),l){y=l*Math.cos(s+E),M=l*Math.sin(s+E),x=l*Math.cos(f-E),b=l*Math.sin(f-E);var C=Math.abs(f-s-2*E)<=qa?0:1;if(E&&fi(y,M,x,b)===g^C){var z=(s+f)/2;y=l*Math.cos(z),M=l*Math.sin(z),x=b=null}}else y=M=0;if(n){_=n*Math.cos(f-N),w=n*Math.sin(f-N),S=n*Math.cos(s+N),k=n*Math.sin(s+N);var q=Math.abs(s-f+2*N)<=qa?0:1;if(N&&fi(_,w,S,k)===1-g^q){var L=(s+f)/2;_=n*Math.cos(L),w=n*Math.sin(L),S=k=null}}else _=w=0;if((p=Math.min(Math.abs(l-n)/2,+u.apply(this,arguments)))>.001){v=l>n^g?0:1;var T=null==S?[_,w]:null==x?[y,M]:Te([y,M],[S,k],[x,b],[_,w]),R=y-T[0],D=M-T[1],P=x-T[0],U=b-T[1],j=1/Math.sin(Math.acos((R*P+D*U)/(Math.sqrt(R*R+D*D)*Math.sqrt(P*P+U*U)))/2),F=Math.sqrt(T[0]*T[0]+T[1]*T[1]);if(null!=x){var H=Math.min(p,(l-F)/(j+1)),O=hi(null==S?[_,w]:[S,k],[y,M],l,H,g),I=hi([x,b],[_,w],l,H,g);p===H?A.push("M",O[0],"A",H,",",H," 0 0,",v," ",O[1],"A",l,",",l," 0 ",1-g^fi(O[1][0],O[1][1],I[1][0],I[1][1]),",",g," ",I[1],"A",H,",",H," 0 0,",v," ",I[0]):A.push("M",O[0],"A",H,",",H," 0 1,",v," ",I[0])}else A.push("M",y,",",M);if(null!=S){var Y=Math.min(p,(n-F)/(j-1)),Z=hi([y,M],[S,k],n,-Y,g),V=hi([_,w],null==x?[y,M]:[x,b],n,-Y,g);p===Y?A.push("L",V[0],"A",Y,",",Y," 0 0,",v," ",V[1],"A",n,",",n," 0 ",g^fi(V[1][0],V[1][1],Z[1][0],Z[1][1]),",",1-g," ",Z[1],"A",Y,",",Y," 0 0,",v," ",Z[0]):A.push("L",V[0],"A",Y,",",Y," 0 0,",v," ",Z[0])}else A.push("L",_,",",w)}else A.push("M",y,",",M),null!=x&&A.push("A",l,",",l," 0 ",C,",",g," ",x,",",b),A.push("L",_,",",w),null!=S&&A.push("A",n,",",n," 0 ",q,",",1-g," ",S,",",k);return A.push("Z"),A.join("")}function t(n,t){return"M0,"+n+"A"+n+","+n+" 0 1,"+t+" 0,"+-n+"A"+n+","+n+" 0 1,"+t+" 0,"+n}var e=ai,r=oi,u=ii,i=Nc,a=ci,o=li,c=si;return n.innerRadius=function(t){return arguments.length?(e=En(t),n):e},n.outerRadius=function(t){return arguments.length?(r=En(t),n):r},n.cornerRadius=function(t){return arguments.length?(u=En(t),n):u},n.padRadius=function(t){return arguments.length?(i=t==Nc?Nc:En(t),n):i},n.startAngle=function(t){return arguments.length?(a=En(t),n):a},n.endAngle=function(t){return arguments.length?(o=En(t),n):o},n.padAngle=function(t){return arguments.length?(c=En(t),n):c},n.centroid=function(){var n=(+e.apply(this,arguments)+ +r.apply(this,arguments))/2,t=(+a.apply(this,arguments)+ +o.apply(this,arguments))/2-Ra;return[Math.cos(t)*n,Math.sin(t)*n]},n};var Nc="auto";ta.svg.line=function(){return gi(y)};var Ec=ta.map({linear:pi,"linear-closed":vi,step:di,"step-before":mi,"step-after":yi,basis:Si,"basis-open":ki,"basis-closed":Ni,bundle:Ei,cardinal:bi,"cardinal-open":Mi,"cardinal-closed":xi,monotone:Ti});Ec.forEach(function(n,t){t.key=n,t.closed=/-closed$/.test(n)});var Ac=[0,2/3,1/3,0],Cc=[0,1/3,2/3,0],zc=[0,1/6,2/3,1/6];ta.svg.line.radial=function(){var n=gi(Ri);return n.radius=n.x,delete n.x,n.angle=n.y,delete n.y,n},mi.reverse=yi,yi.reverse=mi,ta.svg.area=function(){return Di(y)},ta.svg.area.radial=function(){var n=Di(Ri);return n.radius=n.x,delete n.x,n.innerRadius=n.x0,delete n.x0,n.outerRadius=n.x1,delete n.x1,n.angle=n.y,delete n.y,n.startAngle=n.y0,delete n.y0,n.endAngle=n.y1,delete n.y1,n},ta.svg.chord=function(){function n(n,o){var c=t(this,i,n,o),l=t(this,a,n,o);return"M"+c.p0+r(c.r,c.p1,c.a1-c.a0)+(e(c,l)?u(c.r,c.p1,c.r,c.p0):u(c.r,c.p1,l.r,l.p0)+r(l.r,l.p1,l.a1-l.a0)+u(l.r,l.p1,c.r,c.p0))+"Z"}function t(n,t,e,r){var u=t.call(n,e,r),i=o.call(n,u,r),a=c.call(n,u,r)-Ra,s=l.call(n,u,r)-Ra;return{r:i,a0:a,a1:s,p0:[i*Math.cos(a),i*Math.sin(a)],p1:[i*Math.cos(s),i*Math.sin(s)]}}function e(n,t){return n.a0==t.a0&&n.a1==t.a1}function r(n,t,e){return"A"+n+","+n+" 0 "+ +(e>qa)+",1 "+t}function u(n,t,e,r){return"Q 0,0 "+r}var i=ye,a=Me,o=Pi,c=ci,l=li;return n.radius=function(t){return arguments.length?(o=En(t),n):o},n.source=function(t){return arguments.length?(i=En(t),n):i},n.target=function(t){return arguments.length?(a=En(t),n):a},n.startAngle=function(t){return arguments.length?(c=En(t),n):c},n.endAngle=function(t){return arguments.length?(l=En(t),n):l},n},ta.svg.diagonal=function(){function n(n,u){var i=t.call(this,n,u),a=e.call(this,n,u),o=(i.y+a.y)/2,c=[i,{x:i.x,y:o},{x:a.x,y:o},a];return c=c.map(r),"M"+c[0]+"C"+c[1]+" "+c[2]+" "+c[3]}var t=ye,e=Me,r=Ui;return n.source=function(e){return arguments.length?(t=En(e),n):t},n.target=function(t){return arguments.length?(e=En(t),n):e},n.projection=function(t){return arguments.length?(r=t,n):r},n},ta.svg.diagonal.radial=function(){var n=ta.svg.diagonal(),t=Ui,e=n.projection;return n.projection=function(n){return arguments.length?e(ji(t=n)):t},n},ta.svg.symbol=function(){function n(n,r){return(qc.get(t.call(this,n,r))||Oi)(e.call(this,n,r))}var t=Hi,e=Fi;return n.type=function(e){return arguments.length?(t=En(e),n):t},n.size=function(t){return arguments.length?(e=En(t),n):e},n};var qc=ta.map({circle:Oi,cross:function(n){var t=Math.sqrt(n/5)/2;return"M"+-3*t+","+-t+"H"+-t+"V"+-3*t+"H"+t+"V"+-t+"H"+3*t+"V"+t+"H"+t+"V"+3*t+"H"+-t+"V"+t+"H"+-3*t+"Z"},diamond:function(n){var t=Math.sqrt(n/(2*Tc)),e=t*Tc;return"M0,"+-t+"L"+e+",0 0,"+t+" "+-e+",0Z"},square:function(n){var t=Math.sqrt(n)/2;return"M"+-t+","+-t+"L"+t+","+-t+" "+t+","+t+" "+-t+","+t+"Z"},"triangle-down":function(n){var t=Math.sqrt(n/Lc),e=t*Lc/2;return"M0,"+e+"L"+t+","+-e+" "+-t+","+-e+"Z"},"triangle-up":function(n){var t=Math.sqrt(n/Lc),e=t*Lc/2;return"M0,"+-e+"L"+t+","+e+" "+-t+","+e+"Z"}});ta.svg.symbolTypes=qc.keys();var Lc=Math.sqrt(3),Tc=Math.tan(30*Da);_a.transition=function(n){for(var t,e,r=Rc||++jc,u=Xi(n),i=[],a=Dc||{time:Date.now(),ease:kr,delay:0,duration:250},o=-1,c=this.length;++o<c;){i.push(t=[]);for(var l=this[o],s=-1,f=l.length;++s<f;)(e=l[s])&&$i(e,s,u,r,a),t.push(e)}return Yi(i,u,r)},_a.interrupt=function(n){return this.each(null==n?Pc:Ii(Xi(n)))};var Rc,Dc,Pc=Ii(Xi()),Uc=[],jc=0;Uc.call=_a.call,Uc.empty=_a.empty,Uc.node=_a.node,Uc.size=_a.size,ta.transition=function(n,t){return n&&n.transition?Rc?n.transition(t):n:ta.selection().transition(n)},ta.transition.prototype=Uc,Uc.select=function(n){var t,e,r,u=this.id,i=this.namespace,a=[];n=A(n);for(var o=-1,c=this.length;++o<c;){a.push(t=[]);for(var l=this[o],s=-1,f=l.length;++s<f;)(r=l[s])&&(e=n.call(r,r.__data__,s,o))?("__data__"in r&&(e.__data__=r.__data__),$i(e,s,i,u,r[i][u]),t.push(e)):t.push(null)}return Yi(a,i,u)},Uc.selectAll=function(n){var t,e,r,u,i,a=this.id,o=this.namespace,c=[];n=C(n);for(var l=-1,s=this.length;++l<s;)for(var f=this[l],h=-1,g=f.length;++h<g;)if(r=f[h]){i=r[o][a],e=n.call(r,r.__data__,h,l),c.push(t=[]);for(var p=-1,v=e.length;++p<v;)(u=e[p])&&$i(u,p,o,a,i),t.push(u)}return Yi(c,o,a)},Uc.filter=function(n){var t,e,r,u=[];"function"!=typeof n&&(n=O(n));for(var i=0,a=this.length;a>i;i++){u.push(t=[]);for(var e=this[i],o=0,c=e.length;c>o;o++)(r=e[o])&&n.call(r,r.__data__,o,i)&&t.push(r)}return Yi(u,this.namespace,this.id)},Uc.tween=function(n,t){var e=this.id,r=this.namespace;return arguments.length<2?this.node()[r][e].tween.get(n):Y(this,null==t?function(t){t[r][e].tween.remove(n)}:function(u){u[r][e].tween.set(n,t)})},Uc.attr=function(n,t){function e(){this.removeAttribute(o)}function r(){this.removeAttributeNS(o.space,o.local)}function u(n){return null==n?e:(n+="",function(){var t,e=this.getAttribute(o);return e!==n&&(t=a(e,n),function(n){this.setAttribute(o,t(n))})})}function i(n){return null==n?r:(n+="",function(){var t,e=this.getAttributeNS(o.space,o.local);return e!==n&&(t=a(e,n),function(n){this.setAttributeNS(o.space,o.local,t(n))})})}if(arguments.length<2){for(t in n)this.attr(t,n[t]);return this}var a="transform"==n?Or:yr,o=ta.ns.qualify(n);return Zi(this,"attr."+n,t,o.local?i:u)},Uc.attrTween=function(n,t){function e(n,e){var r=t.call(this,n,e,this.getAttribute(u));return r&&function(n){this.setAttribute(u,r(n))}}function r(n,e){var r=t.call(this,n,e,this.getAttributeNS(u.space,u.local));return r&&function(n){this.setAttributeNS(u.space,u.local,r(n))}}var u=ta.ns.qualify(n);return this.tween("attr."+n,u.local?r:e)},Uc.style=function(n,e,r){function u(){this.style.removeProperty(n)}function i(e){return null==e?u:(e+="",function(){var u,i=t(this).getComputedStyle(this,null).getPropertyValue(n);return i!==e&&(u=yr(i,e),function(t){this.style.setProperty(n,u(t),r)})})}var a=arguments.length;if(3>a){if("string"!=typeof n){2>a&&(e="");for(r in n)this.style(r,n[r],e);return this}r=""}return Zi(this,"style."+n,e,i)},Uc.styleTween=function(n,e,r){function u(u,i){var a=e.call(this,u,i,t(this).getComputedStyle(this,null).getPropertyValue(n));return a&&function(t){this.style.setProperty(n,a(t),r)}}return arguments.length<3&&(r=""),this.tween("style."+n,u)},Uc.text=function(n){return Zi(this,"text",n,Vi)},Uc.remove=function(){var n=this.namespace;return this.each("end.transition",function(){var t;this[n].count<2&&(t=this.parentNode)&&t.removeChild(this)})},Uc.ease=function(n){var t=this.id,e=this.namespace;return arguments.length<1?this.node()[e][t].ease:("function"!=typeof n&&(n=ta.ease.apply(ta,arguments)),Y(this,function(r){r[e][t].ease=n}))},Uc.delay=function(n){var t=this.id,e=this.namespace;return arguments.length<1?this.node()[e][t].delay:Y(this,"function"==typeof n?function(r,u,i){r[e][t].delay=+n.call(r,r.__data__,u,i)}:(n=+n,function(r){r[e][t].delay=n}))},Uc.duration=function(n){var t=this.id,e=this.namespace;return arguments.length<1?this.node()[e][t].duration:Y(this,"function"==typeof n?function(r,u,i){r[e][t].duration=Math.max(1,n.call(r,r.__data__,u,i))}:(n=Math.max(1,n),function(r){r[e][t].duration=n}))},Uc.each=function(n,t){var e=this.id,r=this.namespace;if(arguments.length<2){var u=Dc,i=Rc;try{Rc=e,Y(this,function(t,u,i){Dc=t[r][e],n.call(t,t.__data__,u,i)})}finally{Dc=u,Rc=i}}else Y(this,function(u){var i=u[r][e];(i.event||(i.event=ta.dispatch("start","end","interrupt"))).on(n,t)});return this},Uc.transition=function(){for(var n,t,e,r,u=this.id,i=++jc,a=this.namespace,o=[],c=0,l=this.length;l>c;c++){o.push(n=[]);for(var t=this[c],s=0,f=t.length;f>s;s++)(e=t[s])&&(r=e[a][u],$i(e,s,a,i,{time:r.time,ease:r.ease,delay:r.delay+r.duration,duration:r.duration})),n.push(e)}return Yi(o,a,i)},ta.svg.axis=function(){function n(n){n.each(function(){var n,l=ta.select(this),s=this.__chart__||e,f=this.__chart__=e.copy(),h=null==c?f.ticks?f.ticks.apply(f,o):f.domain():c,g=null==t?f.tickFormat?f.tickFormat.apply(f,o):y:t,p=l.selectAll(".tick").data(h,f),v=p.enter().insert("g",".domain").attr("class","tick").style("opacity",Ca),d=ta.transition(p.exit()).style("opacity",Ca).remove(),m=ta.transition(p.order()).style("opacity",1),M=Math.max(u,0)+a,x=ju(f),b=l.selectAll(".domain").data([0]),_=(b.enter().append("path").attr("class","domain"),ta.transition(b));v.append("line"),v.append("text");var w,S,k,N,E=v.select("line"),A=m.select("line"),C=p.select("text").text(g),z=v.select("text"),q=m.select("text"),L="top"===r||"left"===r?-1:1;if("bottom"===r||"top"===r?(n=Bi,w="x",k="y",S="x2",N="y2",C.attr("dy",0>L?"0em":".71em").style("text-anchor","middle"),_.attr("d","M"+x[0]+","+L*i+"V0H"+x[1]+"V"+L*i)):(n=Wi,w="y",k="x",S="y2",N="x2",C.attr("dy",".32em").style("text-anchor",0>L?"end":"start"),_.attr("d","M"+L*i+","+x[0]+"H0V"+x[1]+"H"+L*i)),E.attr(N,L*u),z.attr(k,L*M),A.attr(S,0).attr(N,L*u),q.attr(w,0).attr(k,L*M),f.rangeBand){var T=f,R=T.rangeBand()/2;s=f=function(n){return T(n)+R}}else s.rangeBand?s=f:d.call(n,f,s);v.call(n,s,f),m.call(n,f,f)})}var t,e=ta.scale.linear(),r=Fc,u=6,i=6,a=3,o=[10],c=null;return n.scale=function(t){return arguments.length?(e=t,n):e},n.orient=function(t){return arguments.length?(r=t in Hc?t+"":Fc,n):r},n.ticks=function(){return arguments.length?(o=arguments,n):o},n.tickValues=function(t){return arguments.length?(c=t,n):c},n.tickFormat=function(e){return arguments.length?(t=e,n):t},n.tickSize=function(t){var e=arguments.length;return e?(u=+t,i=+arguments[e-1],n):u},n.innerTickSize=function(t){return arguments.length?(u=+t,n):u},n.outerTickSize=function(t){return arguments.length?(i=+t,n):i},n.tickPadding=function(t){return arguments.length?(a=+t,n):a},n.tickSubdivide=function(){return arguments.length&&n},n};var Fc="bottom",Hc={top:1,right:1,bottom:1,left:1};ta.svg.brush=function(){function n(t){t.each(function(){var t=ta.select(this).style("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush",i).on("touchstart.brush",i),a=t.selectAll(".background").data([0]);a.enter().append("rect").attr("class","background").style("visibility","hidden").style("cursor","crosshair"),t.selectAll(".extent").data([0]).enter().append("rect").attr("class","extent").style("cursor","move");var o=t.selectAll(".resize").data(v,y);o.exit().remove(),o.enter().append("g").attr("class",function(n){return"resize "+n}).style("cursor",function(n){return Oc[n]}).append("rect").attr("x",function(n){return/[ew]$/.test(n)?-3:null}).attr("y",function(n){return/^[ns]/.test(n)?-3:null}).attr("width",6).attr("height",6).style("visibility","hidden"),o.style("display",n.empty()?"none":null);var c,f=ta.transition(t),h=ta.transition(a);l&&(c=ju(l),h.attr("x",c[0]).attr("width",c[1]-c[0]),r(f)),s&&(c=ju(s),h.attr("y",c[0]).attr("height",c[1]-c[0]),u(f)),e(f)})}function e(n){n.selectAll(".resize").attr("transform",function(n){return"translate("+f[+/e$/.test(n)]+","+h[+/^s/.test(n)]+")"})}function r(n){n.select(".extent").attr("x",f[0]),n.selectAll(".extent,.n>rect,.s>rect").attr("width",f[1]-f[0])}function u(n){n.select(".extent").attr("y",h[0]),n.selectAll(".extent,.e>rect,.w>rect").attr("height",h[1]-h[0])}function i(){function i(){32==ta.event.keyCode&&(C||(M=null,q[0]-=f[1],q[1]-=h[1],C=2),S())}function v(){32==ta.event.keyCode&&2==C&&(q[0]+=f[1],q[1]+=h[1],C=0,S())}function d(){var n=ta.mouse(b),t=!1;x&&(n[0]+=x[0],n[1]+=x[1]),C||(ta.event.altKey?(M||(M=[(f[0]+f[1])/2,(h[0]+h[1])/2]),q[0]=f[+(n[0]<M[0])],q[1]=h[+(n[1]<M[1])]):M=null),E&&m(n,l,0)&&(r(k),t=!0),A&&m(n,s,1)&&(u(k),t=!0),t&&(e(k),w({type:"brush",mode:C?"move":"resize"}))}function m(n,t,e){var r,u,i=ju(t),c=i[0],l=i[1],s=q[e],v=e?h:f,d=v[1]-v[0];return C&&(c-=s,l-=d+s),r=(e?p:g)?Math.max(c,Math.min(l,n[e])):n[e],C?u=(r+=s)+d:(M&&(s=Math.max(c,Math.min(l,2*M[e]-r))),r>s?(u=r,r=s):u=s),v[0]!=r||v[1]!=u?(e?o=null:a=null,v[0]=r,v[1]=u,!0):void 0}function y(){d(),k.style("pointer-events","all").selectAll(".resize").style("display",n.empty()?"none":null),ta.select("body").style("cursor",null),L.on("mousemove.brush",null).on("mouseup.brush",null).on("touchmove.brush",null).on("touchend.brush",null).on("keydown.brush",null).on("keyup.brush",null),z(),w({type:"brushend"})}var M,x,b=this,_=ta.select(ta.event.target),w=c.of(b,arguments),k=ta.select(b),N=_.datum(),E=!/^(n|s)$/.test(N)&&l,A=!/^(e|w)$/.test(N)&&s,C=_.classed("extent"),z=W(b),q=ta.mouse(b),L=ta.select(t(b)).on("keydown.brush",i).on("keyup.brush",v);if(ta.event.changedTouches?L.on("touchmove.brush",d).on("touchend.brush",y):L.on("mousemove.brush",d).on("mouseup.brush",y),k.interrupt().selectAll("*").interrupt(),C)q[0]=f[0]-q[0],q[1]=h[0]-q[1];else if(N){var T=+/w$/.test(N),R=+/^n/.test(N);x=[f[1-T]-q[0],h[1-R]-q[1]],q[0]=f[T],q[1]=h[R]}else ta.event.altKey&&(M=q.slice());k.style("pointer-events","none").selectAll(".resize").style("display",null),ta.select("body").style("cursor",_.style("cursor")),w({type:"brushstart"}),d()}var a,o,c=N(n,"brushstart","brush","brushend"),l=null,s=null,f=[0,0],h=[0,0],g=!0,p=!0,v=Ic[0];return n.event=function(n){n.each(function(){var n=c.of(this,arguments),t={x:f,y:h,i:a,j:o},e=this.__chart__||t;this.__chart__=t,Rc?ta.select(this).transition().each("start.brush",function(){a=e.i,o=e.j,f=e.x,h=e.y,n({type:"brushstart"})}).tween("brush:brush",function(){var e=Mr(f,t.x),r=Mr(h,t.y);return a=o=null,function(u){f=t.x=e(u),h=t.y=r(u),n({type:"brush",mode:"resize"})}}).each("end.brush",function(){a=t.i,o=t.j,n({type:"brush",mode:"resize"}),n({type:"brushend"})}):(n({type:"brushstart"}),n({type:"brush",mode:"resize"}),n({type:"brushend"}))})},n.x=function(t){return arguments.length?(l=t,v=Ic[!l<<1|!s],n):l},n.y=function(t){return arguments.length?(s=t,v=Ic[!l<<1|!s],n):s},n.clamp=function(t){return arguments.length?(l&&s?(g=!!t[0],p=!!t[1]):l?g=!!t:s&&(p=!!t),n):l&&s?[g,p]:l?g:s?p:null},n.extent=function(t){var e,r,u,i,c;return arguments.length?(l&&(e=t[0],r=t[1],s&&(e=e[0],r=r[0]),a=[e,r],l.invert&&(e=l(e),r=l(r)),e>r&&(c=e,e=r,r=c),(e!=f[0]||r!=f[1])&&(f=[e,r])),s&&(u=t[0],i=t[1],l&&(u=u[1],i=i[1]),o=[u,i],s.invert&&(u=s(u),i=s(i)),u>i&&(c=u,u=i,i=c),(u!=h[0]||i!=h[1])&&(h=[u,i])),n):(l&&(a?(e=a[0],r=a[1]):(e=f[0],r=f[1],l.invert&&(e=l.invert(e),r=l.invert(r)),e>r&&(c=e,e=r,r=c))),s&&(o?(u=o[0],i=o[1]):(u=h[0],i=h[1],s.invert&&(u=s.invert(u),i=s.invert(i)),u>i&&(c=u,u=i,i=c))),l&&s?[[e,u],[r,i]]:l?[e,r]:s&&[u,i])},n.clear=function(){return n.empty()||(f=[0,0],h=[0,0],a=o=null),n},n.empty=function(){return!!l&&f[0]==f[1]||!!s&&h[0]==h[1]},ta.rebind(n,c,"on")};var Oc={n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Ic=[["n","e","s","w","nw","ne","se","sw"],["e","w"],["n","s"],[]],Yc=oo.format=go.timeFormat,Zc=Yc.utc,Vc=Zc("%Y-%m-%dT%H:%M:%S.%LZ");Yc.iso=Date.prototype.toISOString&&+new Date("2000-01-01T00:00:00.000Z")?Ji:Vc,Ji.parse=function(n){var t=new Date(n);return isNaN(t)?null:t},Ji.toString=Vc.toString,oo.second=Hn(function(n){return new co(1e3*Math.floor(n/1e3))},function(n,t){n.setTime(n.getTime()+1e3*Math.floor(t))},function(n){return n.getSeconds()}),oo.seconds=oo.second.range,oo.seconds.utc=oo.second.utc.range,oo.minute=Hn(function(n){return new co(6e4*Math.floor(n/6e4))},function(n,t){n.setTime(n.getTime()+6e4*Math.floor(t))},function(n){return n.getMinutes()}),oo.minutes=oo.minute.range,oo.minutes.utc=oo.minute.utc.range,oo.hour=Hn(function(n){var t=n.getTimezoneOffset()/60;return new co(36e5*(Math.floor(n/36e5-t)+t))},function(n,t){n.setTime(n.getTime()+36e5*Math.floor(t))},function(n){return n.getHours()}),oo.hours=oo.hour.range,oo.hours.utc=oo.hour.utc.range,oo.month=Hn(function(n){return n=oo.day(n),n.setDate(1),n},function(n,t){n.setMonth(n.getMonth()+t)},function(n){return n.getMonth()}),oo.months=oo.month.range,oo.months.utc=oo.month.utc.range;var Xc=[1e3,5e3,15e3,3e4,6e4,3e5,9e5,18e5,36e5,108e5,216e5,432e5,864e5,1728e5,6048e5,2592e6,7776e6,31536e6],$c=[[oo.second,1],[oo.second,5],[oo.second,15],[oo.second,30],[oo.minute,1],[oo.minute,5],[oo.minute,15],[oo.minute,30],[oo.hour,1],[oo.hour,3],[oo.hour,6],[oo.hour,12],[oo.day,1],[oo.day,2],[oo.week,1],[oo.month,1],[oo.month,3],[oo.year,1]],Bc=Yc.multi([[".%L",function(n){return n.getMilliseconds()}],[":%S",function(n){return n.getSeconds()}],["%I:%M",function(n){return n.getMinutes()}],["%I %p",function(n){return n.getHours()}],["%a %d",function(n){return n.getDay()&&1!=n.getDate()}],["%b %d",function(n){return 1!=n.getDate()}],["%B",function(n){return n.getMonth()}],["%Y",Ct]]),Wc={range:function(n,t,e){return ta.range(Math.ceil(n/e)*e,+t,e).map(Ki)},floor:y,ceil:y};$c.year=oo.year,oo.scale=function(){return Gi(ta.scale.linear(),$c,Bc)};var Jc=$c.map(function(n){return[n[0].utc,n[1]]}),Gc=Zc.multi([[".%L",function(n){return n.getUTCMilliseconds()}],[":%S",function(n){return n.getUTCSeconds()}],["%I:%M",function(n){return n.getUTCMinutes()}],["%I %p",function(n){return n.getUTCHours()}],["%a %d",function(n){return n.getUTCDay()&&1!=n.getUTCDate()}],["%b %d",function(n){return 1!=n.getUTCDate()}],["%B",function(n){return n.getUTCMonth()}],["%Y",Ct]]);Jc.year=oo.year.utc,oo.scale.utc=function(){return Gi(ta.scale.linear(),Jc,Gc)},ta.text=An(function(n){return n.responseText}),ta.json=function(n,t){return Cn(n,"application/json",Qi,t)},ta.html=function(n,t){return Cn(n,"text/html",na,t)},ta.xml=An(function(n){return n.responseXML}),"function"==typeof define&&define.amd?define(ta):"object"==typeof module&&module.exports&&(module.exports=ta),this.d3=ta}();

},{}],2:[function(require,module,exports){

},{}],3:[function(require,module,exports){

},{}],4:[function(require,module,exports){
(function (global){
function kMaxLength(){return Buffer.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function Buffer(t){return this instanceof Buffer?(this.length=0,this.parent=void 0,"number"==typeof t?fromNumber(this,t):"string"==typeof t?fromString(this,t,arguments.length>1?arguments[1]:"utf8"):fromObject(this,t)):arguments.length>1?new Buffer(t,arguments[1]):new Buffer(t)}function fromNumber(t,e){if(t=allocate(t,0>e?0:0|checked(e)),!Buffer.TYPED_ARRAY_SUPPORT)for(var r=0;e>r;r++)t[r]=0;return t}function fromString(t,e,r){("string"!=typeof r||""===r)&&(r="utf8");var n=0|byteLength(e,r);return t=allocate(t,n),t.write(e,r),t}function fromObject(t,e){if(Buffer.isBuffer(e))return fromBuffer(t,e);if(isArray(e))return fromArray(t,e);if(null==e)throw new TypeError("must start with number, buffer, array or string");if("undefined"!=typeof ArrayBuffer){if(e.buffer instanceof ArrayBuffer)return fromTypedArray(t,e);if(e instanceof ArrayBuffer)return fromArrayBuffer(t,e)}return e.length?fromArrayLike(t,e):fromJsonObject(t,e)}function fromBuffer(t,e){var r=0|checked(e.length);return t=allocate(t,r),e.copy(t,0,0,r),t}function fromArray(t,e){var r=0|checked(e.length);t=allocate(t,r);for(var n=0;r>n;n+=1)t[n]=255&e[n];return t}function fromTypedArray(t,e){var r=0|checked(e.length);t=allocate(t,r);for(var n=0;r>n;n+=1)t[n]=255&e[n];return t}function fromArrayBuffer(t,e){return Buffer.TYPED_ARRAY_SUPPORT?(e.byteLength,t=Buffer._augment(new Uint8Array(e))):t=fromTypedArray(t,new Uint8Array(e)),t}function fromArrayLike(t,e){var r=0|checked(e.length);t=allocate(t,r);for(var n=0;r>n;n+=1)t[n]=255&e[n];return t}function fromJsonObject(t,e){var r,n=0;"Buffer"===e.type&&isArray(e.data)&&(r=e.data,n=0|checked(r.length)),t=allocate(t,n);for(var i=0;n>i;i+=1)t[i]=255&r[i];return t}function allocate(t,e){Buffer.TYPED_ARRAY_SUPPORT?(t=Buffer._augment(new Uint8Array(e)),t.__proto__=Buffer.prototype):(t.length=e,t._isBuffer=!0);var r=0!==e&&e<=Buffer.poolSize>>>1;return r&&(t.parent=rootParent),t}function checked(t){if(t>=kMaxLength())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+kMaxLength().toString(16)+" bytes");return 0|t}function SlowBuffer(t,e){if(!(this instanceof SlowBuffer))return new SlowBuffer(t,e);var r=new Buffer(t,e);return delete r.parent,r}function byteLength(t,e){"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var n=!1;;)switch(e){case"ascii":case"binary":case"raw":case"raws":return r;case"utf8":case"utf-8":return utf8ToBytes(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return base64ToBytes(t).length;default:if(n)return utf8ToBytes(t).length;e=(""+e).toLowerCase(),n=!0}}function slowToString(t,e,r){var n=!1;if(e=0|e,r=void 0===r||r===1/0?this.length:0|r,t||(t="utf8"),0>e&&(e=0),r>this.length&&(r=this.length),e>=r)return"";for(;;)switch(t){case"hex":return hexSlice(this,e,r);case"utf8":case"utf-8":return utf8Slice(this,e,r);case"ascii":return asciiSlice(this,e,r);case"binary":return binarySlice(this,e,r);case"base64":return base64Slice(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return utf16leSlice(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function hexWrite(t,e,r,n){r=Number(r)||0;var i=t.length-r;n?(n=Number(n),n>i&&(n=i)):n=i;var f=e.length;if(f%2!==0)throw new Error("Invalid hex string");n>f/2&&(n=f/2);for(var o=0;n>o;o++){var u=parseInt(e.substr(2*o,2),16);if(isNaN(u))throw new Error("Invalid hex string");t[r+o]=u}return o}function utf8Write(t,e,r,n){return blitBuffer(utf8ToBytes(e,t.length-r),t,r,n)}function asciiWrite(t,e,r,n){return blitBuffer(asciiToBytes(e),t,r,n)}function binaryWrite(t,e,r,n){return asciiWrite(t,e,r,n)}function base64Write(t,e,r,n){return blitBuffer(base64ToBytes(e),t,r,n)}function ucs2Write(t,e,r,n){return blitBuffer(utf16leToBytes(e,t.length-r),t,r,n)}function base64Slice(t,e,r){return 0===e&&r===t.length?base64.fromByteArray(t):base64.fromByteArray(t.slice(e,r))}function utf8Slice(t,e,r){r=Math.min(t.length,r);for(var n=[],i=e;r>i;){var f=t[i],o=null,u=f>239?4:f>223?3:f>191?2:1;if(r>=i+u){var s,a,h,c;switch(u){case 1:128>f&&(o=f);break;case 2:s=t[i+1],128===(192&s)&&(c=(31&f)<<6|63&s,c>127&&(o=c));break;case 3:s=t[i+1],a=t[i+2],128===(192&s)&&128===(192&a)&&(c=(15&f)<<12|(63&s)<<6|63&a,c>2047&&(55296>c||c>57343)&&(o=c));break;case 4:s=t[i+1],a=t[i+2],h=t[i+3],128===(192&s)&&128===(192&a)&&128===(192&h)&&(c=(15&f)<<18|(63&s)<<12|(63&a)<<6|63&h,c>65535&&1114112>c&&(o=c))}}null===o?(o=65533,u=1):o>65535&&(o-=65536,n.push(o>>>10&1023|55296),o=56320|1023&o),n.push(o),i+=u}return decodeCodePointsArray(n)}function decodeCodePointsArray(t){var e=t.length;if(MAX_ARGUMENTS_LENGTH>=e)return String.fromCharCode.apply(String,t);for(var r="",n=0;e>n;)r+=String.fromCharCode.apply(String,t.slice(n,n+=MAX_ARGUMENTS_LENGTH));return r}function asciiSlice(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;r>i;i++)n+=String.fromCharCode(127&t[i]);return n}function binarySlice(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;r>i;i++)n+=String.fromCharCode(t[i]);return n}function hexSlice(t,e,r){var n=t.length;(!e||0>e)&&(e=0),(!r||0>r||r>n)&&(r=n);for(var i="",f=e;r>f;f++)i+=toHex(t[f]);return i}function utf16leSlice(t,e,r){for(var n=t.slice(e,r),i="",f=0;f<n.length;f+=2)i+=String.fromCharCode(n[f]+256*n[f+1]);return i}function checkOffset(t,e,r){if(t%1!==0||0>t)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function checkInt(t,e,r,n,i,f){if(!Buffer.isBuffer(t))throw new TypeError("buffer must be a Buffer instance");if(e>i||f>e)throw new RangeError("value is out of bounds");if(r+n>t.length)throw new RangeError("index out of range")}function objectWriteUInt16(t,e,r,n){0>e&&(e=65535+e+1);for(var i=0,f=Math.min(t.length-r,2);f>i;i++)t[r+i]=(e&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function objectWriteUInt32(t,e,r,n){0>e&&(e=4294967295+e+1);for(var i=0,f=Math.min(t.length-r,4);f>i;i++)t[r+i]=e>>>8*(n?i:3-i)&255}function checkIEEE754(t,e,r,n,i,f){if(e>i||f>e)throw new RangeError("value is out of bounds");if(r+n>t.length)throw new RangeError("index out of range");if(0>r)throw new RangeError("index out of range")}function writeFloat(t,e,r,n,i){return i||checkIEEE754(t,e,r,4,3.4028234663852886e38,-3.4028234663852886e38),ieee754.write(t,e,r,n,23,4),r+4}function writeDouble(t,e,r,n,i){return i||checkIEEE754(t,e,r,8,1.7976931348623157e308,-1.7976931348623157e308),ieee754.write(t,e,r,n,52,8),r+8}function base64clean(t){if(t=stringtrim(t).replace(INVALID_BASE64_RE,""),t.length<2)return"";for(;t.length%4!==0;)t+="=";return t}function stringtrim(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}function toHex(t){return 16>t?"0"+t.toString(16):t.toString(16)}function utf8ToBytes(t,e){e=e||1/0;for(var r,n=t.length,i=null,f=[],o=0;n>o;o++){if(r=t.charCodeAt(o),r>55295&&57344>r){if(!i){if(r>56319){(e-=3)>-1&&f.push(239,191,189);continue}if(o+1===n){(e-=3)>-1&&f.push(239,191,189);continue}i=r;continue}if(56320>r){(e-=3)>-1&&f.push(239,191,189),i=r;continue}r=i-55296<<10|r-56320|65536}else i&&(e-=3)>-1&&f.push(239,191,189);if(i=null,128>r){if((e-=1)<0)break;f.push(r)}else if(2048>r){if((e-=2)<0)break;f.push(r>>6|192,63&r|128)}else if(65536>r){if((e-=3)<0)break;f.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(1114112>r))throw new Error("Invalid code point");if((e-=4)<0)break;f.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return f}function asciiToBytes(t){for(var e=[],r=0;r<t.length;r++)e.push(255&t.charCodeAt(r));return e}function utf16leToBytes(t,e){for(var r,n,i,f=[],o=0;o<t.length&&!((e-=2)<0);o++)r=t.charCodeAt(o),n=r>>8,i=r%256,f.push(i),f.push(n);return f}function base64ToBytes(t){return base64.toByteArray(base64clean(t))}function blitBuffer(t,e,r,n){for(var i=0;n>i&&!(i+r>=e.length||i>=t.length);i++)e[i+r]=t[i];return i}var base64=require("base64-js"),ieee754=require("ieee754"),isArray=require("is-array");exports.Buffer=Buffer,exports.SlowBuffer=SlowBuffer,exports.INSPECT_MAX_BYTES=50,Buffer.poolSize=8192;var rootParent={};Buffer.TYPED_ARRAY_SUPPORT=void 0!==global.TYPED_ARRAY_SUPPORT?global.TYPED_ARRAY_SUPPORT:function(){function t(){}try{var e=new Uint8Array(1);return e.foo=function(){return 42},e.constructor=t,42===e.foo()&&e.constructor===t&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(r){return!1}}(),Buffer.TYPED_ARRAY_SUPPORT&&(Buffer.prototype.__proto__=Uint8Array.prototype,Buffer.__proto__=Uint8Array),Buffer.isBuffer=function(t){return!(null==t||!t._isBuffer)},Buffer.compare=function(t,e){if(!Buffer.isBuffer(t)||!Buffer.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var r=t.length,n=e.length,i=0,f=Math.min(r,n);f>i&&t[i]===e[i];)++i;return i!==f&&(r=t[i],n=e[i]),n>r?-1:r>n?1:0},Buffer.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"raw":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},Buffer.concat=function(t,e){if(!isArray(t))throw new TypeError("list argument must be an Array of Buffers.");if(0===t.length)return new Buffer(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;r++)e+=t[r].length;var n=new Buffer(e),i=0;for(r=0;r<t.length;r++){var f=t[r];f.copy(n,i),i+=f.length}return n},Buffer.byteLength=byteLength,Buffer.prototype.length=void 0,Buffer.prototype.parent=void 0,Buffer.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?utf8Slice(this,0,t):slowToString.apply(this,arguments)},Buffer.prototype.equals=function(t){if(!Buffer.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t?!0:0===Buffer.compare(this,t)},Buffer.prototype.inspect=function(){var t="",e=exports.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,e).match(/.{2}/g).join(" "),this.length>e&&(t+=" ... ")),"<Buffer "+t+">"},Buffer.prototype.compare=function(t){if(!Buffer.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t?0:Buffer.compare(this,t)},Buffer.prototype.indexOf=function(t,e){function r(t,e,r){for(var n=-1,i=0;r+i<t.length;i++)if(t[r+i]===e[-1===n?0:i-n]){if(-1===n&&(n=i),i-n+1===e.length)return r+n}else n=-1;return-1}if(e>2147483647?e=2147483647:-2147483648>e&&(e=-2147483648),e>>=0,0===this.length)return-1;if(e>=this.length)return-1;if(0>e&&(e=Math.max(this.length+e,0)),"string"==typeof t)return 0===t.length?-1:String.prototype.indexOf.call(this,t,e);if(Buffer.isBuffer(t))return r(this,t,e);if("number"==typeof t)return Buffer.TYPED_ARRAY_SUPPORT&&"function"===Uint8Array.prototype.indexOf?Uint8Array.prototype.indexOf.call(this,t,e):r(this,[t],e);throw new TypeError("val must be string, number or Buffer")},Buffer.prototype.get=function(t){return console.log(".get() is deprecated. Access using array indexes instead."),this.readUInt8(t)},Buffer.prototype.set=function(t,e){return console.log(".set() is deprecated. Access using array indexes instead."),this.writeUInt8(t,e)},Buffer.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else if(isFinite(e))e=0|e,isFinite(r)?(r=0|r,void 0===n&&(n="utf8")):(n=r,r=void 0);else{var i=n;n=e,e=0|r,r=i}var f=this.length-e;if((void 0===r||r>f)&&(r=f),t.length>0&&(0>r||0>e)||e>this.length)throw new RangeError("attempt to write outside buffer bounds");n||(n="utf8");for(var o=!1;;)switch(n){case"hex":return hexWrite(this,t,e,r);case"utf8":case"utf-8":return utf8Write(this,t,e,r);case"ascii":return asciiWrite(this,t,e,r);case"binary":return binaryWrite(this,t,e,r);case"base64":return base64Write(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return ucs2Write(this,t,e,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},Buffer.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var MAX_ARGUMENTS_LENGTH=4096;Buffer.prototype.slice=function(t,e){var r=this.length;t=~~t,e=void 0===e?r:~~e,0>t?(t+=r,0>t&&(t=0)):t>r&&(t=r),0>e?(e+=r,0>e&&(e=0)):e>r&&(e=r),t>e&&(e=t);var n;if(Buffer.TYPED_ARRAY_SUPPORT)n=Buffer._augment(this.subarray(t,e));else{var i=e-t;n=new Buffer(i,void 0);for(var f=0;i>f;f++)n[f]=this[f+t]}return n.length&&(n.parent=this.parent||this),n},Buffer.prototype.readUIntLE=function(t,e,r){t=0|t,e=0|e,r||checkOffset(t,e,this.length);for(var n=this[t],i=1,f=0;++f<e&&(i*=256);)n+=this[t+f]*i;return n},Buffer.prototype.readUIntBE=function(t,e,r){t=0|t,e=0|e,r||checkOffset(t,e,this.length);for(var n=this[t+--e],i=1;e>0&&(i*=256);)n+=this[t+--e]*i;return n},Buffer.prototype.readUInt8=function(t,e){return e||checkOffset(t,1,this.length),this[t]},Buffer.prototype.readUInt16LE=function(t,e){return e||checkOffset(t,2,this.length),this[t]|this[t+1]<<8},Buffer.prototype.readUInt16BE=function(t,e){return e||checkOffset(t,2,this.length),this[t]<<8|this[t+1]},Buffer.prototype.readUInt32LE=function(t,e){return e||checkOffset(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},Buffer.prototype.readUInt32BE=function(t,e){return e||checkOffset(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},Buffer.prototype.readIntLE=function(t,e,r){t=0|t,e=0|e,r||checkOffset(t,e,this.length);for(var n=this[t],i=1,f=0;++f<e&&(i*=256);)n+=this[t+f]*i;return i*=128,n>=i&&(n-=Math.pow(2,8*e)),n},Buffer.prototype.readIntBE=function(t,e,r){t=0|t,e=0|e,r||checkOffset(t,e,this.length);for(var n=e,i=1,f=this[t+--n];n>0&&(i*=256);)f+=this[t+--n]*i;return i*=128,f>=i&&(f-=Math.pow(2,8*e)),f},Buffer.prototype.readInt8=function(t,e){return e||checkOffset(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},Buffer.prototype.readInt16LE=function(t,e){e||checkOffset(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},Buffer.prototype.readInt16BE=function(t,e){e||checkOffset(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},Buffer.prototype.readInt32LE=function(t,e){return e||checkOffset(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},Buffer.prototype.readInt32BE=function(t,e){return e||checkOffset(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},Buffer.prototype.readFloatLE=function(t,e){return e||checkOffset(t,4,this.length),ieee754.read(this,t,!0,23,4)},Buffer.prototype.readFloatBE=function(t,e){return e||checkOffset(t,4,this.length),ieee754.read(this,t,!1,23,4)},Buffer.prototype.readDoubleLE=function(t,e){return e||checkOffset(t,8,this.length),ieee754.read(this,t,!0,52,8)},Buffer.prototype.readDoubleBE=function(t,e){return e||checkOffset(t,8,this.length),ieee754.read(this,t,!1,52,8)},Buffer.prototype.writeUIntLE=function(t,e,r,n){t=+t,e=0|e,r=0|r,n||checkInt(this,t,e,r,Math.pow(2,8*r),0);var i=1,f=0;for(this[e]=255&t;++f<r&&(i*=256);)this[e+f]=t/i&255;return e+r},Buffer.prototype.writeUIntBE=function(t,e,r,n){t=+t,e=0|e,r=0|r,n||checkInt(this,t,e,r,Math.pow(2,8*r),0);var i=r-1,f=1;for(this[e+i]=255&t;--i>=0&&(f*=256);)this[e+i]=t/f&255;return e+r},Buffer.prototype.writeUInt8=function(t,e,r){return t=+t,e=0|e,r||checkInt(this,t,e,1,255,0),Buffer.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=t,e+1},Buffer.prototype.writeUInt16LE=function(t,e,r){return t=+t,e=0|e,r||checkInt(this,t,e,2,65535,0),Buffer.TYPED_ARRAY_SUPPORT?(this[e]=t,this[e+1]=t>>>8):objectWriteUInt16(this,t,e,!0),e+2},Buffer.prototype.writeUInt16BE=function(t,e,r){return t=+t,e=0|e,r||checkInt(this,t,e,2,65535,0),Buffer.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=t):objectWriteUInt16(this,t,e,!1),e+2},Buffer.prototype.writeUInt32LE=function(t,e,r){return t=+t,e=0|e,r||checkInt(this,t,e,4,4294967295,0),Buffer.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=t):objectWriteUInt32(this,t,e,!0),e+4},Buffer.prototype.writeUInt32BE=function(t,e,r){return t=+t,e=0|e,r||checkInt(this,t,e,4,4294967295,0),Buffer.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=t):objectWriteUInt32(this,t,e,!1),e+4},Buffer.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e=0|e,!n){var i=Math.pow(2,8*r-1);checkInt(this,t,e,r,i-1,-i)}var f=0,o=1,u=0>t?1:0;for(this[e]=255&t;++f<r&&(o*=256);)this[e+f]=(t/o>>0)-u&255;return e+r},Buffer.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e=0|e,!n){var i=Math.pow(2,8*r-1);checkInt(this,t,e,r,i-1,-i)}var f=r-1,o=1,u=0>t?1:0;for(this[e+f]=255&t;--f>=0&&(o*=256);)this[e+f]=(t/o>>0)-u&255;return e+r},Buffer.prototype.writeInt8=function(t,e,r){return t=+t,e=0|e,r||checkInt(this,t,e,1,127,-128),Buffer.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),0>t&&(t=255+t+1),this[e]=t,e+1},Buffer.prototype.writeInt16LE=function(t,e,r){return t=+t,e=0|e,r||checkInt(this,t,e,2,32767,-32768),Buffer.TYPED_ARRAY_SUPPORT?(this[e]=t,this[e+1]=t>>>8):objectWriteUInt16(this,t,e,!0),e+2},Buffer.prototype.writeInt16BE=function(t,e,r){return t=+t,e=0|e,r||checkInt(this,t,e,2,32767,-32768),Buffer.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=t):objectWriteUInt16(this,t,e,!1),e+2},Buffer.prototype.writeInt32LE=function(t,e,r){return t=+t,e=0|e,r||checkInt(this,t,e,4,2147483647,-2147483648),Buffer.TYPED_ARRAY_SUPPORT?(this[e]=t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):objectWriteUInt32(this,t,e,!0),e+4},Buffer.prototype.writeInt32BE=function(t,e,r){return t=+t,e=0|e,r||checkInt(this,t,e,4,2147483647,-2147483648),0>t&&(t=4294967295+t+1),Buffer.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=t):objectWriteUInt32(this,t,e,!1),e+4},Buffer.prototype.writeFloatLE=function(t,e,r){return writeFloat(this,t,e,!0,r)},Buffer.prototype.writeFloatBE=function(t,e,r){return writeFloat(this,t,e,!1,r)},Buffer.prototype.writeDoubleLE=function(t,e,r){return writeDouble(this,t,e,!0,r)},Buffer.prototype.writeDoubleBE=function(t,e,r){return writeDouble(this,t,e,!1,r)},Buffer.prototype.copy=function(t,e,r,n){if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&r>n&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(0>e)throw new RangeError("targetStart out of bounds");if(0>r||r>=this.length)throw new RangeError("sourceStart out of bounds");if(0>n)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var i,f=n-r;if(this===t&&e>r&&n>e)for(i=f-1;i>=0;i--)t[i+e]=this[i+r];else if(1e3>f||!Buffer.TYPED_ARRAY_SUPPORT)for(i=0;f>i;i++)t[i+e]=this[i+r];else t._set(this.subarray(r,r+f),e);return f},Buffer.prototype.fill=function(t,e,r){if(t||(t=0),e||(e=0),r||(r=this.length),e>r)throw new RangeError("end < start");if(r!==e&&0!==this.length){if(0>e||e>=this.length)throw new RangeError("start out of bounds");if(0>r||r>this.length)throw new RangeError("end out of bounds");var n;if("number"==typeof t)for(n=e;r>n;n++)this[n]=t;else{var i=utf8ToBytes(t.toString()),f=i.length;for(n=e;r>n;n++)this[n]=i[n%f]}return this}},Buffer.prototype.toArrayBuffer=function(){if("undefined"!=typeof Uint8Array){if(Buffer.TYPED_ARRAY_SUPPORT)return new Buffer(this).buffer;for(var t=new Uint8Array(this.length),e=0,r=t.length;r>e;e+=1)t[e]=this[e];return t.buffer}throw new TypeError("Buffer.toArrayBuffer not supported in this browser")};var BP=Buffer.prototype;Buffer._augment=function(t){return t.constructor=Buffer,t._isBuffer=!0,t._set=t.set,t.get=BP.get,t.set=BP.set,t.write=BP.write,t.toString=BP.toString,t.toLocaleString=BP.toString,t.toJSON=BP.toJSON,t.equals=BP.equals,t.compare=BP.compare,t.indexOf=BP.indexOf,t.copy=BP.copy,t.slice=BP.slice,t.readUIntLE=BP.readUIntLE,t.readUIntBE=BP.readUIntBE,t.readUInt8=BP.readUInt8,t.readUInt16LE=BP.readUInt16LE,t.readUInt16BE=BP.readUInt16BE,t.readUInt32LE=BP.readUInt32LE,t.readUInt32BE=BP.readUInt32BE,t.readIntLE=BP.readIntLE,t.readIntBE=BP.readIntBE,t.readInt8=BP.readInt8,t.readInt16LE=BP.readInt16LE,t.readInt16BE=BP.readInt16BE,t.readInt32LE=BP.readInt32LE,t.readInt32BE=BP.readInt32BE,t.readFloatLE=BP.readFloatLE,t.readFloatBE=BP.readFloatBE,t.readDoubleLE=BP.readDoubleLE,t.readDoubleBE=BP.readDoubleBE,t.writeUInt8=BP.writeUInt8,t.writeUIntLE=BP.writeUIntLE,t.writeUIntBE=BP.writeUIntBE,t.writeUInt16LE=BP.writeUInt16LE,t.writeUInt16BE=BP.writeUInt16BE,t.writeUInt32LE=BP.writeUInt32LE,t.writeUInt32BE=BP.writeUInt32BE,t.writeIntLE=BP.writeIntLE,t.writeIntBE=BP.writeIntBE,t.writeInt8=BP.writeInt8,t.writeInt16LE=BP.writeInt16LE,t.writeInt16BE=BP.writeInt16BE,t.writeInt32LE=BP.writeInt32LE,t.writeInt32BE=BP.writeInt32BE,t.writeFloatLE=BP.writeFloatLE,t.writeFloatBE=BP.writeFloatBE,t.writeDoubleLE=BP.writeDoubleLE,t.writeDoubleBE=BP.writeDoubleBE,t.fill=BP.fill,t.inspect=BP.inspect,t.toArrayBuffer=BP.toArrayBuffer,t};var INVALID_BASE64_RE=/[^+\/0-9A-Za-z-_]/g;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"base64-js":5,"ieee754":6,"is-array":7}],5:[function(require,module,exports){
var lookup="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";!function(t){"use strict";function r(t){var r=t.charCodeAt(0);return r===h||r===u?62:r===c||r===f?63:o>r?-1:o+10>r?r-o+26+26:i+26>r?r-i:A+26>r?r-A+26:void 0}function e(t){function e(t){i[f++]=t}var n,h,c,o,A,i;if(t.length%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var u=t.length;A="="===t.charAt(u-2)?2:"="===t.charAt(u-1)?1:0,i=new a(3*t.length/4-A),c=A>0?t.length-4:t.length;var f=0;for(n=0,h=0;c>n;n+=4,h+=3)o=r(t.charAt(n))<<18|r(t.charAt(n+1))<<12|r(t.charAt(n+2))<<6|r(t.charAt(n+3)),e((16711680&o)>>16),e((65280&o)>>8),e(255&o);return 2===A?(o=r(t.charAt(n))<<2|r(t.charAt(n+1))>>4,e(255&o)):1===A&&(o=r(t.charAt(n))<<10|r(t.charAt(n+1))<<4|r(t.charAt(n+2))>>2,e(o>>8&255),e(255&o)),i}function n(t){function r(t){return lookup.charAt(t)}function e(t){return r(t>>18&63)+r(t>>12&63)+r(t>>6&63)+r(63&t)}var n,a,h,c=t.length%3,o="";for(n=0,h=t.length-c;h>n;n+=3)a=(t[n]<<16)+(t[n+1]<<8)+t[n+2],o+=e(a);switch(c){case 1:a=t[t.length-1],o+=r(a>>2),o+=r(a<<4&63),o+="==";break;case 2:a=(t[t.length-2]<<8)+t[t.length-1],o+=r(a>>10),o+=r(a>>4&63),o+=r(a<<2&63),o+="="}return o}var a="undefined"!=typeof Uint8Array?Uint8Array:Array,h="+".charCodeAt(0),c="/".charCodeAt(0),o="0".charCodeAt(0),A="a".charCodeAt(0),i="A".charCodeAt(0),u="-".charCodeAt(0),f="_".charCodeAt(0);t.toByteArray=e,t.fromByteArray=n}("undefined"==typeof exports?this.base64js={}:exports);

},{}],6:[function(require,module,exports){
exports.read=function(a,o,t,r,h){var M,p,w=8*h-r-1,f=(1<<w)-1,e=f>>1,i=-7,N=t?h-1:0,n=t?-1:1,s=a[o+N];for(N+=n,M=s&(1<<-i)-1,s>>=-i,i+=w;i>0;M=256*M+a[o+N],N+=n,i-=8);for(p=M&(1<<-i)-1,M>>=-i,i+=r;i>0;p=256*p+a[o+N],N+=n,i-=8);if(0===M)M=1-e;else{if(M===f)return p?NaN:(s?-1:1)*(1/0);p+=Math.pow(2,r),M-=e}return(s?-1:1)*p*Math.pow(2,M-r)},exports.write=function(a,o,t,r,h,M){var p,w,f,e=8*M-h-1,i=(1<<e)-1,N=i>>1,n=23===h?Math.pow(2,-24)-Math.pow(2,-77):0,s=r?0:M-1,u=r?1:-1,l=0>o||0===o&&0>1/o?1:0;for(o=Math.abs(o),isNaN(o)||o===1/0?(w=isNaN(o)?1:0,p=i):(p=Math.floor(Math.log(o)/Math.LN2),o*(f=Math.pow(2,-p))<1&&(p--,f*=2),o+=p+N>=1?n/f:n*Math.pow(2,1-N),o*f>=2&&(p++,f/=2),p+N>=i?(w=0,p=i):p+N>=1?(w=(o*f-1)*Math.pow(2,h),p+=N):(w=o*Math.pow(2,N-1)*Math.pow(2,h),p=0));h>=8;a[t+s]=255&w,s+=u,w/=256,h-=8);for(p=p<<h|w,e+=h;e>0;a[t+s]=255&p,s+=u,p/=256,e-=8);a[t+s-u]|=128*l};

},{}],7:[function(require,module,exports){
var isArray=Array.isArray,str=Object.prototype.toString;module.exports=isArray||function(r){return!!r&&"[object Array]"==str.call(r)};

},{}],8:[function(require,module,exports){
function EventEmitter(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function isFunction(e){return"function"==typeof e}function isNumber(e){return"number"==typeof e}function isObject(e){return"object"==typeof e&&null!==e}function isUndefined(e){return void 0===e}module.exports=EventEmitter,EventEmitter.EventEmitter=EventEmitter,EventEmitter.prototype._events=void 0,EventEmitter.prototype._maxListeners=void 0,EventEmitter.defaultMaxListeners=10,EventEmitter.prototype.setMaxListeners=function(e){if(!isNumber(e)||0>e||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},EventEmitter.prototype.emit=function(e){var t,n,s,i,r,o;if(this._events||(this._events={}),"error"===e&&(!this._events.error||isObject(this._events.error)&&!this._events.error.length)){if(t=arguments[1],t instanceof Error)throw t;throw TypeError('Uncaught, unspecified "error" event.')}if(n=this._events[e],isUndefined(n))return!1;if(isFunction(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:for(s=arguments.length,i=new Array(s-1),r=1;s>r;r++)i[r-1]=arguments[r];n.apply(this,i)}else if(isObject(n)){for(s=arguments.length,i=new Array(s-1),r=1;s>r;r++)i[r-1]=arguments[r];for(o=n.slice(),s=o.length,r=0;s>r;r++)o[r].apply(this,i)}return!0},EventEmitter.prototype.addListener=function(e,t){var n;if(!isFunction(t))throw TypeError("listener must be a function");if(this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,isFunction(t.listener)?t.listener:t),this._events[e]?isObject(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,isObject(this._events[e])&&!this._events[e].warned){var n;n=isUndefined(this._maxListeners)?EventEmitter.defaultMaxListeners:this._maxListeners,n&&n>0&&this._events[e].length>n&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace())}return this},EventEmitter.prototype.on=EventEmitter.prototype.addListener,EventEmitter.prototype.once=function(e,t){function n(){this.removeListener(e,n),s||(s=!0,t.apply(this,arguments))}if(!isFunction(t))throw TypeError("listener must be a function");var s=!1;return n.listener=t,this.on(e,n),this},EventEmitter.prototype.removeListener=function(e,t){var n,s,i,r;if(!isFunction(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(n=this._events[e],i=n.length,s=-1,n===t||isFunction(n.listener)&&n.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(isObject(n)){for(r=i;r-->0;)if(n[r]===t||n[r].listener&&n[r].listener===t){s=r;break}if(0>s)return this;1===n.length?(n.length=0,delete this._events[e]):n.splice(s,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},EventEmitter.prototype.removeAllListeners=function(e){var t,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(n=this._events[e],isFunction(n))this.removeListener(e,n);else for(;n.length;)this.removeListener(e,n[n.length-1]);return delete this._events[e],this},EventEmitter.prototype.listeners=function(e){var t;return t=this._events&&this._events[e]?isFunction(this._events[e])?[this._events[e]]:this._events[e].slice():[]},EventEmitter.listenerCount=function(e,t){var n;return n=e._events&&e._events[t]?isFunction(e._events[t])?1:e._events[t].length:0};

},{}],9:[function(require,module,exports){
var http=require("http"),https=module.exports;for(var key in http)http.hasOwnProperty(key)&&(https[key]=http[key]);https.request=function(t,e){return t||(t={}),t.scheme="https",t.protocol="https:",http.request.call(this,t,e)};

},{"http":34}],10:[function(require,module,exports){
"function"==typeof Object.create?module.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:module.exports=function(t,e){t.super_=e;var o=function(){};o.prototype=e.prototype,t.prototype=new o,t.prototype.constructor=t};

},{}],11:[function(require,module,exports){
module.exports=function(r){return!(null==r||!(r._isBuffer||r.constructor&&"function"==typeof r.constructor.isBuffer&&r.constructor.isBuffer(r)))};

},{}],12:[function(require,module,exports){
module.exports=Array.isArray||function(r){return"[object Array]"==Object.prototype.toString.call(r)};

},{}],13:[function(require,module,exports){
exports.endianness=function(){return"LE"},exports.hostname=function(){return"undefined"!=typeof location?location.hostname:""},exports.loadavg=function(){return[]},exports.uptime=function(){return 0},exports.freemem=function(){return Number.MAX_VALUE},exports.totalmem=function(){return Number.MAX_VALUE},exports.cpus=function(){return[]},exports.type=function(){return"Browser"},exports.release=function(){return"undefined"!=typeof navigator?navigator.appVersion:""},exports.networkInterfaces=exports.getNetworkInterfaces=function(){return{}},exports.arch=function(){return"javascript"},exports.platform=function(){return"browser"},exports.tmpdir=exports.tmpDir=function(){return"/tmp"},exports.EOL="\n";

},{}],14:[function(require,module,exports){
(function (process){
function normalizeArray(r,t){for(var e=0,n=r.length-1;n>=0;n--){var s=r[n];"."===s?r.splice(n,1):".."===s?(r.splice(n,1),e++):e&&(r.splice(n,1),e--)}if(t)for(;e--;e)r.unshift("..");return r}function filter(r,t){if(r.filter)return r.filter(t);for(var e=[],n=0;n<r.length;n++)t(r[n],n,r)&&e.push(r[n]);return e}var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,splitPath=function(r){return splitPathRe.exec(r).slice(1)};exports.resolve=function(){for(var r="",t=!1,e=arguments.length-1;e>=-1&&!t;e--){var n=e>=0?arguments[e]:process.cwd();if("string"!=typeof n)throw new TypeError("Arguments to path.resolve must be strings");n&&(r=n+"/"+r,t="/"===n.charAt(0))}return r=normalizeArray(filter(r.split("/"),function(r){return!!r}),!t).join("/"),(t?"/":"")+r||"."},exports.normalize=function(r){var t=exports.isAbsolute(r),e="/"===substr(r,-1);return r=normalizeArray(filter(r.split("/"),function(r){return!!r}),!t).join("/"),r||t||(r="."),r&&e&&(r+="/"),(t?"/":"")+r},exports.isAbsolute=function(r){return"/"===r.charAt(0)},exports.join=function(){var r=Array.prototype.slice.call(arguments,0);return exports.normalize(filter(r,function(r,t){if("string"!=typeof r)throw new TypeError("Arguments to path.join must be strings");return r}).join("/"))},exports.relative=function(r,t){function e(r){for(var t=0;t<r.length&&""===r[t];t++);for(var e=r.length-1;e>=0&&""===r[e];e--);return t>e?[]:r.slice(t,e-t+1)}r=exports.resolve(r).substr(1),t=exports.resolve(t).substr(1);for(var n=e(r.split("/")),s=e(t.split("/")),i=Math.min(n.length,s.length),o=i,u=0;i>u;u++)if(n[u]!==s[u]){o=u;break}for(var l=[],u=o;u<n.length;u++)l.push("..");return l=l.concat(s.slice(o)),l.join("/")},exports.sep="/",exports.delimiter=":",exports.dirname=function(r){var t=splitPath(r),e=t[0],n=t[1];return e||n?(n&&(n=n.substr(0,n.length-1)),e+n):"."},exports.basename=function(r,t){var e=splitPath(r)[2];return t&&e.substr(-1*t.length)===t&&(e=e.substr(0,e.length-t.length)),e},exports.extname=function(r){return splitPath(r)[3]};var substr="b"==="ab".substr(-1)?function(r,t,e){return r.substr(t,e)}:function(r,t,e){return 0>t&&(t=r.length+t),r.substr(t,e)};

}).call(this,require('_process'))

},{"_process":15}],15:[function(require,module,exports){
function cleanUpNextTick(){draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue()}function drainQueue(){if(!draining){var e=setTimeout(cleanUpNextTick);draining=!0;for(var n=queue.length;n;){for(currentQueue=queue,queue=[];++queueIndex<n;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,n=queue.length}currentQueue=null,draining=!1,clearTimeout(e)}}function Item(e,n){this.fun=e,this.array=n}function noop(){}var process=module.exports={},queue=[],draining=!1,currentQueue,queueIndex=-1;process.nextTick=function(e){var n=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)n[r-1]=arguments[r];queue.push(new Item(e,n)),1!==queue.length||draining||setTimeout(drainQueue,0)},Item.prototype.run=function(){this.fun.apply(null,this.array)},process.title="browser",process.browser=!0,process.env={},process.argv=[],process.version="",process.versions={},process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.binding=function(e){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(e){throw new Error("process.chdir is not supported")},process.umask=function(){return 0};

},{}],16:[function(require,module,exports){
(function (global){
!function(e){function o(e){throw RangeError(T[e])}function n(e,o){for(var n=e.length,r=[];n--;)r[n]=o(e[n]);return r}function r(e,o){var r=e.split("@"),t="";r.length>1&&(t=r[0]+"@",e=r[1]),e=e.replace(S,".");var u=e.split("."),i=n(u,o).join(".");return t+i}function t(e){for(var o,n,r=[],t=0,u=e.length;u>t;)o=e.charCodeAt(t++),o>=55296&&56319>=o&&u>t?(n=e.charCodeAt(t++),56320==(64512&n)?r.push(((1023&o)<<10)+(1023&n)+65536):(r.push(o),t--)):r.push(o);return r}function u(e){return n(e,function(e){var o="";return e>65535&&(e-=65536,o+=P(e>>>10&1023|55296),e=56320|1023&e),o+=P(e)}).join("")}function i(e){return 10>e-48?e-22:26>e-65?e-65:26>e-97?e-97:b}function f(e,o){return e+22+75*(26>e)-((0!=o)<<5)}function c(e,o,n){var r=0;for(e=n?M(e/j):e>>1,e+=M(e/o);e>L*C>>1;r+=b)e=M(e/L);return M(r+(L+1)*e/(e+m))}function l(e){var n,r,t,f,l,s,d,a,p,h,v=[],g=e.length,w=0,m=I,j=A;for(r=e.lastIndexOf(E),0>r&&(r=0),t=0;r>t;++t)e.charCodeAt(t)>=128&&o("not-basic"),v.push(e.charCodeAt(t));for(f=r>0?r+1:0;g>f;){for(l=w,s=1,d=b;f>=g&&o("invalid-input"),a=i(e.charCodeAt(f++)),(a>=b||a>M((x-w)/s))&&o("overflow"),w+=a*s,p=j>=d?y:d>=j+C?C:d-j,!(p>a);d+=b)h=b-p,s>M(x/h)&&o("overflow"),s*=h;n=v.length+1,j=c(w-l,n,0==l),M(w/n)>x-m&&o("overflow"),m+=M(w/n),w%=n,v.splice(w++,0,m)}return u(v)}function s(e){var n,r,u,i,l,s,d,a,p,h,v,g,w,m,j,F=[];for(e=t(e),g=e.length,n=I,r=0,l=A,s=0;g>s;++s)v=e[s],128>v&&F.push(P(v));for(u=i=F.length,i&&F.push(E);g>u;){for(d=x,s=0;g>s;++s)v=e[s],v>=n&&d>v&&(d=v);for(w=u+1,d-n>M((x-r)/w)&&o("overflow"),r+=(d-n)*w,n=d,s=0;g>s;++s)if(v=e[s],n>v&&++r>x&&o("overflow"),v==n){for(a=r,p=b;h=l>=p?y:p>=l+C?C:p-l,!(h>a);p+=b)j=a-h,m=b-h,F.push(P(f(h+j%m,0))),a=M(j/m);F.push(P(f(a,0))),l=c(r,w,u==i),r=0,++u}++r,++n}return F.join("")}function d(e){return r(e,function(e){return F.test(e)?l(e.slice(4).toLowerCase()):e})}function a(e){return r(e,function(e){return O.test(e)?"xn--"+s(e):e})}var p="object"==typeof exports&&exports&&!exports.nodeType&&exports,h="object"==typeof module&&module&&!module.nodeType&&module,v="object"==typeof global&&global;(v.global===v||v.window===v||v.self===v)&&(e=v);var g,w,x=2147483647,b=36,y=1,C=26,m=38,j=700,A=72,I=128,E="-",F=/^xn--/,O=/[^\x20-\x7E]/,S=/[\x2E\u3002\uFF0E\uFF61]/g,T={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},L=b-y,M=Math.floor,P=String.fromCharCode;if(g={version:"1.3.2",ucs2:{decode:t,encode:u},decode:l,encode:s,toASCII:a,toUnicode:d},"function"==typeof define&&"object"==typeof define.amd&&define.amd)define("punycode",function(){return g});else if(p&&h)if(module.exports==p)h.exports=g;else for(w in g)g.hasOwnProperty(w)&&(p[w]=g[w]);else e.punycode=g}(this);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],17:[function(require,module,exports){
"use strict";function hasOwnProperty(r,e){return Object.prototype.hasOwnProperty.call(r,e)}module.exports=function(r,e,t,n){e=e||"&",t=t||"=";var o={};if("string"!=typeof r||0===r.length)return o;var a=/\+/g;r=r.split(e);var s=1e3;n&&"number"==typeof n.maxKeys&&(s=n.maxKeys);var p=r.length;s>0&&p>s&&(p=s);for(var y=0;p>y;++y){var u,c,i,l,f=r[y].replace(a,"%20"),v=f.indexOf(t);v>=0?(u=f.substr(0,v),c=f.substr(v+1)):(u=f,c=""),i=decodeURIComponent(u),l=decodeURIComponent(c),hasOwnProperty(o,i)?isArray(o[i])?o[i].push(l):o[i]=[o[i],l]:o[i]=l}return o};var isArray=Array.isArray||function(r){return"[object Array]"===Object.prototype.toString.call(r)};

},{}],18:[function(require,module,exports){
"use strict";function map(r,e){if(r.map)return r.map(e);for(var t=[],n=0;n<r.length;n++)t.push(e(r[n],n));return t}var stringifyPrimitive=function(r){switch(typeof r){case"string":return r;case"boolean":return r?"true":"false";case"number":return isFinite(r)?r:"";default:return""}};module.exports=function(r,e,t,n){return e=e||"&",t=t||"=",null===r&&(r=void 0),"object"==typeof r?map(objectKeys(r),function(n){var i=encodeURIComponent(stringifyPrimitive(n))+t;return isArray(r[n])?map(r[n],function(r){return i+encodeURIComponent(stringifyPrimitive(r))}).join(e):i+encodeURIComponent(stringifyPrimitive(r[n]))}).join(e):n?encodeURIComponent(stringifyPrimitive(n))+t+encodeURIComponent(stringifyPrimitive(r)):""};var isArray=Array.isArray||function(r){return"[object Array]"===Object.prototype.toString.call(r)},objectKeys=Object.keys||function(r){var e=[];for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&e.push(t);return e};

},{}],19:[function(require,module,exports){
"use strict";exports.decode=exports.parse=require("./decode"),exports.encode=exports.stringify=require("./encode");

},{"./decode":17,"./encode":18}],20:[function(require,module,exports){
module.exports=require("./lib/_stream_duplex.js");

},{"./lib/_stream_duplex.js":21}],21:[function(require,module,exports){
"use strict";function Duplex(e){return this instanceof Duplex?(Readable.call(this,e),Writable.call(this,e),e&&e.readable===!1&&(this.readable=!1),e&&e.writable===!1&&(this.writable=!1),this.allowHalfOpen=!0,e&&e.allowHalfOpen===!1&&(this.allowHalfOpen=!1),void this.once("end",onend)):new Duplex(e)}function onend(){this.allowHalfOpen||this._writableState.ended||processNextTick(onEndNT,this)}function onEndNT(e){e.end()}function forEach(e,t){for(var r=0,i=e.length;i>r;r++)t(e[r],r)}var objectKeys=Object.keys||function(e){var t=[];for(var r in e)t.push(r);return t};module.exports=Duplex;var processNextTick=require("process-nextick-args"),util=require("core-util-is");util.inherits=require("inherits");var Readable=require("./_stream_readable"),Writable=require("./_stream_writable");util.inherits(Duplex,Readable);for(var keys=objectKeys(Writable.prototype),v=0;v<keys.length;v++){var method=keys[v];Duplex.prototype[method]||(Duplex.prototype[method]=Writable.prototype[method])}

},{"./_stream_readable":23,"./_stream_writable":25,"core-util-is":26,"inherits":10,"process-nextick-args":27}],22:[function(require,module,exports){
"use strict";function PassThrough(r){return this instanceof PassThrough?void Transform.call(this,r):new PassThrough(r)}module.exports=PassThrough;var Transform=require("./_stream_transform"),util=require("core-util-is");util.inherits=require("inherits"),util.inherits(PassThrough,Transform),PassThrough.prototype._transform=function(r,s,i){i(null,r)};

},{"./_stream_transform":24,"core-util-is":26,"inherits":10}],23:[function(require,module,exports){
(function (process){
"use strict";function ReadableState(e,t){var r=require("./_stream_duplex");e=e||{},this.objectMode=!!e.objectMode,t instanceof r&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var n=e.highWaterMark,a=this.objectMode?16:16384;this.highWaterMark=n||0===n?n:a,this.highWaterMark=~~this.highWaterMark,this.buffer=[],this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.ranOut=!1,this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(StringDecoder||(StringDecoder=require("string_decoder/").StringDecoder),this.decoder=new StringDecoder(e.encoding),this.encoding=e.encoding)}function Readable(e){require("./_stream_duplex");return this instanceof Readable?(this._readableState=new ReadableState(e,this),this.readable=!0,e&&"function"==typeof e.read&&(this._read=e.read),void Stream.call(this)):new Readable(e)}function readableAddChunk(e,t,r,n,a){var i=chunkInvalid(t,r);if(i)e.emit("error",i);else if(null===r)t.reading=!1,onEofChunk(e,t);else if(t.objectMode||r&&r.length>0)if(t.ended&&!a){var d=new Error("stream.push() after EOF");e.emit("error",d)}else if(t.endEmitted&&a){var d=new Error("stream.unshift() after end event");e.emit("error",d)}else!t.decoder||a||n||(r=t.decoder.write(r)),a||(t.reading=!1),t.flowing&&0===t.length&&!t.sync?(e.emit("data",r),e.read(0)):(t.length+=t.objectMode?1:r.length,a?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&emitReadable(e)),maybeReadMore(e,t);else a||(t.reading=!1);return needMoreData(t)}function needMoreData(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}function roundUpToNextPowerOf2(e){if(e>=MAX_HWM)e=MAX_HWM;else{e--;for(var t=1;32>t;t<<=1)e|=e>>t;e++}return e}function howMuchToRead(e,t){return 0===t.length&&t.ended?0:t.objectMode?0===e?0:1:null===e||isNaN(e)?t.flowing&&t.buffer.length?t.buffer[0].length:t.length:0>=e?0:(e>t.highWaterMark&&(t.highWaterMark=roundUpToNextPowerOf2(e)),e>t.length?t.ended?t.length:(t.needReadable=!0,0):e)}function chunkInvalid(e,t){var r=null;return Buffer.isBuffer(t)||"string"==typeof t||null===t||void 0===t||e.objectMode||(r=new TypeError("Invalid non-string/buffer chunk")),r}function onEofChunk(e,t){if(!t.ended){if(t.decoder){var r=t.decoder.end();r&&r.length&&(t.buffer.push(r),t.length+=t.objectMode?1:r.length)}t.ended=!0,emitReadable(e)}}function emitReadable(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(debug("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?processNextTick(emitReadable_,e):emitReadable_(e))}function emitReadable_(e){debug("emit readable"),e.emit("readable"),flow(e)}function maybeReadMore(e,t){t.readingMore||(t.readingMore=!0,processNextTick(maybeReadMore_,e,t))}function maybeReadMore_(e,t){for(var r=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(debug("maybeReadMore read 0"),e.read(0),r!==t.length);)r=t.length;t.readingMore=!1}function pipeOnDrain(e){return function(){var t=e._readableState;debug("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&EE.listenerCount(e,"data")&&(t.flowing=!0,flow(e))}}function nReadingNextTick(e){debug("readable nexttick read 0"),e.read(0)}function resume(e,t){t.resumeScheduled||(t.resumeScheduled=!0,processNextTick(resume_,e,t))}function resume_(e,t){t.reading||(debug("resume read 0"),e.read(0)),t.resumeScheduled=!1,e.emit("resume"),flow(e),t.flowing&&!t.reading&&e.read(0)}function flow(e){var t=e._readableState;if(debug("flow",t.flowing),t.flowing)do var r=e.read();while(null!==r&&t.flowing)}function fromList(e,t){var r,n=t.buffer,a=t.length,i=!!t.decoder,d=!!t.objectMode;if(0===n.length)return null;if(0===a)r=null;else if(d)r=n.shift();else if(!e||e>=a)r=i?n.join(""):Buffer.concat(n,a),n.length=0;else if(e<n[0].length){var o=n[0];r=o.slice(0,e),n[0]=o.slice(e)}else if(e===n[0].length)r=n.shift();else{r=i?"":new Buffer(e);for(var l=0,u=0,s=n.length;s>u&&e>l;u++){var o=n[0],h=Math.min(e-l,o.length);i?r+=o.slice(0,h):o.copy(r,l,0,h),h<o.length?n[0]=o.slice(h):n.shift(),l+=h}}return r}function endReadable(e){var t=e._readableState;if(t.length>0)throw new Error("endReadable called on non-empty stream");t.endEmitted||(t.ended=!0,processNextTick(endReadableNT,t,e))}function endReadableNT(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function forEach(e,t){for(var r=0,n=e.length;n>r;r++)t(e[r],r)}function indexOf(e,t){for(var r=0,n=e.length;n>r;r++)if(e[r]===t)return r;return-1}module.exports=Readable;var processNextTick=require("process-nextick-args"),isArray=require("isarray"),Buffer=require("buffer").Buffer;Readable.ReadableState=ReadableState;var EE=require("events").EventEmitter;EE.listenerCount||(EE.listenerCount=function(e,t){return e.listeners(t).length});var Stream;!function(){try{Stream=require("stream")}catch(e){}finally{Stream||(Stream=require("events").EventEmitter)}}();var Buffer=require("buffer").Buffer,util=require("core-util-is");util.inherits=require("inherits");var debug=require("util");debug=debug&&debug.debuglog?debug.debuglog("stream"):function(){};var StringDecoder;util.inherits(Readable,Stream),Readable.prototype.push=function(e,t){var r=this._readableState;return r.objectMode||"string"!=typeof e||(t=t||r.defaultEncoding,t!==r.encoding&&(e=new Buffer(e,t),t="")),readableAddChunk(this,r,e,t,!1)},Readable.prototype.unshift=function(e){var t=this._readableState;return readableAddChunk(this,t,e,"",!0)},Readable.prototype.isPaused=function(){return this._readableState.flowing===!1},Readable.prototype.setEncoding=function(e){return StringDecoder||(StringDecoder=require("string_decoder/").StringDecoder),this._readableState.decoder=new StringDecoder(e),this._readableState.encoding=e,this};var MAX_HWM=8388608;Readable.prototype.read=function(e){debug("read",e);var t=this._readableState,r=e;if(("number"!=typeof e||e>0)&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return debug("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?endReadable(this):emitReadable(this),null;if(e=howMuchToRead(e,t),0===e&&t.ended)return 0===t.length&&endReadable(this),null;var n=t.needReadable;debug("need readable",n),(0===t.length||t.length-e<t.highWaterMark)&&(n=!0,debug("length less than watermark",n)),(t.ended||t.reading)&&(n=!1,debug("reading or ended",n)),n&&(debug("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1),n&&!t.reading&&(e=howMuchToRead(r,t));var a;return a=e>0?fromList(e,t):null,null===a&&(t.needReadable=!0,e=0),t.length-=e,0!==t.length||t.ended||(t.needReadable=!0),r!==e&&t.ended&&0===t.length&&endReadable(this),null!==a&&this.emit("data",a),a},Readable.prototype._read=function(e){this.emit("error",new Error("not implemented"))},Readable.prototype.pipe=function(e,t){function r(e){debug("onunpipe"),e===s&&a()}function n(){debug("onend"),e.end()}function a(){debug("cleanup"),e.removeListener("close",o),e.removeListener("finish",l),e.removeListener("drain",b),e.removeListener("error",d),e.removeListener("unpipe",r),s.removeListener("end",n),s.removeListener("end",a),s.removeListener("data",i),!h.awaitDrain||e._writableState&&!e._writableState.needDrain||b()}function i(t){debug("ondata");var r=e.write(t);!1===r&&(debug("false write response, pause",s._readableState.awaitDrain),s._readableState.awaitDrain++,s.pause())}function d(t){debug("onerror",t),u(),e.removeListener("error",d),0===EE.listenerCount(e,"error")&&e.emit("error",t)}function o(){e.removeListener("finish",l),u()}function l(){debug("onfinish"),e.removeListener("close",o),u()}function u(){debug("unpipe"),s.unpipe(e)}var s=this,h=this._readableState;switch(h.pipesCount){case 0:h.pipes=e;break;case 1:h.pipes=[h.pipes,e];break;default:h.pipes.push(e)}h.pipesCount+=1,debug("pipe count=%d opts=%j",h.pipesCount,t);var f=(!t||t.end!==!1)&&e!==process.stdout&&e!==process.stderr,c=f?n:a;h.endEmitted?processNextTick(c):s.once("end",c),e.on("unpipe",r);var b=pipeOnDrain(s);return e.on("drain",b),s.on("data",i),e._events&&e._events.error?isArray(e._events.error)?e._events.error.unshift(d):e._events.error=[d,e._events.error]:e.on("error",d),e.once("close",o),e.once("finish",l),e.emit("pipe",s),h.flowing||(debug("pipe resume"),s.resume()),e},Readable.prototype.unpipe=function(e){var t=this._readableState;if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes?this:(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this),this);if(!e){var r=t.pipes,n=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var a=0;n>a;a++)r[a].emit("unpipe",this);return this}var a=indexOf(t.pipes,e);return-1===a?this:(t.pipes.splice(a,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this),this)},Readable.prototype.on=function(e,t){var r=Stream.prototype.on.call(this,e,t);if("data"===e&&!1!==this._readableState.flowing&&this.resume(),"readable"===e&&this.readable){var n=this._readableState;n.readableListening||(n.readableListening=!0,n.emittedReadable=!1,n.needReadable=!0,n.reading?n.length&&emitReadable(this,n):processNextTick(nReadingNextTick,this))}return r},Readable.prototype.addListener=Readable.prototype.on,Readable.prototype.resume=function(){var e=this._readableState;return e.flowing||(debug("resume"),e.flowing=!0,resume(this,e)),this},Readable.prototype.pause=function(){return debug("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(debug("pause"),this._readableState.flowing=!1,this.emit("pause")),this},Readable.prototype.wrap=function(e){var t=this._readableState,r=!1,n=this;e.on("end",function(){if(debug("wrapped end"),t.decoder&&!t.ended){var e=t.decoder.end();e&&e.length&&n.push(e)}n.push(null)}),e.on("data",function(a){if(debug("wrapped data"),t.decoder&&(a=t.decoder.write(a)),(!t.objectMode||null!==a&&void 0!==a)&&(t.objectMode||a&&a.length)){var i=n.push(a);i||(r=!0,e.pause())}});for(var a in e)void 0===this[a]&&"function"==typeof e[a]&&(this[a]=function(t){return function(){return e[t].apply(e,arguments)}}(a));var i=["error","close","destroy","pause","resume"];return forEach(i,function(t){e.on(t,n.emit.bind(n,t))}),n._read=function(t){debug("wrapped _read",t),r&&(r=!1,e.resume())},n},Readable._fromList=fromList;

}).call(this,require('_process'))

},{"./_stream_duplex":21,"_process":15,"buffer":4,"core-util-is":26,"events":8,"inherits":10,"isarray":12,"process-nextick-args":27,"stream":33,"string_decoder/":43,"util":3}],24:[function(require,module,exports){
"use strict";function TransformState(r){this.afterTransform=function(t,n){return afterTransform(r,t,n)},this.needTransform=!1,this.transforming=!1,this.writecb=null,this.writechunk=null}function afterTransform(r,t,n){var e=r._transformState;e.transforming=!1;var a=e.writecb;if(!a)return r.emit("error",new Error("no writecb in Transform class"));e.writechunk=null,e.writecb=null,null!==n&&void 0!==n&&r.push(n),a&&a(t);var i=r._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&r._read(i.highWaterMark)}function Transform(r){if(!(this instanceof Transform))return new Transform(r);Duplex.call(this,r),this._transformState=new TransformState(this);var t=this;this._readableState.needReadable=!0,this._readableState.sync=!1,r&&("function"==typeof r.transform&&(this._transform=r.transform),"function"==typeof r.flush&&(this._flush=r.flush)),this.once("prefinish",function(){"function"==typeof this._flush?this._flush(function(r){done(t,r)}):done(t)})}function done(r,t){if(t)return r.emit("error",t);var n=r._writableState,e=r._transformState;if(n.length)throw new Error("calling transform done when ws.length != 0");if(e.transforming)throw new Error("calling transform done when still transforming");return r.push(null)}module.exports=Transform;var Duplex=require("./_stream_duplex"),util=require("core-util-is");util.inherits=require("inherits"),util.inherits(Transform,Duplex),Transform.prototype.push=function(r,t){return this._transformState.needTransform=!1,Duplex.prototype.push.call(this,r,t)},Transform.prototype._transform=function(r,t,n){throw new Error("not implemented")},Transform.prototype._write=function(r,t,n){var e=this._transformState;if(e.writecb=n,e.writechunk=r,e.writeencoding=t,!e.transforming){var a=this._readableState;(e.needTransform||a.needReadable||a.length<a.highWaterMark)&&this._read(a.highWaterMark)}},Transform.prototype._read=function(r){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0};

},{"./_stream_duplex":21,"core-util-is":26,"inherits":10}],25:[function(require,module,exports){
"use strict";function nop(){}function WriteReq(e,t,r){this.chunk=e,this.encoding=t,this.callback=r,this.next=null}function WritableState(e,t){var r=require("./_stream_duplex");e=e||{},this.objectMode=!!e.objectMode,t instanceof r&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var i=e.highWaterMark,n=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n,this.highWaterMark=~~this.highWaterMark,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1;var f=e.decodeStrings===!1;this.decodeStrings=!f,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){onwrite(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1}function Writable(e){var t=require("./_stream_duplex");return this instanceof Writable||this instanceof t?(this._writableState=new WritableState(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev)),void Stream.call(this)):new Writable(e)}function writeAfterEnd(e,t){var r=new Error("write after end");e.emit("error",r),processNextTick(t,r)}function validChunk(e,t,r,i){var n=!0;if(!Buffer.isBuffer(r)&&"string"!=typeof r&&null!==r&&void 0!==r&&!t.objectMode){var f=new TypeError("Invalid non-string/buffer chunk");e.emit("error",f),processNextTick(i,f),n=!1}return n}function decodeChunk(e,t,r){return e.objectMode||e.decodeStrings===!1||"string"!=typeof t||(t=new Buffer(t,r)),t}function writeOrBuffer(e,t,r,i,n){r=decodeChunk(t,r,i),Buffer.isBuffer(r)&&(i="buffer");var f=t.objectMode?1:r.length;t.length+=f;var o=t.length<t.highWaterMark;if(o||(t.needDrain=!0),t.writing||t.corked){var u=t.lastBufferedRequest;t.lastBufferedRequest=new WriteReq(r,i,n),u?u.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest}else doWrite(e,t,!1,f,r,i,n);return o}function doWrite(e,t,r,i,n,f,o){t.writelen=i,t.writecb=o,t.writing=!0,t.sync=!0,r?e._writev(n,t.onwrite):e._write(n,f,t.onwrite),t.sync=!1}function onwriteError(e,t,r,i,n){--t.pendingcb,r?processNextTick(n,i):n(i),e._writableState.errorEmitted=!0,e.emit("error",i)}function onwriteStateUpdate(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}function onwrite(e,t){var r=e._writableState,i=r.sync,n=r.writecb;if(onwriteStateUpdate(r),t)onwriteError(e,r,i,t,n);else{var f=needFinish(r);f||r.corked||r.bufferProcessing||!r.bufferedRequest||clearBuffer(e,r),i?processNextTick(afterWrite,e,r,f,n):afterWrite(e,r,f,n)}}function afterWrite(e,t,r,i){r||onwriteDrain(e,t),t.pendingcb--,i(),finishMaybe(e,t)}function onwriteDrain(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}function clearBuffer(e,t){t.bufferProcessing=!0;var r=t.bufferedRequest;if(e._writev&&r&&r.next){for(var i=[],n=[];r;)n.push(r.callback),i.push(r),r=r.next;t.pendingcb++,t.lastBufferedRequest=null,doWrite(e,t,!0,t.length,i,"",function(e){for(var r=0;r<n.length;r++)t.pendingcb--,n[r](e)})}else{for(;r;){var f=r.chunk,o=r.encoding,u=r.callback,s=t.objectMode?1:f.length;if(doWrite(e,t,!1,s,f,o,u),r=r.next,t.writing)break}null===r&&(t.lastBufferedRequest=null)}t.bufferedRequest=r,t.bufferProcessing=!1}function needFinish(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function prefinish(e,t){t.prefinished||(t.prefinished=!0,e.emit("prefinish"))}function finishMaybe(e,t){var r=needFinish(t);return r&&(0===t.pendingcb?(prefinish(e,t),t.finished=!0,e.emit("finish")):prefinish(e,t)),r}function endWritable(e,t,r){t.ending=!0,finishMaybe(e,t),r&&(t.finished?processNextTick(r):e.once("finish",r)),t.ended=!0}module.exports=Writable;var processNextTick=require("process-nextick-args"),Buffer=require("buffer").Buffer;Writable.WritableState=WritableState;var util=require("core-util-is");util.inherits=require("inherits");var Stream;!function(){try{Stream=require("stream")}catch(e){}finally{Stream||(Stream=require("events").EventEmitter)}}();var Buffer=require("buffer").Buffer;util.inherits(Writable,Stream),WritableState.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(WritableState.prototype,"buffer",{get:require("util-deprecate")(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer() instead.")})}catch(e){}}(),Writable.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe. Not readable."))},Writable.prototype.write=function(e,t,r){var i=this._writableState,n=!1;return"function"==typeof t&&(r=t,t=null),Buffer.isBuffer(e)?t="buffer":t||(t=i.defaultEncoding),"function"!=typeof r&&(r=nop),i.ended?writeAfterEnd(this,r):validChunk(this,i,e,r)&&(i.pendingcb++,n=writeOrBuffer(this,i,e,t,r)),n},Writable.prototype.cork=function(){var e=this._writableState;e.corked++},Writable.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||clearBuffer(this,e))},Writable.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);this._writableState.defaultEncoding=e},Writable.prototype._write=function(e,t,r){r(new Error("not implemented"))},Writable.prototype._writev=null,Writable.prototype.end=function(e,t,r){var i=this._writableState;"function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!==e&&void 0!==e&&this.write(e,t),i.corked&&(i.corked=1,this.uncork()),i.ending||i.finished||endWritable(this,i,r)};

},{"./_stream_duplex":21,"buffer":4,"core-util-is":26,"events":8,"inherits":10,"process-nextick-args":27,"stream":33,"util-deprecate":28}],26:[function(require,module,exports){
(function (Buffer){
function isArray(e){return Array.isArray(e)}function isBoolean(e){return"boolean"==typeof e}function isNull(e){return null===e}function isNullOrUndefined(e){return null==e}function isNumber(e){return"number"==typeof e}function isString(e){return"string"==typeof e}function isSymbol(e){return"symbol"==typeof e}function isUndefined(e){return void 0===e}function isRegExp(e){return isObject(e)&&"[object RegExp]"===objectToString(e)}function isObject(e){return"object"==typeof e&&null!==e}function isDate(e){return isObject(e)&&"[object Date]"===objectToString(e)}function isError(e){return isObject(e)&&("[object Error]"===objectToString(e)||e instanceof Error)}function isFunction(e){return"function"==typeof e}function isPrimitive(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||"undefined"==typeof e}function isBuffer(e){return Buffer.isBuffer(e)}function objectToString(e){return Object.prototype.toString.call(e)}exports.isArray=isArray,exports.isBoolean=isBoolean,exports.isNull=isNull,exports.isNullOrUndefined=isNullOrUndefined,exports.isNumber=isNumber,exports.isString=isString,exports.isSymbol=isSymbol,exports.isUndefined=isUndefined,exports.isRegExp=isRegExp,exports.isObject=isObject,exports.isDate=isDate,exports.isError=isError,exports.isFunction=isFunction,exports.isPrimitive=isPrimitive,exports.isBuffer=isBuffer;

}).call(this,{"isBuffer":require("/home/amar/misc/Dropbox/projects/home/filewi.re/node_modules/watchify/node_modules/browserify/node_modules/insert-module-globals/node_modules/is-buffer/index.js")})

},{"/home/amar/misc/Dropbox/projects/home/filewi.re/node_modules/watchify/node_modules/browserify/node_modules/insert-module-globals/node_modules/is-buffer/index.js":11}],27:[function(require,module,exports){
(function (process){
"use strict";function nextTick(n){for(var e=new Array(arguments.length-1),t=0;t<e.length;)e[t++]=arguments[t];process.nextTick(function(){n.apply(null,e)})}module.exports=nextTick;

}).call(this,require('_process'))

},{"_process":15}],28:[function(require,module,exports){
(function (global){
function deprecate(r,e){function o(){if(!n){if(config("throwDeprecation"))throw new Error(e);config("traceDeprecation")?console.trace(e):console.warn(e),n=!0}return r.apply(this,arguments)}if(config("noDeprecation"))return r;var n=!1;return o}function config(r){if(!global.localStorage)return!1;var e=global.localStorage[r];return null==e?!1:"true"===String(e).toLowerCase()}module.exports=deprecate;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],29:[function(require,module,exports){
module.exports=require("./lib/_stream_passthrough.js");

},{"./lib/_stream_passthrough.js":22}],30:[function(require,module,exports){
var Stream=function(){try{return require("stream")}catch(r){}}();exports=module.exports=require("./lib/_stream_readable.js"),exports.Stream=Stream||exports,exports.Readable=exports,exports.Writable=require("./lib/_stream_writable.js"),exports.Duplex=require("./lib/_stream_duplex.js"),exports.Transform=require("./lib/_stream_transform.js"),exports.PassThrough=require("./lib/_stream_passthrough.js");

},{"./lib/_stream_duplex.js":21,"./lib/_stream_passthrough.js":22,"./lib/_stream_readable.js":23,"./lib/_stream_transform.js":24,"./lib/_stream_writable.js":25,"stream":33}],31:[function(require,module,exports){
module.exports=require("./lib/_stream_transform.js");

},{"./lib/_stream_transform.js":24}],32:[function(require,module,exports){
module.exports=require("./lib/_stream_writable.js");

},{"./lib/_stream_writable.js":25}],33:[function(require,module,exports){
function Stream(){EE.call(this)}module.exports=Stream;var EE=require("events").EventEmitter,inherits=require("inherits");inherits(Stream,EE),Stream.Readable=require("readable-stream/readable.js"),Stream.Writable=require("readable-stream/writable.js"),Stream.Duplex=require("readable-stream/duplex.js"),Stream.Transform=require("readable-stream/transform.js"),Stream.PassThrough=require("readable-stream/passthrough.js"),Stream.Stream=Stream,Stream.prototype.pipe=function(e,r){function t(r){e.writable&&!1===e.write(r)&&m.pause&&m.pause()}function n(){m.readable&&m.resume&&m.resume()}function a(){u||(u=!0,e.end())}function o(){u||(u=!0,"function"==typeof e.destroy&&e.destroy())}function i(e){if(s(),0===EE.listenerCount(this,"error"))throw e}function s(){m.removeListener("data",t),e.removeListener("drain",n),m.removeListener("end",a),m.removeListener("close",o),m.removeListener("error",i),e.removeListener("error",i),m.removeListener("end",s),m.removeListener("close",s),e.removeListener("close",s)}var m=this;m.on("data",t),e.on("drain",n),e._isStdio||r&&r.end===!1||(m.on("end",a),m.on("close",o));var u=!1;return m.on("error",i),e.on("error",i),m.on("end",s),m.on("close",s),e.on("close",s),e.emit("pipe",m),e};

},{"events":8,"inherits":10,"readable-stream/duplex.js":20,"readable-stream/passthrough.js":29,"readable-stream/readable.js":30,"readable-stream/transform.js":31,"readable-stream/writable.js":32}],34:[function(require,module,exports){
var ClientRequest=require("./lib/request"),extend=require("xtend"),statusCodes=require("builtin-status-codes"),url=require("url"),http=exports;http.request=function(t,e){t="string"==typeof t?url.parse(t):extend(t);var r=t.protocol||"",s=t.hostname||t.host,n=t.port,u=t.path||"/";s&&-1!==s.indexOf(":")&&(s="["+s+"]"),t.url=(s?r+"//"+s:"")+(n?":"+n:"")+u,t.method=(t.method||"GET").toUpperCase(),t.headers=t.headers||{};var C=new ClientRequest(t);return e&&C.on("response",e),C},http.get=function(t,e){var r=http.request(t,e);return r.end(),r},http.Agent=function(){},http.Agent.defaultMaxSockets=4,http.STATUS_CODES=statusCodes,http.METHODS=["CHECKOUT","CONNECT","COPY","DELETE","GET","HEAD","LOCK","M-SEARCH","MERGE","MKACTIVITY","MKCOL","MOVE","NOTIFY","OPTIONS","PATCH","POST","PROPFIND","PROPPATCH","PURGE","PUT","REPORT","SEARCH","SUBSCRIBE","TRACE","UNLOCK","UNSUBSCRIBE"];

},{"./lib/request":36,"builtin-status-codes":38,"url":44,"xtend":45}],35:[function(require,module,exports){
(function (global){
function checkTypeSupport(e){try{return xhr.responseType=e,xhr.responseType===e}catch(r){}return!1}function isFunction(e){return"function"==typeof e}exports.fetch=isFunction(global.fetch)&&isFunction(global.ReadableByteStream),exports.blobConstructor=!1;try{new Blob([new ArrayBuffer(1)]),exports.blobConstructor=!0}catch(e){}var xhr=new global.XMLHttpRequest;xhr.open("GET",global.location.host?"/":"https://example.com");var haveArrayBuffer="undefined"!=typeof global.ArrayBuffer,haveSlice=haveArrayBuffer&&isFunction(global.ArrayBuffer.prototype.slice);exports.arraybuffer=haveArrayBuffer&&checkTypeSupport("arraybuffer"),exports.msstream=!exports.fetch&&haveSlice&&checkTypeSupport("ms-stream"),exports.mozchunkedarraybuffer=!exports.fetch&&haveArrayBuffer&&checkTypeSupport("moz-chunked-arraybuffer"),exports.overrideMimeType=isFunction(xhr.overrideMimeType),exports.vbArray=isFunction(global.VBArray),xhr=null;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],36:[function(require,module,exports){
(function (process,global,Buffer){
function decideMode(e){return capability.fetch?"fetch":capability.mozchunkedarraybuffer?"moz-chunked-arraybuffer":capability.msstream?"ms-stream":capability.arraybuffer&&e?"arraybuffer":capability.vbArray&&e?"text:vbarray":"text"}function statusValid(e){try{return null!==e.status}catch(t){return!1}}var capability=require("./capability"),foreach=require("foreach"),indexOf=require("indexof"),inherits=require("inherits"),keys=require("object-keys"),response=require("./response"),stream=require("stream"),IncomingMessage=response.IncomingMessage,rStates=response.readyStates,ClientRequest=module.exports=function(e){var t=this;stream.Writable.call(t),t._opts=e,t._body=[],t._headers={},e.auth&&t.setHeader("Authorization","Basic "+new Buffer(e.auth).toString("base64")),foreach(keys(e.headers),function(r){t.setHeader(r,e.headers[r])});var r;if("prefer-streaming"===e.mode)r=!1;else if("allow-wrong-content-type"===e.mode)r=!capability.overrideMimeType;else{if(e.mode&&"default"!==e.mode&&"prefer-fast"!==e.mode)throw new Error("Invalid value for opts.mode");r=!0}t._mode=decideMode(r),t.on("finish",function(){t._onFinish()})};inherits(ClientRequest,stream.Writable),ClientRequest.prototype.setHeader=function(e,t){var r=this,o=e.toLowerCase();-1===indexOf(unsafeHeaders,o)&&(r._headers[o]={name:e,value:t})},ClientRequest.prototype.getHeader=function(e){var t=this;return t._headers[e.toLowerCase()].value},ClientRequest.prototype.removeHeader=function(e){var t=this;delete t._headers[e.toLowerCase()]},ClientRequest.prototype._onFinish=function(){var e=this;if(!e._destroyed){var t,r=e._opts,o=e._headers;if(("POST"===r.method||"PUT"===r.method)&&(t=capability.blobConstructor?new global.Blob(e._body.map(function(e){return e.toArrayBuffer()}),{type:(o["content-type"]||{}).value||""}):Buffer.concat(e._body).toString()),"fetch"===e._mode){var n=keys(o).map(function(e){return[o[e].name,o[e].value]});global.fetch(e._opts.url,{method:e._opts.method,headers:n,body:t,mode:"cors",credentials:r.withCredentials?"include":"same-origin"}).then(function(t){e._fetchResponse=t,e._connect()}).then(void 0,function(t){e.emit("error",t)})}else{var s=e._xhr=new global.XMLHttpRequest;try{s.open(e._opts.method,e._opts.url,!0)}catch(i){return void process.nextTick(function(){e.emit("error",i)})}"responseType"in s&&(s.responseType=e._mode.split(":")[0]),"withCredentials"in s&&(s.withCredentials=!!r.withCredentials),"text"===e._mode&&"overrideMimeType"in s&&s.overrideMimeType("text/plain; charset=x-user-defined"),foreach(keys(o),function(e){s.setRequestHeader(o[e].name,o[e].value)}),e._response=null,s.onreadystatechange=function(){switch(s.readyState){case rStates.LOADING:case rStates.DONE:e._onXHRProgress()}},"moz-chunked-arraybuffer"===e._mode&&(s.onprogress=function(){e._onXHRProgress()}),s.onerror=function(){e._destroyed||e.emit("error",new Error("XHR error"))};try{s.send(t)}catch(i){return void process.nextTick(function(){e.emit("error",i)})}}}},ClientRequest.prototype._onXHRProgress=function(){var e=this;statusValid(e._xhr)&&!e._destroyed&&(e._response||e._connect(),e._response._onXHRProgress())},ClientRequest.prototype._connect=function(){var e=this;e._destroyed||(e._response=new IncomingMessage(e._xhr,e._fetchResponse,e._mode),e.emit("response",e._response))},ClientRequest.prototype._write=function(e,t,r){var o=this;o._body.push(e),r()},ClientRequest.prototype.abort=ClientRequest.prototype.destroy=function(){var e=this;e._destroyed=!0,e._response&&(e._response._destroyed=!0),e._xhr&&e._xhr.abort()},ClientRequest.prototype.end=function(e,t,r){var o=this;"function"==typeof e&&(r=e,e=void 0),stream.Writable.prototype.end.call(o,e,t,r)},ClientRequest.prototype.flushHeaders=function(){},ClientRequest.prototype.setTimeout=function(){},ClientRequest.prototype.setNoDelay=function(){},ClientRequest.prototype.setSocketKeepAlive=function(){};var unsafeHeaders=["accept-charset","accept-encoding","access-control-request-headers","access-control-request-method","connection","content-length","cookie","cookie2","date","dnt","expect","host","keep-alive","origin","referer","te","trailer","transfer-encoding","upgrade","user-agent","via"];

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)

},{"./capability":35,"./response":37,"_process":15,"buffer":4,"foreach":39,"indexof":40,"inherits":10,"object-keys":41,"stream":33}],37:[function(require,module,exports){
(function (process,global,Buffer){
var capability=require("./capability"),foreach=require("foreach"),inherits=require("inherits"),stream=require("stream"),rStates=exports.readyStates={UNSENT:0,OPENED:1,HEADERS_RECEIVED:2,LOADING:3,DONE:4},IncomingMessage=exports.IncomingMessage=function(e,r,a){function s(){u.read().then(function(e){if(!t._destroyed){if(e.done)return void t.push(null);t.push(new Buffer(e.value)),s()}})}var t=this;if(stream.Readable.call(t),t._mode=a,t.headers={},t.rawHeaders=[],t.trailers={},t.rawTrailers=[],t.on("end",function(){process.nextTick(function(){t.emit("close")})}),"fetch"===a){t._fetchResponse=r,t.statusCode=r.status,t.statusMessage=r.statusText;for(var n,o,i=r.headers[Symbol.iterator]();n=(o=i.next()).value,!o.done;)t.headers[n[0].toLowerCase()]=n[1],t.rawHeaders.push(n[0],n[1]);var u=r.body.getReader();s()}else{t._xhr=e,t._pos=0,t.statusCode=e.status,t.statusMessage=e.statusText;var h=e.getAllResponseHeaders().split(/\r?\n/);if(foreach(h,function(e){var r=e.match(/^([^:]+):\s*(.*)/);if(r){var a=r[1].toLowerCase();void 0!==t.headers[a]?t.headers[a]+=", "+r[2]:t.headers[a]=r[2],t.rawHeaders.push(r[1],r[2])}}),t._charset="x-user-defined",!capability.overrideMimeType){var f=t.rawHeaders["mime-type"];if(f){var c=f.match(/;\s*charset=([^;])(;|$)/);c&&(t._charset=c[1].toLowerCase())}t._charset||(t._charset="utf-8")}}};inherits(IncomingMessage,stream.Readable),IncomingMessage.prototype._read=function(){},IncomingMessage.prototype._onXHRProgress=function(){var e=this,r=e._xhr,a=null;switch(e._mode){case"text:vbarray":if(r.readyState!==rStates.DONE)break;try{a=new global.VBArray(r.responseBody).toArray()}catch(s){}if(null!==a){e.push(new Buffer(a));break}case"text":try{a=r.responseText}catch(s){e._mode="text:vbarray";break}if(a.length>e._pos){var t=a.substr(e._pos);if("x-user-defined"===e._charset){for(var n=new Buffer(t.length),o=0;o<t.length;o++)n[o]=255&t.charCodeAt(o);e.push(n)}else e.push(t,e._charset);e._pos=a.length}break;case"arraybuffer":if(r.readyState!==rStates.DONE)break;a=r.response,e.push(new Buffer(new Uint8Array(a)));break;case"moz-chunked-arraybuffer":if(a=r.response,r.readyState!==rStates.LOADING||!a)break;e.push(new Buffer(new Uint8Array(a)));break;case"ms-stream":if(a=r.response,r.readyState!==rStates.LOADING)break;var i=new global.MSStreamReader;i.onprogress=function(){i.result.byteLength>e._pos&&(e.push(new Buffer(new Uint8Array(i.result.slice(e._pos)))),e._pos=i.result.byteLength)},i.onload=function(){e.push(null)},i.readAsArrayBuffer(a)}e._xhr.readyState===rStates.DONE&&"ms-stream"!==e._mode&&e.push(null)};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)

},{"./capability":35,"_process":15,"buffer":4,"foreach":39,"inherits":10,"stream":33}],38:[function(require,module,exports){
module.exports={100:"Continue",101:"Switching Protocols",102:"Processing",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",207:"Multi-Status",300:"Multiple Choices",301:"Moved Permanently",302:"Moved Temporarily",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",308:"Permanent Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Time-out",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Request Entity Too Large",414:"Request-URI Too Large",415:"Unsupported Media Type",416:"Requested Range Not Satisfiable",417:"Expectation Failed",418:"I'm a teapot",422:"Unprocessable Entity",423:"Locked",424:"Failed Dependency",425:"Unordered Collection",426:"Upgrade Required",428:"Precondition Required",429:"Too Many Requests",431:"Request Header Fields Too Large",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Time-out",505:"HTTP Version Not Supported",506:"Variant Also Negotiates",507:"Insufficient Storage",509:"Bandwidth Limit Exceeded",510:"Not Extended",511:"Network Authentication Required"};

},{}],39:[function(require,module,exports){
var hasOwn=Object.prototype.hasOwnProperty,toString=Object.prototype.toString;module.exports=function(t,r,o){if("[object Function]"!==toString.call(r))throw new TypeError("iterator must be a function");var e=t.length;if(e===+e)for(var n=0;e>n;n++)r.call(o,t[n],n,t);else for(var a in t)hasOwn.call(t,a)&&r.call(o,t[a],a,t)};

},{}],40:[function(require,module,exports){
var indexOf=[].indexOf;module.exports=function(e,n){if(indexOf)return e.indexOf(n);for(var r=0;r<e.length;++r)if(e[r]===n)return r;return-1};

},{}],41:[function(require,module,exports){
"use strict";var has=Object.prototype.hasOwnProperty,toStr=Object.prototype.toString,slice=Array.prototype.slice,isArgs=require("./isArguments"),hasDontEnumBug=!{toString:null}.propertyIsEnumerable("toString"),hasProtoEnumBug=function(){}.propertyIsEnumerable("prototype"),dontEnums=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],equalsConstructorPrototype=function(t){var o=t.constructor;return o&&o.prototype===t},blacklistedKeys={$window:!0,$console:!0,$parent:!0,$self:!0,$frames:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0},hasAutomationEqualityBug=function(){if("undefined"==typeof window)return!1;for(var t in window)if(!blacklistedKeys["$"+t]&&has.call(window,t)&&null!==window[t]&&"object"==typeof window[t])try{equalsConstructorPrototype(window[t])}catch(o){return!0}return!1}(),equalsConstructorPrototypeIfNotBuggy=function(t){if("undefined"==typeof window&&!hasAutomationEqualityBug)return equalsConstructorPrototype(t);try{return equalsConstructorPrototype(t)}catch(o){return!1}},keysShim=function(t){var o=null!==t&&"object"==typeof t,r="[object Function]"===toStr.call(t),e=isArgs(t),n=o&&"[object String]"===toStr.call(t),s=[];if(!o&&!r&&!e)throw new TypeError("Object.keys called on a non-object");var u=hasProtoEnumBug&&r;if(n&&t.length>0&&!has.call(t,0))for(var i=0;i<t.length;++i)s.push(String(i));if(e&&t.length>0)for(var a=0;a<t.length;++a)s.push(String(a));else for(var c in t)u&&"prototype"===c||!has.call(t,c)||s.push(String(c));if(hasDontEnumBug)for(var l=equalsConstructorPrototypeIfNotBuggy(t),y=0;y<dontEnums.length;++y)l&&"constructor"===dontEnums[y]||!has.call(t,dontEnums[y])||s.push(dontEnums[y]);return s};keysShim.shim=function(){if(Object.keys){var t=function(){return 2===(Object.keys(arguments)||"").length}(1,2);if(!t){var o=Object.keys;Object.keys=function(t){return o(isArgs(t)?slice.call(t):t)}}}else Object.keys=keysShim;return Object.keys||keysShim},module.exports=keysShim;

},{"./isArguments":42}],42:[function(require,module,exports){
"use strict";var toStr=Object.prototype.toString;module.exports=function(t){var e=toStr.call(t),o="[object Arguments]"===e;return o||(o="[object Array]"!==e&&null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Function]"===toStr.call(t.callee)),o};

},{}],43:[function(require,module,exports){
function assertEncoding(e){if(e&&!isBufferEncoding(e))throw new Error("Unknown encoding: "+e)}function passThroughWrite(e){return e.toString(this.encoding)}function utf16DetectIncompleteChar(e){this.charReceived=e.length%2,this.charLength=this.charReceived?2:0}function base64DetectIncompleteChar(e){this.charReceived=e.length%3,this.charLength=this.charReceived?3:0}var Buffer=require("buffer").Buffer,isBufferEncoding=Buffer.isEncoding||function(e){switch(e&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}},StringDecoder=exports.StringDecoder=function(e){switch(this.encoding=(e||"utf8").toLowerCase().replace(/[-_]/,""),assertEncoding(e),this.encoding){case"utf8":this.surrogateSize=3;break;case"ucs2":case"utf16le":this.surrogateSize=2,this.detectIncompleteChar=utf16DetectIncompleteChar;break;case"base64":this.surrogateSize=3,this.detectIncompleteChar=base64DetectIncompleteChar;break;default:return void(this.write=passThroughWrite)}this.charBuffer=new Buffer(6),this.charReceived=0,this.charLength=0};StringDecoder.prototype.write=function(e){for(var t="";this.charLength;){var r=e.length>=this.charLength-this.charReceived?this.charLength-this.charReceived:e.length;if(e.copy(this.charBuffer,this.charReceived,0,r),this.charReceived+=r,this.charReceived<this.charLength)return"";e=e.slice(r,e.length),t=this.charBuffer.slice(0,this.charLength).toString(this.encoding);var h=t.charCodeAt(t.length-1);if(!(h>=55296&&56319>=h)){if(this.charReceived=this.charLength=0,0===e.length)return t;break}this.charLength+=this.surrogateSize,t=""}this.detectIncompleteChar(e);var i=e.length;this.charLength&&(e.copy(this.charBuffer,0,e.length-this.charReceived,i),i-=this.charReceived),t+=e.toString(this.encoding,0,i);var i=t.length-1,h=t.charCodeAt(i);if(h>=55296&&56319>=h){var c=this.surrogateSize;return this.charLength+=c,this.charReceived+=c,this.charBuffer.copy(this.charBuffer,c,0,c),e.copy(this.charBuffer,0,0,c),t.substring(0,i)}return t},StringDecoder.prototype.detectIncompleteChar=function(e){for(var t=e.length>=3?3:e.length;t>0;t--){var r=e[e.length-t];if(1==t&&r>>5==6){this.charLength=2;break}if(2>=t&&r>>4==14){this.charLength=3;break}if(3>=t&&r>>3==30){this.charLength=4;break}}this.charReceived=t},StringDecoder.prototype.end=function(e){var t="";if(e&&e.length&&(t=this.write(e)),this.charReceived){var r=this.charReceived,h=this.charBuffer,i=this.encoding;t+=h.slice(0,r).toString(i)}return t};

},{"buffer":4}],44:[function(require,module,exports){
function Url(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}function urlParse(t,s,e){if(t&&isObject(t)&&t instanceof Url)return t;var h=new Url;return h.parse(t,s,e),h}function urlFormat(t){return isString(t)&&(t=urlParse(t)),t instanceof Url?t.format():Url.prototype.format.call(t)}function urlResolve(t,s){return urlParse(t,!1,!0).resolve(s)}function urlResolveObject(t,s){return t?urlParse(t,!1,!0).resolveObject(s):s}function isString(t){return"string"==typeof t}function isObject(t){return"object"==typeof t&&null!==t}function isNull(t){return null===t}function isNullOrUndefined(t){return null==t}var punycode=require("punycode");exports.parse=urlParse,exports.resolve=urlResolve,exports.resolveObject=urlResolveObject,exports.format=urlFormat,exports.Url=Url;var protocolPattern=/^([a-z0-9.+-]+:)/i,portPattern=/:[0-9]*$/,delims=["<",">",'"',"`"," ","\r","\n","	"],unwise=["{","}","|","\\","^","`"].concat(delims),autoEscape=["'"].concat(unwise),nonHostChars=["%","/","?",";","#"].concat(autoEscape),hostEndingChars=["/","?","#"],hostnameMaxLen=255,hostnamePartPattern=/^[a-z0-9A-Z_-]{0,63}$/,hostnamePartStart=/^([a-z0-9A-Z_-]{0,63})(.*)$/,unsafeProtocol={javascript:!0,"javascript:":!0},hostlessProtocol={javascript:!0,"javascript:":!0},slashedProtocol={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},querystring=require("querystring");Url.prototype.parse=function(t,s,e){if(!isString(t))throw new TypeError("Parameter 'url' must be a string, not "+typeof t);var h=t;h=h.trim();var r=protocolPattern.exec(h);if(r){r=r[0];var o=r.toLowerCase();this.protocol=o,h=h.substr(r.length)}if(e||r||h.match(/^\/\/[^@\/]+@[^@\/]+/)){var a="//"===h.substr(0,2);!a||r&&hostlessProtocol[r]||(h=h.substr(2),this.slashes=!0)}if(!hostlessProtocol[r]&&(a||r&&!slashedProtocol[r])){for(var n=-1,i=0;i<hostEndingChars.length;i++){var l=h.indexOf(hostEndingChars[i]);-1!==l&&(-1===n||n>l)&&(n=l)}var c,u;u=-1===n?h.lastIndexOf("@"):h.lastIndexOf("@",n),-1!==u&&(c=h.slice(0,u),h=h.slice(u+1),this.auth=decodeURIComponent(c)),n=-1;for(var i=0;i<nonHostChars.length;i++){var l=h.indexOf(nonHostChars[i]);-1!==l&&(-1===n||n>l)&&(n=l)}-1===n&&(n=h.length),this.host=h.slice(0,n),h=h.slice(n),this.parseHost(),this.hostname=this.hostname||"";var p="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!p)for(var f=this.hostname.split(/\./),i=0,m=f.length;m>i;i++){var v=f[i];if(v&&!v.match(hostnamePartPattern)){for(var g="",y=0,d=v.length;d>y;y++)g+=v.charCodeAt(y)>127?"x":v[y];if(!g.match(hostnamePartPattern)){var P=f.slice(0,i),b=f.slice(i+1),j=v.match(hostnamePartStart);j&&(P.push(j[1]),b.unshift(j[2])),b.length&&(h="/"+b.join(".")+h),this.hostname=P.join(".");break}}}if(this.hostname.length>hostnameMaxLen?this.hostname="":this.hostname=this.hostname.toLowerCase(),!p){for(var O=this.hostname.split("."),q=[],i=0;i<O.length;++i){var x=O[i];q.push(x.match(/[^A-Za-z0-9_-]/)?"xn--"+punycode.encode(x):x)}this.hostname=q.join(".")}var U=this.port?":"+this.port:"",C=this.hostname||"";this.host=C+U,this.href+=this.host,p&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==h[0]&&(h="/"+h))}if(!unsafeProtocol[o])for(var i=0,m=autoEscape.length;m>i;i++){var A=autoEscape[i],E=encodeURIComponent(A);E===A&&(E=escape(A)),h=h.split(A).join(E)}var w=h.indexOf("#");-1!==w&&(this.hash=h.substr(w),h=h.slice(0,w));var R=h.indexOf("?");if(-1!==R?(this.search=h.substr(R),this.query=h.substr(R+1),s&&(this.query=querystring.parse(this.query)),h=h.slice(0,R)):s&&(this.search="",this.query={}),h&&(this.pathname=h),slashedProtocol[o]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){var U=this.pathname||"",x=this.search||"";this.path=U+x}return this.href=this.format(),this},Url.prototype.format=function(){var t=this.auth||"";t&&(t=encodeURIComponent(t),t=t.replace(/%3A/i,":"),t+="@");var s=this.protocol||"",e=this.pathname||"",h=this.hash||"",r=!1,o="";this.host?r=t+this.host:this.hostname&&(r=t+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(r+=":"+this.port)),this.query&&isObject(this.query)&&Object.keys(this.query).length&&(o=querystring.stringify(this.query));var a=this.search||o&&"?"+o||"";return s&&":"!==s.substr(-1)&&(s+=":"),this.slashes||(!s||slashedProtocol[s])&&r!==!1?(r="//"+(r||""),e&&"/"!==e.charAt(0)&&(e="/"+e)):r||(r=""),h&&"#"!==h.charAt(0)&&(h="#"+h),a&&"?"!==a.charAt(0)&&(a="?"+a),e=e.replace(/[?#]/g,function(t){return encodeURIComponent(t)}),a=a.replace("#","%23"),s+r+e+a+h},Url.prototype.resolve=function(t){return this.resolveObject(urlParse(t,!1,!0)).format()},Url.prototype.resolveObject=function(t){if(isString(t)){var s=new Url;s.parse(t,!1,!0),t=s}var e=new Url;if(Object.keys(this).forEach(function(t){e[t]=this[t]},this),e.hash=t.hash,""===t.href)return e.href=e.format(),e;if(t.slashes&&!t.protocol)return Object.keys(t).forEach(function(s){"protocol"!==s&&(e[s]=t[s])}),slashedProtocol[e.protocol]&&e.hostname&&!e.pathname&&(e.path=e.pathname="/"),e.href=e.format(),e;if(t.protocol&&t.protocol!==e.protocol){if(!slashedProtocol[t.protocol])return Object.keys(t).forEach(function(s){e[s]=t[s]}),e.href=e.format(),e;if(e.protocol=t.protocol,t.host||hostlessProtocol[t.protocol])e.pathname=t.pathname;else{for(var h=(t.pathname||"").split("/");h.length&&!(t.host=h.shift()););t.host||(t.host=""),t.hostname||(t.hostname=""),""!==h[0]&&h.unshift(""),h.length<2&&h.unshift(""),e.pathname=h.join("/")}if(e.search=t.search,e.query=t.query,e.host=t.host||"",e.auth=t.auth,e.hostname=t.hostname||t.host,e.port=t.port,e.pathname||e.search){var r=e.pathname||"",o=e.search||"";e.path=r+o}return e.slashes=e.slashes||t.slashes,e.href=e.format(),e}var a=e.pathname&&"/"===e.pathname.charAt(0),n=t.host||t.pathname&&"/"===t.pathname.charAt(0),i=n||a||e.host&&t.pathname,l=i,c=e.pathname&&e.pathname.split("/")||[],h=t.pathname&&t.pathname.split("/")||[],u=e.protocol&&!slashedProtocol[e.protocol];if(u&&(e.hostname="",e.port=null,e.host&&(""===c[0]?c[0]=e.host:c.unshift(e.host)),e.host="",t.protocol&&(t.hostname=null,t.port=null,t.host&&(""===h[0]?h[0]=t.host:h.unshift(t.host)),t.host=null),i=i&&(""===h[0]||""===c[0])),n)e.host=t.host||""===t.host?t.host:e.host,e.hostname=t.hostname||""===t.hostname?t.hostname:e.hostname,e.search=t.search,e.query=t.query,c=h;else if(h.length)c||(c=[]),c.pop(),c=c.concat(h),e.search=t.search,e.query=t.query;else if(!isNullOrUndefined(t.search)){if(u){e.hostname=e.host=c.shift();var p=e.host&&e.host.indexOf("@")>0?e.host.split("@"):!1;p&&(e.auth=p.shift(),e.host=e.hostname=p.shift())}return e.search=t.search,e.query=t.query,isNull(e.pathname)&&isNull(e.search)||(e.path=(e.pathname?e.pathname:"")+(e.search?e.search:"")),e.href=e.format(),e}if(!c.length)return e.pathname=null,e.search?e.path="/"+e.search:e.path=null,e.href=e.format(),e;for(var f=c.slice(-1)[0],m=(e.host||t.host)&&("."===f||".."===f)||""===f,v=0,g=c.length;g>=0;g--)f=c[g],"."==f?c.splice(g,1):".."===f?(c.splice(g,1),v++):v&&(c.splice(g,1),v--);if(!i&&!l)for(;v--;v)c.unshift("..");!i||""===c[0]||c[0]&&"/"===c[0].charAt(0)||c.unshift(""),m&&"/"!==c.join("/").substr(-1)&&c.push("");var y=""===c[0]||c[0]&&"/"===c[0].charAt(0);if(u){e.hostname=e.host=y?"":c.length?c.shift():"";var p=e.host&&e.host.indexOf("@")>0?e.host.split("@"):!1;p&&(e.auth=p.shift(),e.host=e.hostname=p.shift())}return i=i||e.host&&c.length,i&&!y&&c.unshift(""),c.length?e.pathname=c.join("/"):(e.pathname=null,e.path=null),isNull(e.pathname)&&isNull(e.search)||(e.path=(e.pathname?e.pathname:"")+(e.search?e.search:"")),e.auth=t.auth||e.auth,e.slashes=e.slashes||t.slashes,e.href=e.format(),e},Url.prototype.parseHost=function(){var t=this.host,s=portPattern.exec(t);s&&(s=s[0],":"!==s&&(this.port=s.substr(1)),t=t.substr(0,t.length-s.length)),t&&(this.hostname=t)};

},{"punycode":16,"querystring":19}],45:[function(require,module,exports){
function extend(){for(var r={},e=0;e<arguments.length;e++){var n=arguments[e];for(var t in n)n.hasOwnProperty(t)&&(r[t]=n[t])}return r}module.exports=extend;

},{}],46:[function(require,module,exports){
(function (process,global,Buffer){
function WebTorrent(e){function r(){t.destroyed||(t.ready=!0,t.emit("ready"))}var t=this;return t instanceof WebTorrent?(e||(e={}),EventEmitter.call(t),debug.enabled||t.setMaxListeners(0),t.destroyed=!1,t.torrentPort=e.torrentPort||0,t.tracker=void 0!==e.tracker?e.tracker:!0,t._rtcConfig=e.rtcConfig,t._wrtc=e.wrtc||global.WRTC,t.torrents=[],t.downloadSpeed=speedometer(),t.uploadSpeed=speedometer(),t.peerId=void 0===e.peerId?new Buffer("-WW"+VERSION_STR+"-"+hat(48),"utf8"):"string"==typeof e.peerId?new Buffer(e.peerId,"hex"):e.peerId,t.peerIdHex=t.peerId.toString("hex"),t.nodeId=void 0===e.nodeId?new Buffer(hat(160),"hex"):"string"==typeof e.nodeId?new Buffer(e.nodeId,"hex"):e.nodeId,t.nodeIdHex=t.nodeId.toString("hex"),e.dht!==!1&&"function"==typeof DHT&&(t.dht=new DHT(extend({nodeId:t.nodeId},e.dht)),t.dht.listen(e.dhtPort)),debug("new webtorrent (peerId %s, nodeId %s)",t.peerIdHex,t.nodeIdHex),void("function"==typeof loadIPSet?loadIPSet(e.blocklist,{headers:{"user-agent":"WebTorrent/"+VERSION+" (http://webtorrent.io)"}},function(e,n){return e?t.error("Failed to load blocklist: "+e.message):(t.blocked=n,void r())}):process.nextTick(r))):new WebTorrent(e)}module.exports=WebTorrent;var createTorrent=require("create-torrent"),debug=require("debug")("webtorrent"),DHT=require("bittorrent-dht/client"),EventEmitter=require("events").EventEmitter,extend=require("xtend"),hat=require("hat"),inherits=require("inherits"),loadIPSet=require("load-ip-set"),parallel=require("run-parallel"),parseTorrent=require("parse-torrent"),speedometer=require("speedometer"),zeroFill=require("zero-fill"),path=require("path"),Torrent=require("./lib/torrent");inherits(WebTorrent,EventEmitter);var VERSION=require("./package.json").version,VERSION_STR=VERSION.match(/([0-9]+)/g).slice(0,2).map(zeroFill(2)).join("");Object.defineProperty(WebTorrent.prototype,"ratio",{get:function(){var e=this,r=e.torrents.reduce(function(e,r){return e+r.uploaded},0),t=e.torrents.reduce(function(e,r){return e+r.downloaded},0)||1;return r/t}}),WebTorrent.prototype.get=function(e){var r=this;if(e instanceof Torrent)return e;var t;try{t=parseTorrent(e)}catch(n){}if(!t)return null;if(!t.infoHash)throw new Error("Invalid torrent identifier");for(var o=0,d=r.torrents.length;d>o;o++){var i=r.torrents[o];if(i.infoHash===t.infoHash)return i}return null},WebTorrent.prototype.add=WebTorrent.prototype.download=function(e,r,t){function n(){debug("on torrent %s",d.infoHash),"function"==typeof t&&t(d)}var o=this;if(o.destroyed)throw new Error("client is destroyed");if("function"==typeof r)return o.add(e,null,r);debug("add"),r=r?extend({},r):{},r.client=o;var d=o.get(e);return d?d.ready?process.nextTick(n):d.on("ready",n):(d=new Torrent(e,r),o.torrents.push(d),d.on("error",function(e){o.emit("error",e,d),o.remove(d)}),d.on("listening",function(e){o.emit("listening",e,d)}),d.on("ready",function(){n(),o.emit("torrent",d)})),d},WebTorrent.prototype.seed=function(e,r,t){function n(){debug("on seed"),"function"==typeof t&&t(i)}var o=this;if(o.destroyed)throw new Error("client is destroyed");if("function"==typeof r)return o.seed(e,null,r);debug("seed"),r=r?extend({},r):{},"string"==typeof e&&(r.path=path.dirname(e)),r.createdBy||(r.createdBy="WebTorrent/"+VERSION);var d,i=o.add(void 0,r,function(e){var r=[function(r){e.load(d,r)}];o.dht&&r.push(function(r){e.on("dhtAnnounce",r)}),parallel(r,function(r){return r?o.emit("error",r):(n(),void o.emit("seed",e))})});return createTorrent.parseInput(e,r,function(t,u){return t?o.emit("error",t):(d=u.map(function(e){return e.getStream}),void createTorrent(e,r,function(e,r){if(e)return o.emit("error",e);if(!o.destroyed){var t=o.get(r);return t?(i.destroy(),void n()):void i._onTorrentId(r)}}))}),i},WebTorrent.prototype.remove=function(e,r){var t=this;debug("remove");var n=t.get(e);if(!n)throw new Error("No torrent with id "+e);t.torrents.splice(t.torrents.indexOf(n),1),n.destroy(r)},WebTorrent.prototype.address=function(){var e=this;return{address:"0.0.0.0",family:"IPv4",port:e.torrentPort}},WebTorrent.prototype.destroy=function(e){var r=this;if(r.destroyed)throw new Error("client already destroyed");r.destroyed=!0,debug("destroy");var t=r.torrents.map(function(e){return function(t){r.remove(e,t)}});r.dht&&t.push(function(e){r.dht.destroy(e)}),parallel(t,e)};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)

},{"./lib/torrent":53,"./package.json":187,"_process":15,"bittorrent-dht/client":3,"buffer":4,"create-torrent":84,"debug":114,"events":8,"hat":120,"inherits":122,"load-ip-set":3,"parse-torrent":128,"path":14,"run-parallel":151,"speedometer":154,"xtend":184,"zero-fill":186}],47:[function(require,module,exports){
(function (process){
function noop(){}function nextTick(e,n,r){process.nextTick(function(){e&&e(n,r)})}var debug=require("debug")("webtorrent:append-to"),MediaSourceStream=require("mediasource"),path=require("path"),videostream=require("videostream"),VIDEOSTREAM_EXTS=[".mp4",".m4v",".m4a"],MEDIASOURCE_VIDEO_EXTS=[".mp4",".m4v",".webm"],MEDIASOURCE_AUDIO_EXTS=[".m4a",".mp3"],MEDIASOURCE_EXTS=MEDIASOURCE_VIDEO_EXTS.concat(MEDIASOURCE_AUDIO_EXTS),AUDIO_EXTS=[".wav",".aac",".ogg",".oga"],IMAGE_EXTS=[".jpg",".jpeg",".png",".gif",".bmp"],IFRAME_EXTS=[".css",".html",".js",".md",".pdf",".txt"],MediaSource="undefined"!=typeof window&&window.MediaSource;module.exports=function(e,n,r){function o(){function o(){debug("Use `videostream` package for "+e.name),l(),c.addEventListener("error",d),c.addEventListener("playing",t),videostream(e,c)}function i(){debug("Use MediaSource API for "+e.name),l(),c.addEventListener("error",E),c.addEventListener("playing",t),e.createReadStream().pipe(new MediaSourceStream(c,{extname:m})),s&&(c.currentTime=s)}function a(){debug("Use Blob URL for "+e.name),l(),c.addEventListener("error",u),c.addEventListener("playing",t),e.getBlobURL(function(e,n){return e?u(e):(c.src=n,void(s&&(c.currentTime=s)))})}function d(e){debug("videostream error: fallback to MediaSource API: %o",e.message||e),c.removeEventListener("error",d),c.removeEventListener("playing",t),i()}function E(e){debug("MediaSource API error: fallback to Blob URL: %o",e.message||e),c.removeEventListener("error",E),c.removeEventListener("playing",t),a()}function l(e){c||(c=document.createElement(p),c.controls=!0,c.autoplay=!0,c.play(),c.addEventListener("progress",function(){s=c.currentTime}),n.appendChild(c))}if(!MediaSource)return nextTick(r,new Error("Video/audio streaming is not supported in your browser. You can still share or download "+e.name+" (once it's fully downloaded). Use Chrome for MediaSource support."));var p=MEDIASOURCE_VIDEO_EXTS.indexOf(m)>=0?"video":"audio";VIDEOSTREAM_EXTS.indexOf(m)>=0?o():i()}function t(){c.removeEventListener("playing",t),r(null,c)}function i(){c=document.createElement("audio"),c.controls=!0,c.autoplay=!0,n.appendChild(c),e.getBlobURL(function(e,n){return e?u(e):(c.addEventListener("error",u),c.addEventListener("playing",t),c.src=n,void c.play())})}function a(){e.getBlobURL(function(o,t){return o?u(o):(c=document.createElement("img"),c.src=t,c.alt=e.name,n.appendChild(c),void r(null,c))})}function d(){e.getBlobURL(function(e,o){return e?u(e):(c=document.createElement("iframe"),c.src=o,".pdf"!==m&&(c.sandbox="allow-forms allow-scripts"),n.appendChild(c),void r(null,c))})}function u(n){c&&c.remove(),n.message='Error appending file "'+e.name+'" to DOM: '+n.message,debug(n.message),r&&r(n)}r||(r=noop);var c,m=path.extname(e.name).toLowerCase(),s=0;if(n&&("VIDEO"===n.nodeName||"AUDIO"===n.nodeName))throw new Error("Invalid video/audio node argument. Argument must be root element that video/audio tag will be appended to.");MEDIASOURCE_EXTS.indexOf(m)>=0?o():AUDIO_EXTS.indexOf(m)>=0?i():IMAGE_EXTS.indexOf(m)>=0?a():IFRAME_EXTS.indexOf(m)>=0?d():nextTick(r,new Error('Unsupported file type "'+m+'": Cannot append to DOM'))};

}).call(this,require('_process'))

},{"_process":15,"debug":114,"mediasource":123,"path":14,"videostream":183}],48:[function(require,module,exports){
function FileStream(e,t){stream.Readable.call(this,t),this.destroyed=!1,this._torrent=e._torrent;var i=t&&t.start||0,s=t&&t.end||e.length-1,r=e._torrent.pieceLength;this._startPiece=(i+e.offset)/r|0,this._endPiece=(s+e.offset)/r|0,this._piece=this._startPiece,this._offset=i+e.offset-this._startPiece*r,this._missing=s-i+1,this._reading=!1,this._notifying=!1,this._criticalLength=Math.min(1048576/r|0,2)}module.exports=FileStream;var debug=require("debug")("webtorrent:file-stream"),inherits=require("inherits"),stream=require("stream");inherits(FileStream,stream.Readable),FileStream.prototype._read=function(){this._reading||(this._reading=!0,this._notify())},FileStream.prototype._notify=function(){var e=this;if(e._reading&&0!==e._missing){if(!e._torrent.bitfield.get(e._piece))return e._torrent.critical(e._piece,e._piece+e._criticalLength);if(!e._notifying){e._notifying=!0;var t=e._piece;e._torrent.store.get(t,function(i,s){if(e._notifying=!1,!e.destroyed){if(i)return e.destroy(i);debug("read %s (length %s) (err %s)",t,s.length,i&&i.message),e._offset&&(s=s.slice(e._offset),e._offset=0),e._missing<s.length&&(s=s.slice(0,e._missing)),e._missing-=s.length,debug("pushing buffer of length %s",s.length),e._reading=!1,e.push(s),0===e._missing&&e.push(null)}}),e._piece+=1}}},FileStream.prototype.destroy=function(){this.destroyed||(this.destroyed=!0,this._torrent.deselect(this._startPiece,this._endPiece,!0))};

},{"debug":114,"inherits":122,"stream":33}],49:[function(require,module,exports){
(function (process,Buffer){
function File(e,t){EventEmitter.call(this),this._torrent=e,this.name=t.name,this.path=t.path,this.length=t.length,this.offset=t.offset,this.done=!1;var n=t.offset,i=n+t.length-1;this._startPiece=n/this._torrent.pieceLength|0,this._endPiece=i/this._torrent.pieceLength|0,0===this.length&&(this.done=!0,this.emit("done"))}module.exports=File;var appendTo=require("./append-to"),eos=require("end-of-stream"),EventEmitter=require("events").EventEmitter,FileStream=require("./file-stream"),inherits=require("inherits"),mime=require("./mime.json"),path=require("path"),stream=require("stream");inherits(File,EventEmitter),File.prototype.select=function(){0!==this.length&&this._torrent.select(this._startPiece,this._endPiece,!1)},File.prototype.deselect=function(){0!==this.length&&this._torrent.deselect(this._startPiece,this._endPiece,!1)},File.prototype.createReadStream=function(e){var t=this;if(0===this.length){var n=new stream.PassThrough;return process.nextTick(function(){n.end()}),n}var i=new FileStream(t,e);return t._torrent.select(i._startPiece,i._endPiece,!0,function(){i._notify()}),eos(i,function(){t._torrent.deselect(i._startPiece,i._endPiece,!0)}),i},File.prototype.getBuffer=function(e){var t=new Buffer(this.length),n=0;this.createReadStream().on("data",function(e){e.copy(t,n),n+=e.length}).on("end",function(){e(null,t)}).on("error",e)},File.prototype.getBlobURL=function(e){var t=this;if("undefined"==typeof window)throw new Error("browser-only method");t.getBuffer(function(n,i){if(n)return e(n);var r=path.extname(t.name).toLowerCase(),o=mime[r],s=o?new window.Blob([i],{type:o}):new window.Blob([i]),h=window.URL.createObjectURL(s);e(null,h)})},File.prototype.appendTo=function(e,t){if("undefined"==typeof window)throw new Error("browser-only method");"string"==typeof e&&(e=document.querySelector(e)),appendTo(this,e,t)};

}).call(this,require('_process'),require("buffer").Buffer)

},{"./append-to":47,"./file-stream":48,"./mime.json":50,"_process":15,"buffer":4,"end-of-stream":117,"events":8,"inherits":122,"path":14,"stream":33}],50:[function(require,module,exports){
module.exports={
  ".aac": "audio/aac",
  ".css": "text/css",
  ".html": "text/html",
  ".js": "application/javascript",
  ".m4a": "audio/mp4",
  ".md": "text/x-markdown",
  ".mp3": "audio/mpeg",
  ".mp4": "video/mp4",
  ".oga": "audio/ogg",
  ".ogg": "audio/ogg",
  ".pdf": "application/pdf",
  ".txt": "text/plain",
  ".wav": "audio/wav",
  ".webm": "video/webm"
}

},{}],51:[function(require,module,exports){
function RarityMap(e,r){function i(e){e.on("have",function(e){t.pieces[e]+=1}),e.on("bitfield",function(){t.recalculate()}),e.on("close",function(){for(var r=0;r<t.numPieces;++r)t.pieces[r]-=e.peerPieces.get(r)})}var t=this;t.pieces=[],t.swarm=e,t.numPieces=r,t.swarm.wires.forEach(i),t.swarm.on("wire",function(e){t.recalculate(),i(e)}),t.recalculate()}module.exports=RarityMap,RarityMap.prototype.recalculate=function(){for(var e=this,r=0;r<e.numPieces;++r)e.pieces[r]=0;e.swarm.wires.forEach(function(r){for(var i=0;i<e.numPieces;++i)e.pieces[i]+=r.peerPieces.get(i)})},RarityMap.prototype.getRarestPiece=function(e){var r=this,i=[],t=1/0;e=e||function(){return!0};for(var c=0;c<r.numPieces;++c)if(e(c)){var n=r.pieces[c];n===t?i.push(c):t>n&&(i=[c],t=n)}return i.length>0?i[Math.random()*i.length|0]:-1};

},{}],52:[function(require,module,exports){
function Server(e,r){var t=http.createServer(r),n=[];return t.on("connection",function(e){e.setTimeout(36e6),n.push(e),e.on("close",function(){var r=n.indexOf(e);r>=0&&n.splice(r,1)})}),t.destroy=function(e){n.forEach(function(e){e.destroy()}),t.close(e)},t.on("request",function(r,t){function n(){if("/"===s){t.setHeader("Content-Type","text/html");var n=e.files.map(function(e,r){return'<li><a href="/'+r+'">'+e.name+"</a></li>"}).join("<br>");return t.end("<h1>WebTorrent</h1><ol>"+n+"</ol>")}var a=Number(s.slice(1));if(Number.isNaN(a)||a>=e.files.length)return t.statusCode=404,t.end("404 Not Found");var o=e.files[a];t.setHeader("Accept-Ranges","bytes"),t.setHeader("Content-Type",mime.lookup(o.name)),t.statusCode=200,t.setHeader("transferMode.dlna.org","Streaming"),t.setHeader("contentFeatures.dlna.org","DLNA.ORG_OP=01;DLNA.ORG_CI=0;DLNA.ORG_FLAGS=01700000000000000000000000000000");var d;r.headers.range?(t.statusCode=206,d=rangeParser(o.length,r.headers.range)[0],debug("range %s",JSON.stringify(d)),t.setHeader("Content-Range","bytes "+d.start+"-"+d.end+"/"+o.length),t.setHeader("Content-Length",d.end-d.start+1)):t.setHeader("Content-Length",o.length),"HEAD"===r.method&&t.end(),pump(o.createReadStream(d),t)}if(debug("onRequest"),"OPTIONS"===r.method&&r.headers["access-control-request-headers"])return t.setHeader("Access-Control-Allow-Methods","POST, GET, OPTIONS"),t.setHeader("Access-Control-Allow-Headers",r.headers["access-control-request-headers"]),t.setHeader("Access-Control-Max-Age","1728000"),t.end();r.headers.origin&&t.setHeader("Access-Control-Allow-Origin",r.headers.origin);var s=url.parse(r.url).pathname;return"/favicon.ico"===s?t.end():void(e.ready?n():e.once("ready",n))}),t}module.exports=Server;var debug=require("debug")("webtorrent:server"),http=require("http"),mime=require("mime"),pump=require("pump"),rangeParser=require("range-parser"),url=require("url");

},{"debug":114,"http":34,"mime":125,"pump":145,"range-parser":149,"url":44}],53:[function(require,module,exports){
(function (process,global){
function Torrent(e,t){var r=this;EventEmitter.call(r),debug.enabled||r.setMaxListeners(0),debug("new torrent"),r.client=t.client,r.announce=t.announce,r.urlList=t.urlList,r.path=t.path,r._store=t.store||FSChunkStore,r.strategy=t.strategy||"sequential",r._rechokeNumSlots=t.uploads===!1||0===t.uploads?0:+t.uploads||10,r._rechokeOptimisticWire=null,r._rechokeOptimisticTime=0,r._rechokeIntervalId=null,r.ready=!1,r.destroyed=!1,r.metadata=null,r.store=null,r.numBlockedPeers=0,r.files=null,r.done=!1,r._amInterested=!1,r._selections=[],r._critical=[],r._servers=[],e&&r._onTorrentId(e)}function getPipelineLength(e,t){return Math.ceil(2+t*e.downloadSpeed()/Piece.BLOCK_LENGTH)}function randomInt(e){return Math.random()*e|0}function noop(){}module.exports=Torrent;var addrToIPPort=require("addr-to-ip-port"),BitField=require("bitfield"),ChunkStoreWriteStream=require("chunk-store-stream/write"),createTorrent=require("create-torrent"),debug=require("debug")("webtorrent:torrent"),Discovery=require("torrent-discovery"),EventEmitter=require("events").EventEmitter,extend=require("xtend/mutable"),FSChunkStore=require("fs-chunk-store"),ImmediateChunkStore=require("immediate-chunk-store"),inherits=require("inherits"),MultiStream=require("multistream"),os=require("os"),parallel=require("run-parallel"),parseTorrent=require("parse-torrent"),path=require("path"),pathExists=require("path-exists"),Piece=require("torrent-piece"),pump=require("pump"),randomIterate=require("random-iterate"),reemit=require("re-emitter"),sha1=require("simple-sha1"),Swarm=require("bittorrent-swarm"),uniq=require("uniq"),ut_metadata=require("ut_metadata"),ut_pex=require("ut_pex"),File=require("./file"),RarityMap=require("./rarity-map"),Server=require("./server"),MAX_BLOCK_LENGTH=131072,PIECE_TIMEOUT=3e4,CHOKE_TIMEOUT=5e3,SPEED_THRESHOLD=3*Piece.BLOCK_LENGTH,PIPELINE_MIN_DURATION=.5,PIPELINE_MAX_DURATION=1,RECHOKE_INTERVAL=1e4,RECHOKE_OPTIMISTIC_DURATION=2,TMP=path.join(pathExists.sync("/tmp")?"/tmp":os.tmpDir(),"webtorrent");inherits(Torrent,EventEmitter),Object.defineProperty(Torrent.prototype,"timeRemaining",{get:function(){return 0===this.swarm.downloadSpeed()?1/0:(this.length-this.downloaded)/this.swarm.downloadSpeed()*1e3}}),Object.defineProperty(Torrent.prototype,"downloaded",{get:function(){for(var e=0,t=0,r=this.pieces.length;r>t;++t)if(this.bitfield.get(t))e+=t===r-1?this.lastPieceLength:this.pieceLength;else{var n=this.pieces[t];e+=n.length-n.missing}return e}}),Object.defineProperty(Torrent.prototype,"received",{get:function(){return this.swarm?this.swarm.downloaded:0}}),Object.defineProperty(Torrent.prototype,"uploaded",{get:function(){return this.swarm?this.swarm.uploaded:0}}),Object.defineProperty(Torrent.prototype,"progress",{get:function(){return this.length?this.downloaded/this.length:0}}),Object.defineProperty(Torrent.prototype,"ratio",{get:function(){return this.uploaded/(this.downloaded||1)}}),Object.defineProperty(Torrent.prototype,"numPeers",{get:function(){return this.swarm?this.swarm.numPeers:0}}),Object.defineProperty(Torrent.prototype,"torrentFileURL",{get:function(){if("undefined"==typeof window)throw new Error("browser-only property");return this.torrentFile?window.URL.createObjectURL(new window.Blob([this.torrentFile],{type:"application/x-bittorrent"})):null}}),Torrent.prototype.downloadSpeed=function(){return this.swarm?this.swarm.downloadSpeed():0},Torrent.prototype.uploadSpeed=function(){return this.swarm?this.swarm.uploadSpeed():0},Torrent.prototype._onTorrentId=function(e){var t=this;t.destroyed||parseTorrent.remote(e,function(e,r){return t.destroyed?void 0:e?t._onError(e):void t._onParsedTorrent(r)})},Torrent.prototype._onParsedTorrent=function(e){var t=this;if(!t.destroyed){if(t._processParsedTorrent(e),!t.infoHash)return t._onError(new Error("Malformed torrent data: No info hash"));t.path||(t.path=path.join(TMP,t.infoHash)),t.swarm=new Swarm(t.infoHash,t.client.peerId,{handshake:{dht:t["private"]?!1:!!t.client.dht}}),t.swarm.on("error",t._onError.bind(t)),t.swarm.on("wire",t._onWire.bind(t)),t.swarm.on("download",function(e){t.client.downloadSpeed(e),t.client.emit("download",e),t.emit("download",e)}),t.swarm.on("upload",function(e){t.client.uploadSpeed(e),t.client.emit("upload",e),t.emit("upload",e)}),t.swarm.listen(t.client.torrentPort,t._onSwarmListening.bind(t)),process.nextTick(function(){t.destroyed||t.emit("infoHash",t.infoHash)})}},Torrent.prototype._processParsedTorrent=function(e){this.announce&&(e.announce=e.announce.concat(this.announce)),global.WEBTORRENT_ANNOUNCE&&(e.announce=e.announce.concat(global.WEBTORRENT_ANNOUNCE)),0===e.announce.length&&(e.announce=createTorrent.announceList.map(function(e){return e[0]})),this.urlList&&(e.urlList=e.urlList.concat(this.urlList)),uniq(e.announce),extend(this,e),this.magnetURI=parseTorrent.toMagnetURI(e),this.torrentFile=parseTorrent.toTorrentFile(e)},Torrent.prototype._onSwarmListening=function(){var e=this;e.destroyed||(e.swarm.server&&(e.client.torrentPort=e.swarm.address().port),e.discovery=new Discovery({announce:e.announce,dht:e["private"]?!1:e.client.dht,tracker:e.client.tracker,peerId:e.client.peerId,port:e.client.torrentPort,rtcConfig:e.client._rtcConfig,wrtc:e.client._wrtc}),e.discovery.on("error",e._onError.bind(e)),e.discovery.setTorrent(e.infoHash),e.discovery.on("peer",e.addPeer.bind(e)),reemit(e.discovery,e,["trackerAnnounce","dhtAnnounce","warning"]),e.info&&e._onMetadata(e),e.emit("listening",e.client.torrentPort))},Torrent.prototype._onMetadata=function(e){var t=this;if(!t.metadata&&!t.destroyed){debug("got metadata");var r;if(e&&e.infoHash)r=e;else try{r=parseTorrent(e)}catch(n){return t._onError(n)}t._processParsedTorrent(r),t.metadata=t.torrentFile,t.discovery.setTorrent(t),t.urlList&&t.urlList.forEach(t.addWebSeed.bind(t)),t.rarityMap=new RarityMap(t.swarm,t.pieces.length),t.store=new ImmediateChunkStore(new t._store(t.pieceLength,{files:t.files.map(function(e){return{path:path.join(t.path,e.path),length:e.length,offset:e.offset}}),length:t.length})),t.files=t.files.map(function(e){return new File(t,e)}),t._hashes=t.pieces,t.pieces=t.pieces.map(function(e,r){var n=r===t.pieces.length-1?t.lastPieceLength:t.pieceLength;return new Piece(n)}),t._reservations=t.pieces.map(function(){return[]}),t.bitfield=new BitField(t.pieces.length),t.swarm.wires.forEach(function(e){e.ut_metadata&&e.ut_metadata.setMetadata(t.metadata),t._onWireWithMetadata(e)}),debug("verifying existing torrent data"),parallel(t.pieces.map(function(e,r){return function(e){t.store.get(r,function(n,o){return n?e(null):void sha1(o,function(n){if(n===t._hashes[r]){if(!t.pieces[r])return;debug("piece verified %s",r),t.pieces[r]=null,t._reservations[r]=null,t.bitfield.set(r,!0)}else debug("piece invalid %s",r);e(null)})})}}),function(e){return e?t._onError(e):(debug("done verifying"),void t._onStore())}),t.emit("metadata")}},Torrent.prototype._onStore=function(){var e=this;e.destroyed||(debug("on store"),e.select(0,e.pieces.length-1,!1),e._rechokeIntervalId=setInterval(e._rechoke.bind(e),RECHOKE_INTERVAL),e._rechokeIntervalId.unref&&e._rechokeIntervalId.unref(),e.ready=!0,e.emit("ready"),e._checkDone())},Torrent.prototype.destroy=function(e){var t=this;if(!t.destroyed){t.destroyed=!0,debug("destroy"),t.client.remove(t),t._rechokeIntervalId&&(clearInterval(t._rechokeIntervalId),t._rechokeIntervalId=null);var r=[];t._servers.forEach(function(e){r.push(function(t){e.destroy(t)})}),t.swarm&&r.push(function(e){t.swarm.destroy(e)}),t.discovery&&r.push(function(e){t.discovery.stop(e)}),t.store&&r.push(function(e){t.store.close(e)}),parallel(r,e)}},Torrent.prototype.addPeer=function(e){function t(){r.swarm.addPeer(e),r.emit("peer",e)}var r=this;return"string"==typeof e&&r.client.blocked&&r.client.blocked.contains(addrToIPPort(e)[0])?(r.numBlockedPeers+=1,r.emit("blockedPeer",e),!1):(r.swarm?t():r.once("listening",t),!0)},Torrent.prototype.addWebSeed=function(e){var t=this;t.swarm.addWebSeed(e,t)},Torrent.prototype.select=function(e,t,r,n){var o=this;if(e>t||0>e||t>=o.pieces.length)throw new Error("invalid selection ",e,":",t);r=Number(r)||0,debug("select %s-%s (priority %s)",e,t,r),o._selections.push({from:e,to:t,offset:0,priority:r,notify:n||noop}),o._selections.sort(function(e,t){return t.priority-e.priority}),o._updateSelections()},Torrent.prototype.deselect=function(e,t,r){var n=this;r=Number(r)||0,debug("deselect %s-%s (priority %s)",e,t,r);for(var o=0;o<n._selections.length;++o){var i=n._selections[o];if(i.from===e&&i.to===t&&i.priority===r){n._selections.splice(o--,1);break}}n._updateSelections()},Torrent.prototype.critical=function(e,t){var r=this;debug("critical %s-%s",e,t);for(var n=e;t>=n;++n)r._critical[n]=!0;r._updateSelections()},Torrent.prototype._onWire=function(e,t){var r=this;if(debug("got wire (%s)",t||"Unknown"),t){var n=addrToIPPort(t);e.remoteAddress=n[0],e.remotePort=n[1]}e.peerExtensions.dht&&r.client.dht&&r.client.dht.listening&&(e.on("port",function(t){return e.remoteAddress?(debug("port: %s (from %s)",t,e.remoteAddress+":"+e.remotePort),void r.client.dht.addNode(e.remoteAddress+":"+t)):void debug("ignoring port from peer with no address")}),e.port(r.client.dht.address().port)),e.on("timeout",function(){debug("wire timeout (%s)",t),e.destroy()}),e.setTimeout(PIECE_TIMEOUT,!0),e.setKeepAlive(!0),e.use(ut_metadata(r.metadata)),r.metadata||(e.ut_metadata.on("metadata",function(e){debug("got metadata via ut_metadata"),r._onMetadata(e)}),e.ut_metadata.fetch()),"function"!=typeof ut_pex||r["private"]||(e.use(ut_pex()),e.ut_pex.on("peer",function(e){debug("ut_pex: got peer: %s (from %s)",e,t),r.addPeer(e)}),e.ut_pex.on("dropped",function(e){var n=r.swarm._peers[e];n&&!n.connected&&(debug("ut_pex: dropped peer: %s (from %s)",e,t),r.swarm.removePeer(e))})),r.emit("wire",e,t),r.metadata&&r._onWireWithMetadata(e)},Torrent.prototype._onWireWithMetadata=function(e){function t(){n.destroyed||e.destroyed||(n.swarm.numQueued>2*(n.swarm.numConns-n.swarm.numPeers)&&e.amInterested?e.destroy():(o=setTimeout(t,CHOKE_TIMEOUT),o.unref&&o.unref()))}function r(){if(e.peerPieces.length===n.pieces.length){for(;i<n.pieces.length;++i)if(!e.peerPieces.get(i))return;e.isSeeder=!0,e.choke()}}var n=this,o=null,i=0;e.on("bitfield",function(){r(),n._update()}),e.on("have",function(){r(),n._update()}),e.once("interested",function(){e.unchoke()}),e.on("close",function(){clearTimeout(o)}),e.on("choke",function(){clearTimeout(o),o=setTimeout(t,CHOKE_TIMEOUT),o.unref&&o.unref()}),e.on("unchoke",function(){clearTimeout(o),n._update()}),e.on("request",function(t,r,o,i){return o>MAX_BLOCK_LENGTH?e.destroy():void(n.pieces[t]||n.store.get(t,{offset:r,length:o},i))}),e.bitfield(n.bitfield),e.interested(),o=setTimeout(t,CHOKE_TIMEOUT),o.unref&&o.unref(),e.isSeeder=!1,r()},Torrent.prototype._updateSelections=function(){var e=this;if(e.swarm&&!e.destroyed){if(!e.metadata)return e.once("metadata",e._updateSelections.bind(e));process.nextTick(e._gcSelections.bind(e)),e._updateInterest(),e._update()}},Torrent.prototype._gcSelections=function(){for(var e=this,t=0;t<e._selections.length;t++){for(var r=e._selections[t],n=r.offset;e.bitfield.get(r.from+r.offset)&&r.from+r.offset<r.to;)r.offset++;n!==r.offset&&r.notify(),r.to===r.from+r.offset&&e.bitfield.get(r.from+r.offset)&&(e._selections.splice(t--,1),r.notify(),e._updateInterest())}e._selections.length||e.emit("idle")},Torrent.prototype._updateInterest=function(){var e=this,t=e._amInterested;e._amInterested=!!e._selections.length,e.swarm.wires.forEach(function(t){e._amInterested?t.interested():t.uninterested()}),t!==e._amInterested&&(e._amInterested?e.emit("interested"):e.emit("uninterested"))},Torrent.prototype._update=function(){var e=this;if(!e.destroyed)for(var t,r=randomIterate(e.swarm.wires);t=r();)e._updateWire(t)},Torrent.prototype._updateWire=function(e){function t(t,r,n,o){return function(i){return i>=t&&r>=i&&!(i in n)&&e.peerPieces.get(i)&&(!o||o(i))}}function r(){if(!e.requests.length)for(var r=s._selections.length;r--;){var n,o=s._selections[r];if("rarest"===s.strategy)for(var i=o.from+o.offset,a=o.to,d=a-i+1,u={},c=0,p=t(i,a,u);d>c&&(n=s.rarityMap.getRarestPiece(p),!(0>n));){if(s._request(e,n,!1))return;u[n]=!0,c+=1}else for(n=o.to;n>=o.from+o.offset;--n)if(e.peerPieces.get(n)&&s._request(e,n,!1))return}}function n(){var t=e.downloadSpeed()||1;if(t>SPEED_THRESHOLD)return function(){return!0};var r=Math.max(1,e.requests.length)*Piece.BLOCK_LENGTH/t,n=10,o=0;return function(e){if(!n||s.bitfield.get(e))return!0;for(var i=s.pieces[e].missing;o<s.swarm.wires.length;o++){var a=s.swarm.wires[o],d=a.downloadSpeed();if(!(SPEED_THRESHOLD>d)&&!(t>=d)&&a.peerPieces.get(e)&&!((i-=d*r)>0))return n--,!1}return!0}}function o(e){for(var t=e,r=e;r<s._selections.length&&s._selections[r].priority;r++)t=r;var n=s._selections[e];s._selections[e]=s._selections[t],s._selections[t]=n}function i(r){if(e.requests.length>=d)return!0;for(var i=n(),a=0;a<s._selections.length;a++){var u,c=s._selections[a];if("rarest"===s.strategy)for(var p=c.from+c.offset,l=c.to,f=l-p+1,h={},m=0,_=t(p,l,h,i);f>m&&(u=s.rarityMap.getRarestPiece(_),!(0>u));){for(;s._request(e,u,s._critical[u]||r););if(!(e.requests.length<d))return c.priority&&o(a),!0;h[u]=!0,m++}else for(u=c.from+c.offset;u<=c.to;u++)if(e.peerPieces.get(u)&&i(u)){for(;s._request(e,u,s._critical[u]||r););if(!(e.requests.length<d))return c.priority&&o(a),!0}}return!1}var s=this;if(!e.peerChoking){if(!e.downloaded)return r();var a=getPipelineLength(e,PIPELINE_MIN_DURATION);if(!(e.requests.length>=a)){var d=getPipelineLength(e,PIPELINE_MAX_DURATION);i(!1)||i(!0)}}},Torrent.prototype._rechoke=function(){function e(e,t){return e.downloadSpeed!==t.downloadSpeed?t.downloadSpeed-e.downloadSpeed:e.uploadSpeed!==t.uploadSpeed?t.uploadSpeed-e.uploadSpeed:e.wire.amChoking!==t.wire.amChoking?e.wire.amChoking?1:-1:e.salt-t.salt}var t=this;t._rechokeOptimisticTime>0?t._rechokeOptimisticTime-=1:t._rechokeOptimisticWire=null;var r=[];t.swarm.wires.forEach(function(e){e.isSeeder||e===t._rechokeOptimisticWire||r.push({wire:e,downloadSpeed:e.downloadSpeed(),uploadSpeed:e.uploadSpeed(),salt:Math.random(),isChoked:!0})}),r.sort(e);for(var n=0,o=0;o<r.length&&n<t._rechokeNumSlots;++o)r[o].isChoked=!1,r[o].wire.peerInterested&&(n+=1);if(!t._rechokeOptimisticWire&&o<r.length&&t._rechokeNumSlots){var i=r.slice(o).filter(function(e){return e.wire.peerInterested}),s=i[randomInt(i.length)];s&&(s.isChoked=!1,t._rechokeOptimisticWire=s.wire,t._rechokeOptimisticTime=RECHOKE_OPTIMISTIC_DURATION)}r.forEach(function(e){e.wire.amChoking!==e.isChoked&&(e.isChoked?e.wire.choke():e.wire.unchoke())})},Torrent.prototype._hotswap=function(e,t){var r=this,n=e.downloadSpeed();if(n<Piece.BLOCK_LENGTH)return!1;if(!r._reservations[t])return!1;var o=r._reservations[t];if(!o)return!1;var i,s,a=1/0;for(s=0;s<o.length;s++){var d=o[s];if(d&&d!==e){var u=d.downloadSpeed();u>=SPEED_THRESHOLD||2*u>n||u>a||(i=d,a=u)}}if(!i)return!1;for(s=0;s<o.length;s++)o[s]===i&&(o[s]=null);for(s=0;s<i.requests.length;s++){var c=i.requests[s];c.piece===t&&r.pieces[t].cancel(c.offset/Piece.BLOCK_SIZE|0)}return r.emit("hotswap",i,e,t),!0},Torrent.prototype._request=function(e,t,r){function n(){process.nextTick(function(){o._update()})}var o=this,i=e.requests.length;if(o.bitfield.get(t))return!1;var s=getPipelineLength(e,PIPELINE_MAX_DURATION);if(i>=s)return!1;var a=o.pieces[t],d=a.reserve();if(-1===d&&r&&o._hotswap(e,t)&&(d=a.reserve()),-1===d)return!1;var u=o._reservations[t];u||(u=o._reservations[t]=[]);var c=u.indexOf(null);-1===c&&(c=u.length),u[c]=e;var p=a.chunkOffset(d),l=a.chunkLength(d);return e.request(t,p,l,function f(r,i){if(!o.ready)return o.once("ready",function(){f(r,i)});if(u[c]===e&&(u[c]=null),a!==o.pieces[t])return n();if(r)return debug("error getting piece %s (offset: %s length: %s) from %s: %s",t,p,l,e.remoteAddress+":"+e.remotePort,r.message),a.cancel(d),void n();if(debug("got piece %s (offset: %s length: %s) from %s",t,p,l,e.remoteAddress+":"+e.remotePort),!a.set(d,i,e))return n();var s=a.flush();sha1(s,function(e){if(e===o._hashes[t]){if(!o.pieces[t])return;debug("piece verified %s",t),o.pieces[t]=null,o._reservations[t]=null,o.bitfield.set(t,!0),o.store.put(t,s),o.swarm.wires.forEach(function(e){e.have(t)}),o._checkDone()}else o.pieces[t]=new Piece(a.length),o.emit("warning",new Error("Piece "+t+" failed verification"));n()})}),!0},Torrent.prototype._checkDone=function(){var e=this;e.destroyed||(e.files.forEach(function(t){if(!t.done){for(var r=t._startPiece;r<=t._endPiece;++r)if(!e.bitfield.get(r))return;t.done=!0,t.emit("done"),debug("file done: "+t.name)}}),e.files.every(function(e){return e.done})&&(e.done=!0,e.emit("done"),debug("torrent done: "+e.infoHash),e.discovery.tracker&&e.discovery.tracker.complete()),e._gcSelections())},Torrent.prototype.load=function(e,t){var r=this;Array.isArray(e)||(e=[e]),t||(t=noop);var n=new MultiStream(e),o=new ChunkStoreWriteStream(r.store,r.pieceLength);pump(n,o,function(e){return e?t(e):(r.pieces.forEach(function(e,t){r.pieces[t]=null,r._reservations[t]=null,r.bitfield.set(t,!0)}),r._checkDone(),void t(null))})},Torrent.prototype.createServer=function(e){var t=this;if("function"==typeof Server){var r=new Server(t,e);return t._servers.push(r),r}},Torrent.prototype._onError=function(e){var t=this;debug("torrent error: %s",e.message||e),t.emit("error",e),t.destroy()};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./file":49,"./rarity-map":51,"./server":52,"_process":15,"addr-to-ip-port":54,"bitfield":55,"bittorrent-swarm":56,"chunk-store-stream/write":83,"create-torrent":84,"debug":114,"events":8,"fs-chunk-store":124,"immediate-chunk-store":121,"inherits":122,"multistream":127,"os":13,"parse-torrent":128,"path":14,"path-exists":144,"pump":145,"random-iterate":148,"re-emitter":150,"run-parallel":151,"simple-sha1":152,"torrent-discovery":155,"torrent-piece":170,"uniq":171,"ut_metadata":172,"ut_pex":3,"xtend/mutable":185}],54:[function(require,module,exports){
var ADDR_RE=/^\[?([^\]]+)\]?:(\d+)$/,cache={},size=0;module.exports=function(e){if(1e5===size&&module.exports.reset(),!cache[e]){var r=ADDR_RE.exec(e);if(!r)throw new Error("invalid addr: "+e);cache[e]=[r[1],Number(r[2])],size+=1}return cache[e]},module.exports.reset=function(){cache={},size=0};

},{}],55:[function(require,module,exports){
(function (Buffer){
function BitField(e,t){return this instanceof BitField?(0===arguments.length&&(e=0),this.grow=t&&(isFinite(t.grow)&&getByteSize(t.grow)||t.grow)||0,("number"==typeof e||void 0===e)&&(e=new Container(getByteSize(e)),e.fill&&!e._isBuffer&&e.fill(0)),void(this.buffer=e)):new BitField(e,t)}function getByteSize(e){var t=e>>3;return e%8!==0&&t++,t}var Container="undefined"!=typeof Buffer?Buffer:"undefined"!=typeof Int8Array?Int8Array:function(e){for(var t=new Array(e),i=0;e>i;i++)t[i]=0};BitField.prototype.get=function(e){var t=e>>3;return t<this.buffer.length&&!!(this.buffer[t]&128>>e%8)},BitField.prototype.set=function(e,t){var i=e>>3;t||1===arguments.length?(this.buffer.length<i+1&&this._grow(Math.max(i+1,Math.min(2*this.buffer.length,this.grow))),this.buffer[i]|=128>>e%8):i<this.buffer.length&&(this.buffer[i]&=~(128>>e%8))},BitField.prototype._grow=function(e){if(this.buffer.length<e&&e<=this.grow){var t=new Container(e);if(t.fill&&t.fill(0),this.buffer.copy)this.buffer.copy(t,0);else for(var i=0;i<this.buffer.length;i++)t[i]=this.buffer[i];this.buffer=t}},"undefined"!=typeof module&&(module.exports=BitField);

}).call(this,require("buffer").Buffer)

},{"buffer":4}],56:[function(require,module,exports){
(function (process,Buffer){
function Swarm(e,r,t){var n=this;return n instanceof Swarm?(EventEmitter.call(n),n.infoHash="string"==typeof e?new Buffer(e,"hex"):e,n.infoHashHex=n.infoHash.toString("hex"),n.peerId="string"==typeof r?new Buffer(r,"hex"):r,n.peerIdHex=n.peerId.toString("hex"),t||(t={}),debug("new swarm (i %s p %s)",n.infoHashHex,n.peerIdHex),n.handshakeOpts=t.handshake,n.maxConns=void 0!==t.maxConns?t.maxConns:MAX_CONNS,n.destroyed=!1,n.listening=!1,n.paused=!1,n.server=null,n.wires=[],n._queue=[],n._peers={},n._peersLength=0,n._port=0,n.downloaded=0,n.uploaded=0,n.downloadSpeed=speedometer(),void(n.uploadSpeed=speedometer())):new Swarm(e,r,t)}module.exports=Swarm;var addrToIPPort=require("addr-to-ip-port"),debug=require("debug")("bittorrent-swarm"),dezalgo=require("dezalgo"),EventEmitter=require("events").EventEmitter,inherits=require("inherits"),net=require("net"),Peer=require("./lib/peer"),speedometer=require("speedometer"),TCPPool=require("./lib/tcp-pool"),MAX_CONNS=55,RECONNECT_WAIT=[1e3,5e3,15e3];inherits(Swarm,EventEmitter),Object.defineProperty(Swarm.prototype,"ratio",{get:function(){var e=this;return e.uploaded/e.downloaded||0}}),Object.defineProperty(Swarm.prototype,"numQueued",{get:function(){var e=this;return e._queue.length+(e._peersLength-e.numConns)}}),Object.defineProperty(Swarm.prototype,"numConns",{get:function(){var e=this,r=0;for(var t in e._peers){var n=e._peers[t];n&&n.connected&&(r+=1)}return r}}),Object.defineProperty(Swarm.prototype,"numPeers",{get:function(){var e=this;return e.wires.length}}),Swarm.prototype.addPeer=function(e){var r=this;r._addPeer(e)},Swarm.prototype._addPeer=function(e){var r=this;if(r.destroyed)return e&&e.destroy&&e.destroy(new Error("swarm already destroyed")),null;if("string"==typeof e&&!r._validAddr(e))return debug("ignoring invalid peer %s (from swarm.addPeer)",e),null;var t=e&&e.id||e;if(!r._peers[t]){debug("addPeer %s",t);var n;if("string"==typeof e)n=Peer.createOutgoingTCPPeer(e,r);else{if(r.paused)return e.destroy(new Error("swarm paused")),null;n=Peer.createWebRTCPeer(e,r)}return r._peers[n.id]=n,r._peersLength+=1,"string"==typeof e&&(r._queue.push(n),r._drain()),n}},Swarm.prototype.addWebSeed=function(e,r){var t=this;if(!t.destroyed){if(!/^https?:\/\/.+/.test(e))return void debug("ignoring invalid web seed %s (from swarm.addWebSeed)",e);if(!t._peers[e]){debug("addWebSeed %s",e);var n=Peer.createWebPeer(e,r,t);t._peers[n.id]=n,t._peersLength+=1}}},Swarm.prototype._addIncomingPeer=function(e){var r=this;return r.destroyed?e.destroy(new Error("swarm already destroyed")):r.paused?e.destroy(new Error("swarm paused")):r._validAddr(e.addr)?(debug("_addIncomingPeer %s",e.id),r._peers[e.id]=e,void(r._peersLength+=1)):e.destroy(new Error("invalid addr "+e.addr+" (from incoming)"))},Swarm.prototype.removePeer=function(e){var r=this,t=r._peers[e];t&&(debug("removePeer %s",e),r._peers[e]=null,r._peersLength-=1,t.destroy(),r._drain())},Swarm.prototype.pause=function(){var e=this;e.destroyed||(debug("pause"),e.paused=!0)},Swarm.prototype.resume=function(){var e=this;e.destroyed||(debug("resume"),e.paused=!1,e._drain())},Swarm.prototype.listen=function(e,r,t){var n=this;if("function"==typeof r&&(t=r,r=void 0),t&&(t=dezalgo(t)),n.listening)throw new Error("swarm already listening");if(process.browser&&t)t();else{n._port=e||TCPPool.getDefaultListenPort(n.infoHashHex),n._hostname=r,t&&n.once("listening",t),debug("listen %s",e);var o=TCPPool.addSwarm(n);n.server=o.server}},Swarm.prototype._onListening=function(e){var r=this;r._port=e,r.listening=!0,r.emit("listening")},Swarm.prototype.address=function(){var e=this;return e.server.address()},Swarm.prototype.destroy=function(e){var r=this;if(!r.destroyed){r.destroyed=!0,r.listening=!1,r.paused=!1,e&&r.once("close",e),debug("destroy");for(var t in r._peers)r.removePeer(t);TCPPool.removeSwarm(r,function(){r.emit("close")})}},Swarm.prototype._drain=function(){var e=this;if(debug("_drain numConns %s maxConns %s",e.numConns,e.maxConns),!("function"!=typeof net.connect||e.destroyed||e.paused||e.numConns>=e.maxConns)){debug("drain (%s queued, %s/%s peers)",e.numQueued,e.numPeers,e.maxConns);var r=e._queue.shift();if(r){debug("tcp connect attempt to %s",r.addr);var t=addrToIPPort(r.addr),n={host:t[0],port:t[1]};e._hostname&&(n.localAddress=e._hostname);var o=r.conn=net.connect(n);o.once("connect",function(){r.onConnect()}),o.once("error",function(e){r.destroy(e)}),r.setConnectTimeout(),o.on("close",function(){if(!e.destroyed){if(r.retries>=RECONNECT_WAIT.length)return void debug("conn %s closed: will not re-add (max %s attempts)",r.addr,RECONNECT_WAIT.length);var t=RECONNECT_WAIT[r.retries];debug("conn %s closed: will re-add to queue in %sms (attempt %s)",r.addr,t,r.retries+1);var n=setTimeout(function(){var t=e._addPeer(r.addr);t&&(t.retries=r.retries+1)},t);n.unref&&n.unref()}})}}},Swarm.prototype._onError=function(e){var r=this;r.emit("error",e),r.destroy()},Swarm.prototype._validAddr=function(e){var r=this,t=addrToIPPort(e),n=t[0],o=t[1];return o>0&&65535>o&&!("127.0.0.1"===n&&o===r._port)};

}).call(this,require('_process'),require("buffer").Buffer)

},{"./lib/peer":57,"./lib/tcp-pool":58,"_process":15,"addr-to-ip-port":3,"buffer":4,"debug":114,"dezalgo":65,"events":8,"inherits":122,"net":3,"speedometer":154}],57:[function(require,module,exports){
function Peer(e){var n=this;n.id=e,debug("new Peer %s",e),n.addr=null,n.conn=null,n.swarm=null,n.wire=null,n.connected=!1,n.destroyed=!1,n.timeout=null,n.retries=0,n.sentHandshake=!1}var debug=require("debug")("bittorrent-swarm:peer"),WebConn=require("./webconn"),Wire=require("bittorrent-protocol"),CONNECT_TIMEOUT=25e3,HANDSHAKE_TIMEOUT=25e3;exports.createWebRTCPeer=function(e,n){var r=new Peer(e.id);return r.conn=e,r.swarm=n,r.conn.connected?r.onConnect():(r.conn.once("connect",function(){r.onConnect()}),r.conn.once("error",function(e){r.destroy(e)}),r.setConnectTimeout()),r},exports.createIncomingTCPPeer=function(e){var n=e.remoteAddress+":"+e.remotePort,r=new Peer(n);return r.conn=e,r.addr=n,r.onConnect(),r},exports.createOutgoingTCPPeer=function(e,n){var r=new Peer(e);return r.addr=e,r.swarm=n,r},exports.createWebPeer=function(e,n,r){var o=new Peer(e);return o.swarm=r,o.conn=new WebConn(e,n),o.onConnect(),o},Peer.prototype.onConnect=function(){var e=this;if(!e.destroyed){e.connected=!0,debug("Peer %s connected",e.id),clearTimeout(e.connectTimeout);var n=e.conn;n.once("end",function(){e.destroy()}),n.once("close",function(){e.destroy()}),n.once("finish",function(){e.destroy()}),n.once("error",function(n){e.destroy(n)});var r=e.wire=new Wire;r.once("end",function(){e.destroy()}),r.once("close",function(){e.destroy()}),r.once("finish",function(){e.destroy()}),r.once("error",function(n){e.destroy(n)}),r.once("handshake",function(n,r){e.onHandshake(n,r)}),e.setHandshakeTimeout(),n.pipe(r).pipe(n),e.swarm&&!e.sentHandshake&&e.handshake()}},Peer.prototype.onHandshake=function(e,n){var r=this;if(r.swarm){var o=e.toString("hex"),t=n.toString("hex");if(r.swarm.destroyed)return r.destroy(new Error("swarm already destroyed"));if(o!==r.swarm.infoHashHex)return r.destroy(new Error("unexpected handshake info hash for this swarm"));if(t===r.swarm.peerIdHex)return r.destroy(new Error("refusing to handshake with self"));debug("Peer %s got handshake %s",r.id,o),clearTimeout(r.handshakeTimeout),r.retries=0,r.wire.on("download",function(e){r.destroyed||(r.swarm.downloaded+=e,r.swarm.downloadSpeed(e),r.swarm.emit("download",e))}),r.wire.on("upload",function(e){r.destroyed||(r.swarm.uploaded+=e,r.swarm.uploadSpeed(e),r.swarm.emit("upload",e))}),r.sentHandshake||r.handshake(),r.swarm.wires.push(r.wire);var s=r.addr;!s&&r.conn.remoteAddress&&(s=r.conn.remoteAddress+":"+r.conn.remotePort),r.swarm.emit("wire",r.wire,s)}},Peer.prototype.handshake=function(){var e=this;e.wire.handshake(e.swarm.infoHash,e.swarm.peerId,e.swarm.handshakeOpts),e.sentHandshake=!0},Peer.prototype.setConnectTimeout=function(){var e=this;clearTimeout(e.connectTimeout),e.connectTimeout=setTimeout(function(){e.destroy(new Error("connect timeout"))},CONNECT_TIMEOUT),e.connectTimeout.unref&&e.connectTimeout.unref()},Peer.prototype.setHandshakeTimeout=function(){var e=this;clearTimeout(e.handshakeTimeout),e.handshakeTimeout=setTimeout(function(){e.destroy(new Error("handshake timeout"))},HANDSHAKE_TIMEOUT),e.handshakeTimeout.unref&&e.handshakeTimeout.unref()},Peer.prototype.destroy=function(e){var n=this;if(!n.destroyed){n.destroyed=!0,n.connected=!1,debug("destroy %s (error: %s)",n.id,e&&(e.message||e)),clearTimeout(n.connectTimeout),clearTimeout(n.handshakeTimeout);var r=n.swarm,o=n.conn,t=n.wire;if(n.conn=null,n.swarm=null,n.wire=null,r&&t){var s=r.wires.indexOf(t);s>=0&&r.wires.splice(s,1)}o&&o.destroy(),t&&t.destroy(),r&&r.removePeer(n.id)}};

},{"./webconn":59,"bittorrent-protocol":60,"debug":114}],58:[function(require,module,exports){
(function (process){
function TCPPool(o,r){var n=this;n.port=o,n.listening=!1,n.swarms={},debug("new TCPPool (port: %s, hostname: %s)",o,r),n.pendingConns=[],n.server=net.createServer(),n.server.on("connection",function(o){n._onConnection(o)}),n.server.on("error",function(o){n._onError(o)}),n.server.on("listening",function(){n._onListening()}),n.server.listen(n.port,r)}module.exports=TCPPool;var debug=require("debug")("bittorrent-swarm:tcp-pool"),dezalgo=require("dezalgo"),net=require("net"),Peer=require("./peer"),tcpPools={};TCPPool.addSwarm=function(o){var r=tcpPools[o._port];return r||(r=tcpPools[o._port]=new TCPPool(o._port,o._hostname)),r.addSwarm(o),r},TCPPool.removeSwarm=function(o,r){var n=tcpPools[o._port];if(!n)return r();n.removeSwarm(o);var e=0;for(var t in n.swarms){var s=n.swarms[t];s&&(e+=1)}0===e?n.destroy(r):process.nextTick(r)},TCPPool.getDefaultListenPort=function(o){for(var r in tcpPools){var n=tcpPools[r];if(n&&!n.swarms[o])return n.port}return 0},TCPPool.prototype.addSwarm=function(o){var r=this;return r.swarms[o.infoHashHex]?void process.nextTick(function(){o._onError(new Error("There is already a swarm with info hash "+o.infoHashHex+" listening on port "+o._port))}):(r.swarms[o.infoHashHex]=o,r.listening&&process.nextTick(function(){o._onListening(r.port)}),void debug("add swarm %s to tcp pool %s",o.infoHashHex,r.port))},TCPPool.prototype.removeSwarm=function(o){var r=this;debug("remove swarm %s from tcp pool %s",o.infoHashHex,r.port),r.swarms[o.infoHashHex]=null},TCPPool.prototype.destroy=function(o){var r=this;o&&(o=dezalgo(o)),debug("destroy tcp pool %s",r.port),r.listening=!1,r.pendingConns.forEach(function(o){o.destroy()}),tcpPools[r.port]=null;try{r.server.close(o)}catch(n){o&&o(null)}},TCPPool.prototype._onListening=function(){var o=this,r=o.server.address()||{port:0},n=r.port;debug("tcp pool listening on %s",n),n!==o.port&&(tcpPools[o.port]=null,o.port=n,tcpPools[o.port]=o),o.listening=!0;for(var e in o.swarms){var t=o.swarms[e];t&&t._onListening(o.port)}},TCPPool.prototype._onConnection=function(o){function r(){n.pendingConns.splice(n.pendingConns.indexOf(o))}var n=this;n.pendingConns.push(o),o.once("close",r);var e=Peer.createIncomingTCPPeer(o);e.wire.once("handshake",function(t,s){var i=t.toString("hex");r(),o.removeListener("close",r);var a=n.swarms[i];if(a)e.swarm=a,a._addIncomingPeer(e),e.onHandshake(t,s);else{var p=new Error("Unexpected info hash "+i+" from incoming peer "+e.id+": destroying peer");e.destroy(p)}})},TCPPool.prototype._onError=function(o){var r=this;r.destroy();for(var n in r.swarms){var e=r.swarms[n];e&&(r.removeSwarm(e),e._onError(o))}};

}).call(this,require('_process'))

},{"./peer":57,"_process":15,"debug":114,"dezalgo":65,"net":3}],59:[function(require,module,exports){
(function (Buffer){
function WebConn(e,t){var n=this;Wire.call(this),n.url=e,n.parsedTorrent=t,n.setKeepAlive(!0),n.on("handshake",function(t,r){n.handshake(t,new Buffer(20).fill(e));for(var i=n.parsedTorrent.pieces.length,o=new BitField(i),d=0;i>=d;d++)o.set(d,!0);n.bitfield(o)}),n.on("choke",function(){debug("choke")}),n.on("unchoke",function(){debug("unchoke")}),n.once("interested",function(){debug("interested"),n.unchoke()}),n.on("uninterested",function(){debug("uninterested")}),n.on("bitfield",function(){debug("bitfield")}),n.on("request",function(e,t,r,i){debug("request pieceIndex=%d offset=%d length=%d",e,t,r),n.httpRequest(e,t,r,i)})}module.exports=WebConn;var BitField=require("bitfield"),debug=require("debug")("bittorrent-swarm:webconn"),get=require("simple-get"),inherits=require("inherits"),Wire=require("bittorrent-protocol");inherits(WebConn,Wire),WebConn.prototype.httpRequest=function(e,t,n,r){var i=this,o=e*i.parsedTorrent.pieceLength,d=o+t,u=d+n-1;debug("Requesting pieceIndex=%d offset=%d length=%d start=%d end=%d",e,t,n,d,u);var s={url:i.url,method:"GET",headers:{"user-agent":"WebTorrent (http://webtorrent.io)",range:"bytes="+d+"-"+u}};get.concat(s,function(e,t,n){return e?r(e):n.statusCode<200||n.statusCode>=300?r(new Error("Unexpected HTTP status code "+n.statusCode)):(debug("Got data of length %d",t.length),void r(null,t))})};

}).call(this,require("buffer").Buffer)

},{"bitfield":55,"bittorrent-protocol":60,"buffer":4,"debug":114,"inherits":122,"simple-get":69}],60:[function(require,module,exports){
(function (Buffer){
function Request(e,t,i,s){this.piece=e,this.offset=t,this.length=i,this.callback=s}function Wire(){return this instanceof Wire?(stream.Duplex.call(this),this._debugId=hat(32),this._debug("new wire"),this.amChoking=!0,this.amInterested=!1,this.peerChoking=!0,this.peerInterested=!1,this.peerPieces=new BitField(0,{grow:BITFIELD_GROW}),this.peerExtensions={},this.requests=[],this.peerRequests=[],this.extendedMapping={},this.peerExtendedMapping={},this.extendedHandshake={},this.peerExtendedHandshake={},this._ext={},this._nextExt=1,this.uploaded=0,this.downloaded=0,this.uploadSpeed=speedometer(),this.downloadSpeed=speedometer(),this._keepAliveInterval=null,this._timeout=null,this._timeoutMs=0,this.destroyed=!1,this._finished=!1,this._buffer=[],this._bufferSize=0,this._parser=null,this._parserSize=0,this.on("finish",this._onfinish),void this._parseHandshake()):new Wire}function pull(e,t,i,s){for(var n=0;n<e.length;n++){var r=e[n];if(r.piece===t&&r.offset===i&&r.length===s)return 0===n?e.shift():e.splice(n,1),r}return null}module.exports=Wire;var bencode=require("bencode"),BitField=require("bitfield"),debug=require("debug")("bittorrent-protocol"),extend=require("xtend"),hat=require("hat"),inherits=require("inherits"),speedometer=require("speedometer"),stream=require("stream"),BITFIELD_GROW=4e5,MESSAGE_PROTOCOL=new Buffer("BitTorrent protocol"),MESSAGE_KEEP_ALIVE=new Buffer([0,0,0,0]),MESSAGE_CHOKE=new Buffer([0,0,0,1,0]),MESSAGE_UNCHOKE=new Buffer([0,0,0,1,1]),MESSAGE_INTERESTED=new Buffer([0,0,0,1,2]),MESSAGE_UNINTERESTED=new Buffer([0,0,0,1,3]),MESSAGE_RESERVED=[0,0,0,0,0,0,0,0],MESSAGE_PORT=[0,0,0,3,9,0,0];inherits(Wire,stream.Duplex),Wire.prototype.setKeepAlive=function(e){this._debug("setKeepAlive %s",e),clearInterval(this._keepAliveInterval),e!==!1&&(this._keepAliveInterval=setInterval(this.keepAlive.bind(this),6e4))},Wire.prototype.setTimeout=function(e,t){this._debug("setTimeout ms=%d unref=%s",e,t),this._clearTimeout(),this._timeoutMs=e,this._timeoutUnref=!!t,this._updateTimeout()},Wire.prototype.destroy=function(){this.destroyed||(this.destroyed=!0,this._debug("destroy"),this.emit("close"),this.end())},Wire.prototype.end=function(){this._debug("end"),this._onUninterested(),this._onChoke(),stream.Duplex.prototype.end.apply(this,arguments)},Wire.prototype.use=function(e){function t(){}var i=e.prototype.name;if(!i)throw new Error('Extension class requires a "name" property on the prototype');this._debug("use extension.name=%s",i);var s=this._nextExt,n=new e(this);"function"!=typeof n.onHandshake&&(n.onHandshake=t),"function"!=typeof n.onExtendedHandshake&&(n.onExtendedHandshake=t),"function"!=typeof n.onMessage&&(n.onMessage=t),this.extendedMapping[s]=i,this._ext[i]=n,this[i]=n,this._nextExt+=1},Wire.prototype.keepAlive=function(){this._debug("keep-alive"),this._push(MESSAGE_KEEP_ALIVE)},Wire.prototype.handshake=function(e,t,i){if("string"==typeof e&&(e=new Buffer(e,"hex")),"string"==typeof t&&(t=new Buffer(t,"hex")),20!==e.length||20!==t.length)throw new Error("infoHash and peerId MUST have length 20");this._debug("handshake i=%s p=%s exts=%o",e.toString("hex"),t.toString("hex"),i);var s=new Buffer(MESSAGE_RESERVED);s[5]|=16,i&&i.dht&&(s[7]|=1),this._push(Buffer.concat([MESSAGE_PROTOCOL,s,e,t])),this._handshakeSent=!0,this.peerExtensions.extended&&this._sendExtendedHandshake()},Wire.prototype._sendExtendedHandshake=function(){var e=extend(this.extendedHandshake);e.m={};for(var t in this.extendedMapping){var i=this.extendedMapping[t];e.m[i]=Number(t)}this.extended(0,bencode.encode(e))},Wire.prototype.choke=function(){this.amChoking||(this.amChoking=!0,this._debug("choke"),this.peerRequests.splice(0,this.peerRequests.length),this._push(MESSAGE_CHOKE))},Wire.prototype.unchoke=function(){this.amChoking&&(this.amChoking=!1,this._debug("unchoke"),this._push(MESSAGE_UNCHOKE))},Wire.prototype.interested=function(){this.amInterested||(this.amInterested=!0,this._debug("interested"),this._push(MESSAGE_INTERESTED))},Wire.prototype.uninterested=function(){this.amInterested&&(this.amInterested=!1,this._debug("uninterested"),this._push(MESSAGE_UNINTERESTED))},Wire.prototype.have=function(e){this._debug("have %d",e),this._message(4,[e],null)},Wire.prototype.bitfield=function(e){this._debug("bitfield"),Buffer.isBuffer(e)||(e=e.buffer),this._message(5,[],e)},Wire.prototype.request=function(e,t,i,s){return s||(s=function(){}),this._finished?s(new Error("wire is closed")):this.peerChoking?s(new Error("peer is choking")):(this._debug("request index=%d offset=%d length=%d",e,t,i),this.requests.push(new Request(e,t,i,s)),this._updateTimeout(),void this._message(6,[e,t,i],null))},Wire.prototype.piece=function(e,t,i){this._debug("piece index=%d offset=%d",e,t),this.uploaded+=i.length,this.uploadSpeed(i.length),this.emit("upload",i.length),this._message(7,[e,t],i)},Wire.prototype.cancel=function(e,t,i){this._debug("cancel index=%d offset=%d length=%d",e,t,i),this._callback(pull(this.requests,e,t,i),new Error("request was cancelled"),null),this._message(8,[e,t,i],null)},Wire.prototype.port=function(e){this._debug("port %d",e);var t=new Buffer(MESSAGE_PORT);t.writeUInt16BE(e,5),this._push(t)},Wire.prototype.extended=function(e,t){if(this._debug("extended ext=%s",e),"string"==typeof e&&this.peerExtendedMapping[e]&&(e=this.peerExtendedMapping[e]),"number"!=typeof e)throw new Error("Unrecognized extension: "+e);var i=new Buffer([e]),s=Buffer.isBuffer(t)?t:bencode.encode(t);this._message(20,[],Buffer.concat([i,s]))},Wire.prototype._onKeepAlive=function(){this._debug("got keep-alive"),this.emit("keep-alive")},Wire.prototype._onHandshake=function(e,t,i){this._debug("got handshake i=%s p=%s exts=%o",e.toString("hex"),t.toString("hex"),i),this.peerId=t,this.peerExtensions=i,this.emit("handshake",e,t,i);var s;for(s in this._ext)this._ext[s].onHandshake(e,t,i);i.extended&&this._handshakeSent&&this._sendExtendedHandshake()},Wire.prototype._onChoke=function(){for(this.peerChoking=!0,this._debug("got choke"),this.emit("choke");this.requests.length;)this._callback(this.requests.shift(),new Error("peer is choking"),null)},Wire.prototype._onUnchoke=function(){this.peerChoking=!1,this._debug("got unchoke"),this.emit("unchoke")},Wire.prototype._onInterested=function(){this.peerInterested=!0,this._debug("got interested"),this.emit("interested")},Wire.prototype._onUninterested=function(){this.peerInterested=!1,this._debug("got uninterested"),this.emit("uninterested")},Wire.prototype._onHave=function(e){this.peerPieces.get(e)||(this._debug("got have %d",e),this.peerPieces.set(e,!0),this.emit("have",e))},Wire.prototype._onBitField=function(e){this.peerPieces=new BitField(e),this._debug("got bitfield"),this.emit("bitfield",this.peerPieces)},Wire.prototype._onRequest=function(e,t,i){if(!this.amChoking){this._debug("got request index=%d offset=%d length=%d",e,t,i);var s=function(s,r){n===pull(this.peerRequests,e,t,i)&&(s||this.piece(e,t,r))}.bind(this),n=new Request(e,t,i,s);this.peerRequests.push(n),this.emit("request",e,t,i,s)}},Wire.prototype._onPiece=function(e,t,i){this._debug("got piece index=%d offset=%d",e,t),this._callback(pull(this.requests,e,t,i.length),null,i),this.downloaded+=i.length,this.downloadSpeed(i.length),this.emit("download",i.length),this.emit("piece",e,t,i)},Wire.prototype._onCancel=function(e,t,i){this._debug("got cancel index=%d offset=%d length=%d",e,t,i),pull(this.peerRequests,e,t,i),this.emit("cancel",e,t,i)},Wire.prototype._onPort=function(e){this._debug("got port %d",e),this.emit("port",e)},Wire.prototype._onExtended=function(e,t){if(0===e){var i;try{i=bencode.decode(t)}catch(s){this._debug("ignoring invalid extended handshake: %s",s.message||s)}if(!i)return;this.peerExtendedHandshake=i;var n;if("object"==typeof i.m)for(n in i.m)this.peerExtendedMapping[n]=Number(i.m[n].toString());for(n in this._ext)this.peerExtendedMapping[n]&&this._ext[n].onExtendedHandshake(this.peerExtendedHandshake);this._debug("got extended handshake"),this.emit("extended","handshake",this.peerExtendedHandshake)}else this.extendedMapping[e]&&(e=this.extendedMapping[e],this._ext[e]&&this._ext[e].onMessage(t)),this._debug("got extended message ext=%s",e),this.emit("extended",e,t)},Wire.prototype._onTimeout=function(){this._debug("request timed out"),this._callback(this.requests.shift(),new Error("request has timed out"),null),this.emit("timeout")},Wire.prototype._push=function(e){return this._finished?void 0:this.push(e)},Wire.prototype._write=function(e,t,i){for(this._bufferSize+=e.length,this._buffer.push(e);this._bufferSize>=this._parserSize;){var s=1===this._buffer.length?this._buffer[0]:Buffer.concat(this._buffer);this._bufferSize-=this._parserSize,this._buffer=this._bufferSize?[s.slice(this._parserSize)]:[],this._parser(s.slice(0,this._parserSize))}i(null)},Wire.prototype._read=function(){},Wire.prototype._callback=function(e,t,i){e&&(this._clearTimeout(),this.peerChoking||this._finished||this._updateTimeout(),e.callback(t,i))},Wire.prototype._clearTimeout=function(){this._timeout&&(clearTimeout(this._timeout),this._timeout=null)},Wire.prototype._updateTimeout=function(){this._timeoutMs&&this.requests.length&&!this._timeout&&(this._timeout=setTimeout(this._onTimeout.bind(this),this._timeoutMs),this._timeoutUnref&&this._timeout.unref&&this._timeout.unref())},Wire.prototype._parse=function(e,t){this._parserSize=e,this._parser=t},Wire.prototype._message=function(e,t,i){var s=i?i.length:0,n=new Buffer(5+4*t.length);n.writeUInt32BE(n.length+s-4,0),n[4]=e;for(var r=0;r<t.length;r++)n.writeUInt32BE(t[r],5+4*r);this._push(n),i&&this._push(i)},Wire.prototype._onmessagelength=function(e){var t=e.readUInt32BE(0);t>0?this._parse(t,this._onmessage):(this._onKeepAlive(),this._parse(4,this._onmessagelength))},Wire.prototype._onmessage=function(e){switch(this._parse(4,this._onmessagelength),e[0]){case 0:return this._onChoke();case 1:return this._onUnchoke();case 2:return this._onInterested();case 3:return this._onUninterested();case 4:return this._onHave(e.readUInt32BE(1));case 5:return this._onBitField(e.slice(1));case 6:return this._onRequest(e.readUInt32BE(1),e.readUInt32BE(5),e.readUInt32BE(9));case 7:return this._onPiece(e.readUInt32BE(1),e.readUInt32BE(5),e.slice(9));case 8:return this._onCancel(e.readUInt32BE(1),e.readUInt32BE(5),e.readUInt32BE(9));case 9:return this._onPort(e.readUInt16BE(1));case 20:return this._onExtended(e.readUInt8(1),e.slice(2));default:return this._debug("got unknown message"),this.emit("unknownmessage",e)}},Wire.prototype._parseHandshake=function(){this._parse(1,function(e){var t=e.readUInt8(0);this._parse(t+48,function(e){var i=e.slice(0,t);return"BitTorrent protocol"!==i.toString()?(this._debug("Error: wire not speaking BitTorrent protocol (%s)",i.toString()),void this.end()):(e=e.slice(t),this._onHandshake(e.slice(8,28),e.slice(28,48),{dht:!!(1&e[7]),extended:!!(16&e[5])}),void this._parse(4,this._onmessagelength))}.bind(this))}.bind(this))},Wire.prototype._onfinish=function(){for(this._finished=!0,this.push(null);this.read(););for(clearInterval(this._keepAliveInterval),this._parse(Number.MAX_VALUE,function(){}),this.peerRequests=[];this.requests.length;)this._callback(this.requests.shift(),new Error("wire was closed"),null)},Wire.prototype._debug=function(){var e=[].slice.call(arguments);e[0]="["+this._debugId+"] "+e[0],debug.apply(null,e)};

}).call(this,require("buffer").Buffer)

},{"bencode":61,"bitfield":55,"buffer":4,"debug":114,"hat":120,"inherits":122,"speedometer":154,"stream":33,"xtend":184}],61:[function(require,module,exports){
module.exports={encode:require("./lib/encode"),decode:require("./lib/decode")};

},{"./lib/decode":62,"./lib/encode":64}],62:[function(require,module,exports){
(function (Buffer){
function decode(e,d){return decode.position=0,decode.encoding=d||null,decode.data=Buffer.isBuffer(e)?e:new Buffer(e),decode.next()}var Dict=require("./dict");decode.position=0,decode.data=null,decode.encoding=null,decode.next=function(){switch(decode.data[decode.position]){case 100:return decode.dictionary();case 108:return decode.list();case 105:return decode.integer();default:return decode.bytes()}},decode.find=function(e){for(var d=decode.position,o=decode.data.length,t=decode.data;o>d;){if(t[d]===e)return d;d++}throw new Error('Invalid data: Missing delimiter "'+String.fromCharCode(e)+'" [0x'+e.toString(16)+"]")},decode.dictionary=function(){decode.position++;for(var e=new Dict;101!==decode.data[decode.position];)e.binarySet(decode.bytes(),decode.next());return decode.position++,e},decode.list=function(){decode.position++;for(var e=[];101!==decode.data[decode.position];)e.push(decode.next());return decode.position++,e},decode.integer=function(){var e=decode.find(101),d=decode.data.toString("ascii",decode.position+1,e);return decode.position+=e+1-decode.position,parseInt(d,10)},decode.bytes=function(){var e=decode.find(58),d=parseInt(decode.data.toString("ascii",decode.position,e),10),o=++e+d;return decode.position=o,decode.encoding?decode.data.toString(decode.encoding,e,o):decode.data.slice(e,o)},module.exports=decode;

}).call(this,require("buffer").Buffer)

},{"./dict":63,"buffer":4}],63:[function(require,module,exports){
var Dict=module.exports=function(){Object.defineProperty(this,"_keys",{enumerable:!1,value:[]})};Dict.prototype.binaryKeys=function(){return this._keys.slice()},Dict.prototype.binarySet=function(e,t){this._keys.push(e),this[e]=t};

},{}],64:[function(require,module,exports){
(function (Buffer){
function encode(e){var n=[];return encode._encode(n,e),Buffer.concat(n)}encode._floatConversionDetected=!1,encode._encode=function(e,n){if(Buffer.isBuffer(n))return e.push(new Buffer(n.length+":")),void e.push(n);switch(typeof n){case"string":encode.bytes(e,n);break;case"number":encode.number(e,n);break;case"object":n.constructor===Array?encode.list(e,n):encode.dict(e,n)}};var buff_e=new Buffer("e"),buff_d=new Buffer("d"),buff_l=new Buffer("l");encode.bytes=function(e,n){e.push(new Buffer(Buffer.byteLength(n)+":"+n))},encode.number=function(e,n){var o=2147483648,c=n/o<<0,f=n%o<<0,t=c*o+f;e.push(new Buffer("i"+t+"e")),t===n||encode._floatConversionDetected||(encode._floatConversionDetected=!0,console.warn('WARNING: Possible data corruption detected with value "'+n+'":','Bencoding only defines support for integers, value was converted to "'+t+'"'),console.trace())},encode.dict=function(e,n){e.push(buff_d);for(var o,c=0,f=Object.keys(n).sort(),t=f.length;t>c;c++)o=f[c],encode.bytes(e,o),encode._encode(e,n[o]);e.push(buff_e)},encode.list=function(e,n){var o=0,c=n.length;for(e.push(buff_l);c>o;o++)encode._encode(e,n[o]);e.push(buff_e)},module.exports=encode;

}).call(this,require("buffer").Buffer)

},{"buffer":4}],65:[function(require,module,exports){
function dezalgo(a){var p=!0;return asap(function(){p=!1}),function(){var r=arguments,e=this;p?asap(function(){a.apply(e,r)}):a.apply(e,r)}}var wrappy=require("wrappy");module.exports=wrappy(dezalgo);var asap=require("asap");

},{"asap":66,"wrappy":68}],66:[function(require,module,exports){
"use strict";function throwFirstError(){if(pendingErrors.length)throw pendingErrors.shift()}function asap(r){var s;s=freeTasks.length?freeTasks.pop():new RawTask,s.task=r,rawAsap(s)}function RawTask(){this.task=null}var rawAsap=require("./raw"),freeTasks=[],pendingErrors=[],requestErrorThrow=rawAsap.makeRequestCallFromTimer(throwFirstError);module.exports=asap,RawTask.prototype.call=function(){try{this.task.call()}catch(r){asap.onerror?asap.onerror(r):(pendingErrors.push(r),requestErrorThrow())}finally{this.task=null,freeTasks[freeTasks.length]=this}};

},{"./raw":67}],67:[function(require,module,exports){
(function (global){
"use strict";function rawAsap(e){queue.length||(requestFlush(),flushing=!0),queue[queue.length]=e}function flush(){for(;index<queue.length;){var e=index;if(index+=1,queue[e].call(),index>capacity){for(var u=0,r=queue.length-index;r>u;u++)queue[u]=queue[u+index];queue.length-=index,index=0}}queue.length=0,index=0,flushing=!1}function makeRequestCallFromMutationObserver(e){var u=1,r=new BrowserMutationObserver(e),t=document.createTextNode("");return r.observe(t,{characterData:!0}),function(){u=-u,t.data=u}}function makeRequestCallFromTimer(e){return function(){function u(){clearTimeout(r),clearInterval(t),e()}var r=setTimeout(u,0),t=setInterval(u,50)}}module.exports=rawAsap;var queue=[],flushing=!1,requestFlush,index=0,capacity=1024,BrowserMutationObserver=global.MutationObserver||global.WebKitMutationObserver;requestFlush="function"==typeof BrowserMutationObserver?makeRequestCallFromMutationObserver(flush):makeRequestCallFromTimer(flush),rawAsap.requestFlush=requestFlush,rawAsap.makeRequestCallFromTimer=makeRequestCallFromTimer;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],68:[function(require,module,exports){
function wrappy(n,r){function e(){for(var r=new Array(arguments.length),e=0;e<r.length;e++)r[e]=arguments[e];var t=n.apply(this,r),o=r[r.length-1];return"function"==typeof t&&t!==o&&Object.keys(o).forEach(function(n){t[n]=o[n]}),t}if(n&&r)return wrappy(n)(r);if("function"!=typeof n)throw new TypeError("need wrapper function");return Object.keys(n).forEach(function(r){e[r]=n[r]}),e}module.exports=wrappy;

},{}],69:[function(require,module,exports){
(function (Buffer){
function simpleGet(e,t){e="string"==typeof e?{url:e}:extend(e),t=once(t),e.url&&parseOptsUrl(e),null==e.headers&&(e.headers={}),null==e.maxRedirects&&(e.maxRedirects=10);var r=e.body;e.body=void 0,r&&!e.method&&(e.method="POST");var o=Object.keys(e.headers).some(function(e){return"accept-encoding"===e.toLowerCase()});o||(e.headers["accept-encoding"]="gzip, deflate");var n="https:"===e.protocol?https:http,s=n.request(e,function(r){return r.statusCode>=300&&r.statusCode<400&&"location"in r.headers?(e.url=r.headers.location,parseOptsUrl(e),r.resume(),e.maxRedirects-=1,void(e.maxRedirects>0?simpleGet(e,t):t(new Error("too many redirects")))):void t(null,"function"==typeof unzipResponse?unzipResponse(r):r)});return s.on("error",t),s.end(r),s}function parseOptsUrl(e){var t=url.parse(e.url);t.hostname&&(e.hostname=t.hostname),t.port&&(e.port=t.port),t.protocol&&(e.protocol=t.protocol),e.path=t.path,delete e.url}module.exports=simpleGet;var extend=require("xtend"),http=require("http"),https=require("https"),once=require("once"),unzipResponse=require("unzip-response"),url=require("url");module.exports.concat=function(e,t){return simpleGet(e,function(e,r){if(e)return t(e);var o=[];r.on("data",function(e){o.push(e)}),r.on("end",function(){t(null,Buffer.concat(o),r)})})},["get","post","put","patch","head","delete"].forEach(function(e){module.exports[e]=function(t,r){return"string"==typeof t&&(t={url:t}),t.method=e.toUpperCase(),simpleGet(t,r)}});

}).call(this,require("buffer").Buffer)

},{"buffer":4,"http":34,"https":9,"once":71,"unzip-response":3,"url":44,"xtend":184}],70:[function(require,module,exports){
function wrappy(n,r){function e(){for(var r=new Array(arguments.length),e=0;e<r.length;e++)r[e]=arguments[e];var t=n.apply(this,r),o=r[r.length-1];return"function"==typeof t&&t!==o&&Object.keys(o).forEach(function(n){t[n]=o[n]}),t}if(n&&r)return wrappy(n)(r);if("function"!=typeof n)throw new TypeError("need wrapper function");return Object.keys(n).forEach(function(r){e[r]=n[r]}),e}module.exports=wrappy;

},{}],71:[function(require,module,exports){
function once(e){var n=function(){return n.called?n.value:(n.called=!0,n.value=e.apply(this,arguments))};return n.called=!1,n}var wrappy=require("wrappy");module.exports=wrappy(once),once.proto=once(function(){Object.defineProperty(Function.prototype,"once",{value:function(){return once(this)},configurable:!0})});

},{"wrappy":70}],72:[function(require,module,exports){
(function (Buffer){
function Block(e,s){return this instanceof Block?(Transform.call(this),s||(s={}),"object"==typeof e&&(s=e,e=s.size),this.size=e||512,s.nopad?this._zeroPadding=!1:this._zeroPadding=defined(s.zeroPadding,!0),this._buffered=[],void(this._bufferedBytes=0)):new Block(e,s)}var inherits=require("inherits"),Transform=require("readable-stream").Transform,defined=require("defined");module.exports=Block,inherits(Block,Transform),Block.prototype._transform=function(e,s,i){for(this._bufferedBytes+=e.length,this._buffered.push(e);this._bufferedBytes>=this.size;){var t=Buffer.concat(this._buffered);this._bufferedBytes-=this.size,this.push(t.slice(0,this.size)),this._buffered=[t.slice(this.size,t.length)]}i()},Block.prototype._flush=function(){if(this._bufferedBytes&&this._zeroPadding){var e=new Buffer(this.size-this._bufferedBytes);e.fill(0),this._buffered.push(e),this.push(Buffer.concat(this._buffered)),this._buffered=null}else this._bufferedBytes&&(this.push(Buffer.concat(this._buffered)),this._buffered=null);this.push(null)};

}).call(this,require("buffer").Buffer)

},{"buffer":4,"defined":73,"inherits":122,"readable-stream":82}],73:[function(require,module,exports){
module.exports=function(){for(var r=0;r<arguments.length;r++)if(void 0!==arguments[r])return arguments[r]};

},{}],74:[function(require,module,exports){
(function (process){
function Duplex(e){return this instanceof Duplex?(Readable.call(this,e),Writable.call(this,e),e&&e.readable===!1&&(this.readable=!1),e&&e.writable===!1&&(this.writable=!1),this.allowHalfOpen=!0,e&&e.allowHalfOpen===!1&&(this.allowHalfOpen=!1),void this.once("end",onend)):new Duplex(e)}function onend(){this.allowHalfOpen||this._writableState.ended||process.nextTick(this.end.bind(this))}function forEach(e,t){for(var i=0,r=e.length;r>i;i++)t(e[i],i)}module.exports=Duplex;var objectKeys=Object.keys||function(e){var t=[];for(var i in e)t.push(i);return t},util=require("core-util-is");util.inherits=require("inherits");var Readable=require("./_stream_readable"),Writable=require("./_stream_writable");util.inherits(Duplex,Readable),forEach(objectKeys(Writable.prototype),function(e){Duplex.prototype[e]||(Duplex.prototype[e]=Writable.prototype[e])});

}).call(this,require('_process'))

},{"./_stream_readable":76,"./_stream_writable":78,"_process":15,"core-util-is":79,"inherits":122}],75:[function(require,module,exports){
function PassThrough(r){return this instanceof PassThrough?void Transform.call(this,r):new PassThrough(r)}module.exports=PassThrough;var Transform=require("./_stream_transform"),util=require("core-util-is");util.inherits=require("inherits"),util.inherits(PassThrough,Transform),PassThrough.prototype._transform=function(r,s,i){i(null,r)};

},{"./_stream_transform":77,"core-util-is":79,"inherits":122}],76:[function(require,module,exports){
(function (process){
function ReadableState(e,t){var n=require("./_stream_duplex");e=e||{};var r=e.highWaterMark,i=e.objectMode?16:16384;this.highWaterMark=r||0===r?r:i,this.highWaterMark=~~this.highWaterMark,this.buffer=[],this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.objectMode=!!e.objectMode,t instanceof n&&(this.objectMode=this.objectMode||!!e.readableObjectMode),this.defaultEncoding=e.defaultEncoding||"utf8",this.ranOut=!1,this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(StringDecoder||(StringDecoder=require("string_decoder/").StringDecoder),this.decoder=new StringDecoder(e.encoding),this.encoding=e.encoding)}function Readable(e){require("./_stream_duplex");return this instanceof Readable?(this._readableState=new ReadableState(e,this),this.readable=!0,void Stream.call(this)):new Readable(e)}function readableAddChunk(e,t,n,r,i){var a=chunkInvalid(t,n);if(a)e.emit("error",a);else if(util.isNullOrUndefined(n))t.reading=!1,t.ended||onEofChunk(e,t);else if(t.objectMode||n&&n.length>0)if(t.ended&&!i){var d=new Error("stream.push() after EOF");e.emit("error",d)}else if(t.endEmitted&&i){var d=new Error("stream.unshift() after end event");e.emit("error",d)}else!t.decoder||i||r||(n=t.decoder.write(n)),i||(t.reading=!1),t.flowing&&0===t.length&&!t.sync?(e.emit("data",n),e.read(0)):(t.length+=t.objectMode?1:n.length,i?t.buffer.unshift(n):t.buffer.push(n),t.needReadable&&emitReadable(e)),maybeReadMore(e,t);else i||(t.reading=!1);return needMoreData(t)}function needMoreData(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}function roundUpToNextPowerOf2(e){if(e>=MAX_HWM)e=MAX_HWM;else{e--;for(var t=1;32>t;t<<=1)e|=e>>t;e++}return e}function howMuchToRead(e,t){return 0===t.length&&t.ended?0:t.objectMode?0===e?0:1:isNaN(e)||util.isNull(e)?t.flowing&&t.buffer.length?t.buffer[0].length:t.length:0>=e?0:(e>t.highWaterMark&&(t.highWaterMark=roundUpToNextPowerOf2(e)),e>t.length?t.ended?t.length:(t.needReadable=!0,0):e)}function chunkInvalid(e,t){var n=null;return util.isBuffer(t)||util.isString(t)||util.isNullOrUndefined(t)||e.objectMode||(n=new TypeError("Invalid non-string/buffer chunk")),n}function onEofChunk(e,t){if(t.decoder&&!t.ended){var n=t.decoder.end();n&&n.length&&(t.buffer.push(n),t.length+=t.objectMode?1:n.length)}t.ended=!0,emitReadable(e)}function emitReadable(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(debug("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?process.nextTick(function(){emitReadable_(e)}):emitReadable_(e))}function emitReadable_(e){debug("emit readable"),e.emit("readable"),flow(e)}function maybeReadMore(e,t){t.readingMore||(t.readingMore=!0,process.nextTick(function(){maybeReadMore_(e,t)}))}function maybeReadMore_(e,t){for(var n=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(debug("maybeReadMore read 0"),e.read(0),n!==t.length);)n=t.length;t.readingMore=!1}function pipeOnDrain(e){return function(){var t=e._readableState;debug("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&EE.listenerCount(e,"data")&&(t.flowing=!0,flow(e))}}function resume(e,t){t.resumeScheduled||(t.resumeScheduled=!0,process.nextTick(function(){resume_(e,t)}))}function resume_(e,t){t.resumeScheduled=!1,e.emit("resume"),flow(e),t.flowing&&!t.reading&&e.read(0)}function flow(e){var t=e._readableState;if(debug("flow",t.flowing),t.flowing)do var n=e.read();while(null!==n&&t.flowing)}function fromList(e,t){var n,r=t.buffer,i=t.length,a=!!t.decoder,d=!!t.objectMode;if(0===r.length)return null;if(0===i)n=null;else if(d)n=r.shift();else if(!e||e>=i)n=a?r.join(""):Buffer.concat(r,i),r.length=0;else if(e<r[0].length){var o=r[0];n=o.slice(0,e),r[0]=o.slice(e)}else if(e===r[0].length)n=r.shift();else{n=a?"":new Buffer(e);for(var l=0,u=0,s=r.length;s>u&&e>l;u++){var o=r[0],h=Math.min(e-l,o.length);a?n+=o.slice(0,h):o.copy(n,l,0,h),h<o.length?r[0]=o.slice(h):r.shift(),l+=h}}return n}function endReadable(e){var t=e._readableState;if(t.length>0)throw new Error("endReadable called on non-empty stream");t.endEmitted||(t.ended=!0,process.nextTick(function(){t.endEmitted||0!==t.length||(t.endEmitted=!0,e.readable=!1,e.emit("end"))}))}function forEach(e,t){for(var n=0,r=e.length;r>n;n++)t(e[n],n)}function indexOf(e,t){for(var n=0,r=e.length;r>n;n++)if(e[n]===t)return n;return-1}module.exports=Readable;var isArray=require("isarray"),Buffer=require("buffer").Buffer;Readable.ReadableState=ReadableState;var EE=require("events").EventEmitter;EE.listenerCount||(EE.listenerCount=function(e,t){return e.listeners(t).length});var Stream=require("stream"),util=require("core-util-is");util.inherits=require("inherits");var StringDecoder,debug=require("util");debug=debug&&debug.debuglog?debug.debuglog("stream"):function(){},util.inherits(Readable,Stream),Readable.prototype.push=function(e,t){var n=this._readableState;return util.isString(e)&&!n.objectMode&&(t=t||n.defaultEncoding,t!==n.encoding&&(e=new Buffer(e,t),t="")),readableAddChunk(this,n,e,t,!1)},Readable.prototype.unshift=function(e){var t=this._readableState;return readableAddChunk(this,t,e,"",!0)},Readable.prototype.setEncoding=function(e){return StringDecoder||(StringDecoder=require("string_decoder/").StringDecoder),this._readableState.decoder=new StringDecoder(e),this._readableState.encoding=e,this};var MAX_HWM=8388608;Readable.prototype.read=function(e){debug("read",e);var t=this._readableState,n=e;if((!util.isNumber(e)||e>0)&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return debug("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?endReadable(this):emitReadable(this),null;if(e=howMuchToRead(e,t),0===e&&t.ended)return 0===t.length&&endReadable(this),null;var r=t.needReadable;debug("need readable",r),(0===t.length||t.length-e<t.highWaterMark)&&(r=!0,debug("length less than watermark",r)),(t.ended||t.reading)&&(r=!1,debug("reading or ended",r)),r&&(debug("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1),r&&!t.reading&&(e=howMuchToRead(n,t));var i;return i=e>0?fromList(e,t):null,util.isNull(i)&&(t.needReadable=!0,e=0),t.length-=e,0!==t.length||t.ended||(t.needReadable=!0),n!==e&&t.ended&&0===t.length&&endReadable(this),util.isNull(i)||this.emit("data",i),i},Readable.prototype._read=function(e){this.emit("error",new Error("not implemented"))},Readable.prototype.pipe=function(e,t){function n(e){debug("onunpipe"),e===s&&i()}function r(){debug("onend"),e.end()}function i(){debug("cleanup"),e.removeListener("close",o),e.removeListener("finish",l),e.removeListener("drain",g),e.removeListener("error",d),e.removeListener("unpipe",n),s.removeListener("end",r),s.removeListener("end",i),s.removeListener("data",a),!h.awaitDrain||e._writableState&&!e._writableState.needDrain||g()}function a(t){debug("ondata");var n=e.write(t);!1===n&&(debug("false write response, pause",s._readableState.awaitDrain),s._readableState.awaitDrain++,s.pause())}function d(t){debug("onerror",t),u(),e.removeListener("error",d),0===EE.listenerCount(e,"error")&&e.emit("error",t)}function o(){e.removeListener("finish",l),u()}function l(){debug("onfinish"),e.removeListener("close",o),u()}function u(){debug("unpipe"),s.unpipe(e)}var s=this,h=this._readableState;switch(h.pipesCount){case 0:h.pipes=e;break;case 1:h.pipes=[h.pipes,e];break;default:h.pipes.push(e)}h.pipesCount+=1,debug("pipe count=%d opts=%j",h.pipesCount,t);var f=(!t||t.end!==!1)&&e!==process.stdout&&e!==process.stderr,b=f?r:i;h.endEmitted?process.nextTick(b):s.once("end",b),e.on("unpipe",n);var g=pipeOnDrain(s);return e.on("drain",g),s.on("data",a),e._events&&e._events.error?isArray(e._events.error)?e._events.error.unshift(d):e._events.error=[d,e._events.error]:e.on("error",d),e.once("close",o),e.once("finish",l),e.emit("pipe",s),h.flowing||(debug("pipe resume"),s.resume()),e},Readable.prototype.unpipe=function(e){var t=this._readableState;if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes?this:(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this),this);if(!e){var n=t.pipes,r=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var i=0;r>i;i++)n[i].emit("unpipe",this);return this}var i=indexOf(t.pipes,e);return-1===i?this:(t.pipes.splice(i,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this),this)},Readable.prototype.on=function(e,t){var n=Stream.prototype.on.call(this,e,t);if("data"===e&&!1!==this._readableState.flowing&&this.resume(),"readable"===e&&this.readable){var r=this._readableState;if(!r.readableListening)if(r.readableListening=!0,r.emittedReadable=!1,r.needReadable=!0,r.reading)r.length&&emitReadable(this,r);else{var i=this;process.nextTick(function(){debug("readable nexttick read 0"),i.read(0)})}}return n},Readable.prototype.addListener=Readable.prototype.on,Readable.prototype.resume=function(){var e=this._readableState;return e.flowing||(debug("resume"),e.flowing=!0,e.reading||(debug("resume read 0"),this.read(0)),resume(this,e)),this},Readable.prototype.pause=function(){return debug("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(debug("pause"),this._readableState.flowing=!1,this.emit("pause")),this},Readable.prototype.wrap=function(e){var t=this._readableState,n=!1,r=this;e.on("end",function(){if(debug("wrapped end"),t.decoder&&!t.ended){var e=t.decoder.end();e&&e.length&&r.push(e)}r.push(null)}),e.on("data",function(i){if(debug("wrapped data"),t.decoder&&(i=t.decoder.write(i)),i&&(t.objectMode||i.length)){var a=r.push(i);a||(n=!0,e.pause())}});for(var i in e)util.isFunction(e[i])&&util.isUndefined(this[i])&&(this[i]=function(t){return function(){return e[t].apply(e,arguments)}}(i));var a=["error","close","destroy","pause","resume"];return forEach(a,function(t){e.on(t,r.emit.bind(r,t))}),r._read=function(t){debug("wrapped _read",t),n&&(n=!1,e.resume())},r},Readable._fromList=fromList;

}).call(this,require('_process'))

},{"./_stream_duplex":74,"_process":15,"buffer":4,"core-util-is":79,"events":8,"inherits":122,"isarray":80,"stream":33,"string_decoder/":81,"util":3}],77:[function(require,module,exports){
function TransformState(r,t){this.afterTransform=function(r,n){return afterTransform(t,r,n)},this.needTransform=!1,this.transforming=!1,this.writecb=null,this.writechunk=null}function afterTransform(r,t,n){var e=r._transformState;e.transforming=!1;var i=e.writecb;if(!i)return r.emit("error",new Error("no writecb in Transform class"));e.writechunk=null,e.writecb=null,util.isNullOrUndefined(n)||r.push(n),i&&i(t);var a=r._readableState;a.reading=!1,(a.needReadable||a.length<a.highWaterMark)&&r._read(a.highWaterMark)}function Transform(r){if(!(this instanceof Transform))return new Transform(r);Duplex.call(this,r),this._transformState=new TransformState(r,this);var t=this;this._readableState.needReadable=!0,this._readableState.sync=!1,this.once("prefinish",function(){util.isFunction(this._flush)?this._flush(function(r){done(t,r)}):done(t)})}function done(r,t){if(t)return r.emit("error",t);var n=r._writableState,e=r._transformState;if(n.length)throw new Error("calling transform done when ws.length != 0");if(e.transforming)throw new Error("calling transform done when still transforming");return r.push(null)}module.exports=Transform;var Duplex=require("./_stream_duplex"),util=require("core-util-is");util.inherits=require("inherits"),util.inherits(Transform,Duplex),Transform.prototype.push=function(r,t){return this._transformState.needTransform=!1,Duplex.prototype.push.call(this,r,t)},Transform.prototype._transform=function(r,t,n){throw new Error("not implemented")},Transform.prototype._write=function(r,t,n){var e=this._transformState;if(e.writecb=n,e.writechunk=r,e.writeencoding=t,!e.transforming){var i=this._readableState;(e.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},Transform.prototype._read=function(r){var t=this._transformState;util.isNull(t.writechunk)||!t.writecb||t.transforming?t.needTransform=!0:(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform))};

},{"./_stream_duplex":74,"core-util-is":79,"inherits":122}],78:[function(require,module,exports){
(function (process){
function WriteReq(e,i,t){this.chunk=e,this.encoding=i,this.callback=t}function WritableState(e,i){var t=require("./_stream_duplex");e=e||{};var r=e.highWaterMark,n=e.objectMode?16:16384;this.highWaterMark=r||0===r?r:n,this.objectMode=!!e.objectMode,i instanceof t&&(this.objectMode=this.objectMode||!!e.writableObjectMode),this.highWaterMark=~~this.highWaterMark,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1;var o=e.decodeStrings===!1;this.decodeStrings=!o,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){onwrite(i,e)},this.writecb=null,this.writelen=0,this.buffer=[],this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1}function Writable(e){var i=require("./_stream_duplex");return this instanceof Writable||this instanceof i?(this._writableState=new WritableState(e,this),this.writable=!0,void Stream.call(this)):new Writable(e)}function writeAfterEnd(e,i,t){var r=new Error("write after end");e.emit("error",r),process.nextTick(function(){t(r)})}function validChunk(e,i,t,r){var n=!0;if(!(util.isBuffer(t)||util.isString(t)||util.isNullOrUndefined(t)||i.objectMode)){var o=new TypeError("Invalid non-string/buffer chunk");e.emit("error",o),process.nextTick(function(){r(o)}),n=!1}return n}function decodeChunk(e,i,t){return!e.objectMode&&e.decodeStrings!==!1&&util.isString(i)&&(i=new Buffer(i,t)),i}function writeOrBuffer(e,i,t,r,n){t=decodeChunk(i,t,r),util.isBuffer(t)&&(r="buffer");var o=i.objectMode?1:t.length;i.length+=o;var f=i.length<i.highWaterMark;return f||(i.needDrain=!0),i.writing||i.corked?i.buffer.push(new WriteReq(t,r,n)):doWrite(e,i,!1,o,t,r,n),f}function doWrite(e,i,t,r,n,o,f){i.writelen=r,i.writecb=f,i.writing=!0,i.sync=!0,t?e._writev(n,i.onwrite):e._write(n,o,i.onwrite),i.sync=!1}function onwriteError(e,i,t,r,n){t?process.nextTick(function(){i.pendingcb--,n(r)}):(i.pendingcb--,n(r)),e._writableState.errorEmitted=!0,e.emit("error",r)}function onwriteStateUpdate(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}function onwrite(e,i){var t=e._writableState,r=t.sync,n=t.writecb;if(onwriteStateUpdate(t),i)onwriteError(e,t,r,i,n);else{var o=needFinish(e,t);o||t.corked||t.bufferProcessing||!t.buffer.length||clearBuffer(e,t),r?process.nextTick(function(){afterWrite(e,t,o,n)}):afterWrite(e,t,o,n)}}function afterWrite(e,i,t,r){t||onwriteDrain(e,i),i.pendingcb--,r(),finishMaybe(e,i)}function onwriteDrain(e,i){0===i.length&&i.needDrain&&(i.needDrain=!1,e.emit("drain"))}function clearBuffer(e,i){if(i.bufferProcessing=!0,e._writev&&i.buffer.length>1){for(var t=[],r=0;r<i.buffer.length;r++)t.push(i.buffer[r].callback);i.pendingcb++,doWrite(e,i,!0,i.length,i.buffer,"",function(e){for(var r=0;r<t.length;r++)i.pendingcb--,t[r](e)}),i.buffer=[]}else{for(var r=0;r<i.buffer.length;r++){var n=i.buffer[r],o=n.chunk,f=n.encoding,u=n.callback,s=i.objectMode?1:o.length;if(doWrite(e,i,!1,s,o,f,u),i.writing){r++;break}}r<i.buffer.length?i.buffer=i.buffer.slice(r):i.buffer.length=0}i.bufferProcessing=!1}function needFinish(e,i){return i.ending&&0===i.length&&!i.finished&&!i.writing}function prefinish(e,i){i.prefinished||(i.prefinished=!0,e.emit("prefinish"))}function finishMaybe(e,i){var t=needFinish(e,i);return t&&(0===i.pendingcb?(prefinish(e,i),i.finished=!0,e.emit("finish")):prefinish(e,i)),t}function endWritable(e,i,t){i.ending=!0,finishMaybe(e,i),t&&(i.finished?process.nextTick(t):e.once("finish",t)),i.ended=!0}module.exports=Writable;var Buffer=require("buffer").Buffer;Writable.WritableState=WritableState;var util=require("core-util-is");util.inherits=require("inherits");var Stream=require("stream");util.inherits(Writable,Stream),Writable.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe. Not readable."))},Writable.prototype.write=function(e,i,t){var r=this._writableState,n=!1;return util.isFunction(i)&&(t=i,i=null),util.isBuffer(e)?i="buffer":i||(i=r.defaultEncoding),util.isFunction(t)||(t=function(){}),r.ended?writeAfterEnd(this,r,t):validChunk(this,r,e,t)&&(r.pendingcb++,n=writeOrBuffer(this,r,e,i,t)),n},Writable.prototype.cork=function(){var e=this._writableState;e.corked++},Writable.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.buffer.length||clearBuffer(this,e))},Writable.prototype._write=function(e,i,t){t(new Error("not implemented"))},Writable.prototype._writev=null,Writable.prototype.end=function(e,i,t){var r=this._writableState;util.isFunction(e)?(t=e,e=null,i=null):util.isFunction(i)&&(t=i,i=null),util.isNullOrUndefined(e)||this.write(e,i),r.corked&&(r.corked=1,this.uncork()),r.ending||r.finished||endWritable(this,r,t)};

}).call(this,require('_process'))

},{"./_stream_duplex":74,"_process":15,"buffer":4,"core-util-is":79,"inherits":122,"stream":33}],79:[function(require,module,exports){
(function (Buffer){
function isArray(e){return Array.isArray(e)}function isBoolean(e){return"boolean"==typeof e}function isNull(e){return null===e}function isNullOrUndefined(e){return null==e}function isNumber(e){return"number"==typeof e}function isString(e){return"string"==typeof e}function isSymbol(e){return"symbol"==typeof e}function isUndefined(e){return void 0===e}function isRegExp(e){return isObject(e)&&"[object RegExp]"===objectToString(e)}function isObject(e){return"object"==typeof e&&null!==e}function isDate(e){return isObject(e)&&"[object Date]"===objectToString(e)}function isError(e){return isObject(e)&&("[object Error]"===objectToString(e)||e instanceof Error)}function isFunction(e){return"function"==typeof e}function isPrimitive(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||"undefined"==typeof e}function isBuffer(e){return Buffer.isBuffer(e)}function objectToString(e){return Object.prototype.toString.call(e)}exports.isArray=isArray,exports.isBoolean=isBoolean,exports.isNull=isNull,exports.isNullOrUndefined=isNullOrUndefined,exports.isNumber=isNumber,exports.isString=isString,exports.isSymbol=isSymbol,exports.isUndefined=isUndefined,exports.isRegExp=isRegExp,exports.isObject=isObject,exports.isDate=isDate,exports.isError=isError,exports.isFunction=isFunction,exports.isPrimitive=isPrimitive,exports.isBuffer=isBuffer;

}).call(this,{"isBuffer":require("/home/amar/misc/Dropbox/projects/home/filewi.re/node_modules/watchify/node_modules/browserify/node_modules/insert-module-globals/node_modules/is-buffer/index.js")})

},{"/home/amar/misc/Dropbox/projects/home/filewi.re/node_modules/watchify/node_modules/browserify/node_modules/insert-module-globals/node_modules/is-buffer/index.js":11}],80:[function(require,module,exports){
module.exports=Array.isArray||function(r){return"[object Array]"==Object.prototype.toString.call(r)};

},{}],81:[function(require,module,exports){
function assertEncoding(e){if(e&&!isBufferEncoding(e))throw new Error("Unknown encoding: "+e)}function passThroughWrite(e){return e.toString(this.encoding)}function utf16DetectIncompleteChar(e){this.charReceived=e.length%2,this.charLength=this.charReceived?2:0}function base64DetectIncompleteChar(e){this.charReceived=e.length%3,this.charLength=this.charReceived?3:0}var Buffer=require("buffer").Buffer,isBufferEncoding=Buffer.isEncoding||function(e){switch(e&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}},StringDecoder=exports.StringDecoder=function(e){switch(this.encoding=(e||"utf8").toLowerCase().replace(/[-_]/,""),assertEncoding(e),this.encoding){case"utf8":this.surrogateSize=3;break;case"ucs2":case"utf16le":this.surrogateSize=2,this.detectIncompleteChar=utf16DetectIncompleteChar;break;case"base64":this.surrogateSize=3,this.detectIncompleteChar=base64DetectIncompleteChar;break;default:return void(this.write=passThroughWrite)}this.charBuffer=new Buffer(6),this.charReceived=0,this.charLength=0};StringDecoder.prototype.write=function(e){for(var t="";this.charLength;){var r=e.length>=this.charLength-this.charReceived?this.charLength-this.charReceived:e.length;if(e.copy(this.charBuffer,this.charReceived,0,r),this.charReceived+=r,this.charReceived<this.charLength)return"";e=e.slice(r,e.length),t=this.charBuffer.slice(0,this.charLength).toString(this.encoding);var h=t.charCodeAt(t.length-1);if(!(h>=55296&&56319>=h)){if(this.charReceived=this.charLength=0,0===e.length)return t;break}this.charLength+=this.surrogateSize,t=""}this.detectIncompleteChar(e);var i=e.length;this.charLength&&(e.copy(this.charBuffer,0,e.length-this.charReceived,i),i-=this.charReceived),t+=e.toString(this.encoding,0,i);var i=t.length-1,h=t.charCodeAt(i);if(h>=55296&&56319>=h){var c=this.surrogateSize;return this.charLength+=c,this.charReceived+=c,this.charBuffer.copy(this.charBuffer,c,0,c),e.copy(this.charBuffer,0,0,c),t.substring(0,i)}return t},StringDecoder.prototype.detectIncompleteChar=function(e){for(var t=e.length>=3?3:e.length;t>0;t--){var r=e[e.length-t];if(1==t&&r>>5==6){this.charLength=2;break}if(2>=t&&r>>4==14){this.charLength=3;break}if(3>=t&&r>>3==30){this.charLength=4;break}}this.charReceived=t},StringDecoder.prototype.end=function(e){var t="";if(e&&e.length&&(t=this.write(e)),this.charReceived){var r=this.charReceived,h=this.charBuffer,i=this.encoding;t+=h.slice(0,r).toString(i)}return t};

},{"buffer":4}],82:[function(require,module,exports){
exports=module.exports=require("./lib/_stream_readable.js"),exports.Stream=require("stream"),exports.Readable=exports,exports.Writable=require("./lib/_stream_writable.js"),exports.Duplex=require("./lib/_stream_duplex.js"),exports.Transform=require("./lib/_stream_transform.js"),exports.PassThrough=require("./lib/_stream_passthrough.js");

},{"./lib/_stream_duplex.js":74,"./lib/_stream_passthrough.js":75,"./lib/_stream_readable.js":76,"./lib/_stream_transform.js":77,"./lib/_stream_writable.js":78,"stream":33}],83:[function(require,module,exports){
function ChunkStoreWriteStream(t,e,r){function o(e){i.destroyed||(t.put(n,e),n+=1)}var i=this;if(!(i instanceof ChunkStoreWriteStream))return new ChunkStoreWriteStream(t,e,r);if(stream.Writable.call(i,r),r||(r={}),!t||!t.put||!t.get)throw new Error("First argument must be an abstract-chunk-store compliant store");if(e=Number(e),!e)throw new Error("Second argument must be a chunk length");i._blockstream=new BlockStream(e,{zeroPadding:!1}),i._blockstream.on("data",o).on("error",function(t){i.destroy(t)});var n=0;i.on("finish",function(){this._blockstream.end()})}module.exports=ChunkStoreWriteStream;var BlockStream=require("block-stream2"),inherits=require("inherits"),stream=require("stream");inherits(ChunkStoreWriteStream,stream.Writable),ChunkStoreWriteStream.prototype._write=function(t,e,r){this._blockstream.write(t,e,r)},ChunkStoreWriteStream.prototype.destroy=function(t){this.destroyed||(this.destroyed=!0,t&&this.emit("error",t),this.emit("close"))};

},{"block-stream2":72,"inherits":122,"stream":33}],84:[function(require,module,exports){
(function (global,Buffer){
function createTorrent(e,n,t){"function"==typeof n&&(t=n,n={}),n||(n={}),parseInput(e,n,function(e,r,i){return e?t(e):(n.singleFileTorrent=i,void onFiles(r,n,t))})}function parseInput(e,n,t){function r(){parallel(e.map(function(e){return function(t){var r={};if(isBlob(e))r.getStream=getBlobStream(e),r.length=e.size;else if(Buffer.isBuffer(e))r.getStream=getBufferStream(e),r.length=e.length;else{if(!isReadable(e)){if("string"==typeof e){if("function"!=typeof fs.readdir)throw new Error("filesystem paths do not work in the browser");var a=i>1||o;return void getFiles(e,a,t)}throw new Error("invalid input type")}if(!n.pieceLength)throw new Error("must specify `pieceLength` option if input is Stream");r.getStream=getStreamStream(e,r),r.length=0}if(!e.name)throw new Error("missing requied `name` property on input");r.path=e.name.split(corePath.sep),t(null,r)}}),function(e,n){return e?t(e):(n=flatten(n),void t(null,n,o))})}if("function"==typeof n&&(t=n,n={}),n||(n={}),t=dezalgo(t),Array.isArray(e)&&0===e.length)throw new Error("invalid input type");if(isFileList(e)&&(e=Array.prototype.slice.call(e)),Array.isArray(e)||(e=[e]),n.name||(n.name=e[0]&&e[0].name),n.name||(n.name="string"==typeof e[0]&&corePath.basename(e[0])),void 0===n.name)throw new Error("missing option 'name' and unable to infer it from input[0].name");1!==e.length||e[0].name||(e[0].name=n.name);var i=e.reduce(function(e,n){return e+Number("string"==typeof n)},0),o=1===e.length;1===e.length&&"string"==typeof e[0]?isFile(e[0],function(e,n){return e?t(e):(o=n,void r())}):r()}function getFiles(e,n,t){traversePath(e,getFileInfo,function(r,i){return r?t(r):(i=Array.isArray(i)?flatten(i):[i],e=corePath.normalize(e),n&&(e=e.slice(0,e.lastIndexOf(corePath.sep)+1)),e[e.length-1]!==corePath.sep&&(e+=corePath.sep),i.forEach(function(n){n.getStream=getFilePathStream(n.path),n.path=n.path.replace(e,"").split(corePath.sep)}),void t(null,i))})}function getFileInfo(e,n){n=once(n),fs.stat(e,function(t,r){if(t)return n(t);var i={length:r.size,path:e};n(null,i)})}function traversePath(e,n,t){fs.readdir(e,function(r,i){r&&"ENOTDIR"===r.code?n(e,t):r?t(r):parallel(i.filter(notHidden).filter(junk.not).map(function(t){return function(r){traversePath(corePath.join(e,t),n,r)}}),t)})}function notHidden(e){return"."!==e[0]}function getPieceList(e,n,t){function r(e){c+=e.length;var n=p;sha1(e,function(e){l[n]=e,f-=1,u()}),f+=1,p+=1}function i(){m=!0,u()}function o(e){a(),t(e)}function a(){g.removeListener("error",o),d.removeListener("data",r),d.removeListener("end",i),d.removeListener("error",o)}function u(){m&&0===f&&(a(),t(null,new Buffer(l.join(""),"hex"),c))}t=once(t);var l=[],c=0,s=e.map(function(e){return e.getStream}),f=0,p=0,m=!1,g=new MultiStream(s),d=new BlockStream(n,{zeroPadding:!1});g.on("error",o),g.pipe(d).on("data",r).on("end",i).on("error",o)}function onFiles(e,n,t){var r=n.announceList;r||("string"==typeof n.announce?r=[[n.announce]]:Array.isArray(n.announce)&&(r=n.announce.map(function(e){return[e]}))),r||(r=[]),global.WEBTORRENT_ANNOUNCE&&("string"==typeof global.WEBTORRENT_ANNOUNCE?r.push([[global.WEBTORRENT_ANNOUNCE]]):Array.isArray(global.WEBTORRENT_ANNOUNCE)&&(r=r.concat(global.WEBTORRENT_ANNOUNCE.map(function(e){return[e]})))),0===r.length&&(r=r.concat(module.exports.announceList)),"string"==typeof n.urlList&&(n.urlList=[n.urlList]);var i={info:{name:n.name},announce:r[0][0],"announce-list":r,"creation date":Number(n.creationDate)||Date.now(),encoding:"UTF-8"};void 0!==n.comment&&(i.comment=n.comment),void 0!==n.createdBy&&(i["created by"]=n.createdBy),void 0!==n["private"]&&(i.info["private"]=Number(n["private"])),void 0!==n.sslCert&&(i.info["ssl-cert"]=n.sslCert),void 0!==n.urlList&&(i["url-list"]=n.urlList);var o=n.pieceLength||calcPieceLength(e.reduce(sumLength,0));i.info["piece length"]=o,getPieceList(e,o,function(r,o,a){return r?t(r):(i.info.pieces=o,e.forEach(function(e){delete e.getStream}),n.singleFileTorrent?i.info.length=a:i.info.files=e,void t(null,bencode.encode(i)))})}function sumLength(e,n){return e+n.length}function isBlob(e){return"undefined"!=typeof Blob&&e instanceof Blob}function isFileList(e){return"function"==typeof FileList&&e instanceof FileList}function isReadable(e){return"object"==typeof e&&"function"==typeof e.pipe}function getBlobStream(e){return function(){return new FileReadStream(e)}}function getBufferStream(e){return function(){var n=new stream.PassThrough;return n.end(e),n}}function getFilePathStream(e){return function(){return fs.createReadStream(e)}}function getStreamStream(e,n){return function(){var t=new stream.Transform;return t._transform=function(e,t,r){n.length+=e.length,this.push(e),r()},e.pipe(t),t}}module.exports=createTorrent,module.exports.announceList=[["udp://tracker.publicbt.com:80"],["udp://tracker.openbittorrent.com:80"],["udp://open.demonii.com:1337"],["udp://tracker.webtorrent.io:80"],["wss://tracker.webtorrent.io"]],module.exports.parseInput=parseInput;var bencode=require("bencode"),BlockStream=require("block-stream2"),calcPieceLength=require("piece-length"),corePath=require("path"),dezalgo=require("dezalgo"),FileReadStream=require("filestream/read"),flatten=require("flatten"),fs=require("fs"),isFile=require("is-file"),junk=require("junk"),MultiStream=require("multistream"),once=require("once"),parallel=require("run-parallel"),sha1=require("simple-sha1"),stream=require("stream");

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)

},{"bencode":85,"block-stream2":89,"buffer":4,"dezalgo":100,"filestream/read":106,"flatten":107,"fs":2,"is-file":108,"junk":109,"multistream":127,"once":111,"path":14,"piece-length":112,"run-parallel":151,"simple-sha1":152,"stream":33}],85:[function(require,module,exports){
module.exports={encode:require("./lib/encode"),decode:require("./lib/decode")};

},{"./lib/decode":86,"./lib/encode":88}],86:[function(require,module,exports){
(function (Buffer){
function decode(e,d){return decode.position=0,decode.encoding=d||null,decode.data=Buffer.isBuffer(e)?e:new Buffer(e),decode.next()}var Dict=require("./dict");decode.position=0,decode.data=null,decode.encoding=null,decode.next=function(){switch(decode.data[decode.position]){case 100:return decode.dictionary();case 108:return decode.list();case 105:return decode.integer();default:return decode.bytes()}},decode.find=function(e){for(var d=decode.position,o=decode.data.length,t=decode.data;o>d;){if(t[d]===e)return d;d++}throw new Error('Invalid data: Missing delimiter "'+String.fromCharCode(e)+'" [0x'+e.toString(16)+"]")},decode.dictionary=function(){decode.position++;for(var e=new Dict;101!==decode.data[decode.position];)e.binarySet(decode.bytes(),decode.next());return decode.position++,e},decode.list=function(){decode.position++;for(var e=[];101!==decode.data[decode.position];)e.push(decode.next());return decode.position++,e},decode.integer=function(){var e=decode.find(101),d=decode.data.toString("ascii",decode.position+1,e);return decode.position+=e+1-decode.position,parseInt(d,10)},decode.bytes=function(){var e=decode.find(58),d=parseInt(decode.data.toString("ascii",decode.position,e),10),o=++e+d;return decode.position=o,decode.encoding?decode.data.toString(decode.encoding,e,o):decode.data.slice(e,o)},module.exports=decode;

}).call(this,require("buffer").Buffer)

},{"./dict":87,"buffer":4}],87:[function(require,module,exports){
var Dict=module.exports=function(){Object.defineProperty(this,"_keys",{enumerable:!1,value:[]})};Dict.prototype.binaryKeys=function(){return this._keys.slice()},Dict.prototype.binarySet=function(e,t){this._keys.push(e),this[e]=t};

},{}],88:[function(require,module,exports){
(function (Buffer){
function encode(e){var n=[];return encode._encode(n,e),Buffer.concat(n)}encode._floatConversionDetected=!1,encode._encode=function(e,n){if(Buffer.isBuffer(n))return e.push(new Buffer(n.length+":")),void e.push(n);switch(typeof n){case"string":encode.bytes(e,n);break;case"number":encode.number(e,n);break;case"object":n.constructor===Array?encode.list(e,n):encode.dict(e,n)}};var buff_e=new Buffer("e"),buff_d=new Buffer("d"),buff_l=new Buffer("l");encode.bytes=function(e,n){e.push(new Buffer(Buffer.byteLength(n)+":"+n))},encode.number=function(e,n){var o=2147483648,c=n/o<<0,f=n%o<<0,t=c*o+f;e.push(new Buffer("i"+t+"e")),t===n||encode._floatConversionDetected||(encode._floatConversionDetected=!0,console.warn('WARNING: Possible data corruption detected with value "'+n+'":','Bencoding only defines support for integers, value was converted to "'+t+'"'),console.trace())},encode.dict=function(e,n){e.push(buff_d);for(var o,c=0,f=Object.keys(n).sort(),t=f.length;t>c;c++)o=f[c],encode.bytes(e,o),encode._encode(e,n[o]);e.push(buff_e)},encode.list=function(e,n){var o=0,c=n.length;for(e.push(buff_l);c>o;o++)encode._encode(e,n[o]);e.push(buff_e)},module.exports=encode;

}).call(this,require("buffer").Buffer)

},{"buffer":4}],89:[function(require,module,exports){
(function (Buffer){
function Block(e,s){return this instanceof Block?(Transform.call(this),s||(s={}),"object"==typeof e&&(s=e,e=s.size),this.size=e||512,s.nopad?this._zeroPadding=!1:this._zeroPadding=defined(s.zeroPadding,!0),this._buffered=[],void(this._bufferedBytes=0)):new Block(e,s)}var inherits=require("inherits"),Transform=require("readable-stream").Transform,defined=require("defined");module.exports=Block,inherits(Block,Transform),Block.prototype._transform=function(e,s,i){for(this._bufferedBytes+=e.length,this._buffered.push(e);this._bufferedBytes>=this.size;){var t=Buffer.concat(this._buffered);this._bufferedBytes-=this.size,this.push(t.slice(0,this.size)),this._buffered=[t.slice(this.size,t.length)]}i()},Block.prototype._flush=function(){if(this._bufferedBytes&&this._zeroPadding){var e=new Buffer(this.size-this._bufferedBytes);e.fill(0),this._buffered.push(e),this.push(Buffer.concat(this._buffered)),this._buffered=null}else this._bufferedBytes&&(this.push(Buffer.concat(this._buffered)),this._buffered=null);this.push(null)};

}).call(this,require("buffer").Buffer)

},{"buffer":4,"defined":90,"inherits":122,"readable-stream":99}],90:[function(require,module,exports){
module.exports=function(){for(var r=0;r<arguments.length;r++)if(void 0!==arguments[r])return arguments[r]};

},{}],91:[function(require,module,exports){
(function (process){
function Duplex(e){return this instanceof Duplex?(Readable.call(this,e),Writable.call(this,e),e&&e.readable===!1&&(this.readable=!1),e&&e.writable===!1&&(this.writable=!1),this.allowHalfOpen=!0,e&&e.allowHalfOpen===!1&&(this.allowHalfOpen=!1),void this.once("end",onend)):new Duplex(e)}function onend(){this.allowHalfOpen||this._writableState.ended||process.nextTick(this.end.bind(this))}function forEach(e,t){for(var i=0,r=e.length;r>i;i++)t(e[i],i)}module.exports=Duplex;var objectKeys=Object.keys||function(e){var t=[];for(var i in e)t.push(i);return t},util=require("core-util-is");util.inherits=require("inherits");var Readable=require("./_stream_readable"),Writable=require("./_stream_writable");util.inherits(Duplex,Readable),forEach(objectKeys(Writable.prototype),function(e){Duplex.prototype[e]||(Duplex.prototype[e]=Writable.prototype[e])});

}).call(this,require('_process'))

},{"./_stream_readable":93,"./_stream_writable":95,"_process":15,"core-util-is":96,"inherits":122}],92:[function(require,module,exports){
function PassThrough(r){return this instanceof PassThrough?void Transform.call(this,r):new PassThrough(r)}module.exports=PassThrough;var Transform=require("./_stream_transform"),util=require("core-util-is");util.inherits=require("inherits"),util.inherits(PassThrough,Transform),PassThrough.prototype._transform=function(r,s,i){i(null,r)};

},{"./_stream_transform":94,"core-util-is":96,"inherits":122}],93:[function(require,module,exports){
(function (process){
function ReadableState(e,t){var n=require("./_stream_duplex");e=e||{};var r=e.highWaterMark,i=e.objectMode?16:16384;this.highWaterMark=r||0===r?r:i,this.highWaterMark=~~this.highWaterMark,this.buffer=[],this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.objectMode=!!e.objectMode,t instanceof n&&(this.objectMode=this.objectMode||!!e.readableObjectMode),this.defaultEncoding=e.defaultEncoding||"utf8",this.ranOut=!1,this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(StringDecoder||(StringDecoder=require("string_decoder/").StringDecoder),this.decoder=new StringDecoder(e.encoding),this.encoding=e.encoding)}function Readable(e){require("./_stream_duplex");return this instanceof Readable?(this._readableState=new ReadableState(e,this),this.readable=!0,void Stream.call(this)):new Readable(e)}function readableAddChunk(e,t,n,r,i){var a=chunkInvalid(t,n);if(a)e.emit("error",a);else if(util.isNullOrUndefined(n))t.reading=!1,t.ended||onEofChunk(e,t);else if(t.objectMode||n&&n.length>0)if(t.ended&&!i){var d=new Error("stream.push() after EOF");e.emit("error",d)}else if(t.endEmitted&&i){var d=new Error("stream.unshift() after end event");e.emit("error",d)}else!t.decoder||i||r||(n=t.decoder.write(n)),i||(t.reading=!1),t.flowing&&0===t.length&&!t.sync?(e.emit("data",n),e.read(0)):(t.length+=t.objectMode?1:n.length,i?t.buffer.unshift(n):t.buffer.push(n),t.needReadable&&emitReadable(e)),maybeReadMore(e,t);else i||(t.reading=!1);return needMoreData(t)}function needMoreData(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}function roundUpToNextPowerOf2(e){if(e>=MAX_HWM)e=MAX_HWM;else{e--;for(var t=1;32>t;t<<=1)e|=e>>t;e++}return e}function howMuchToRead(e,t){return 0===t.length&&t.ended?0:t.objectMode?0===e?0:1:isNaN(e)||util.isNull(e)?t.flowing&&t.buffer.length?t.buffer[0].length:t.length:0>=e?0:(e>t.highWaterMark&&(t.highWaterMark=roundUpToNextPowerOf2(e)),e>t.length?t.ended?t.length:(t.needReadable=!0,0):e)}function chunkInvalid(e,t){var n=null;return util.isBuffer(t)||util.isString(t)||util.isNullOrUndefined(t)||e.objectMode||(n=new TypeError("Invalid non-string/buffer chunk")),n}function onEofChunk(e,t){if(t.decoder&&!t.ended){var n=t.decoder.end();n&&n.length&&(t.buffer.push(n),t.length+=t.objectMode?1:n.length)}t.ended=!0,emitReadable(e)}function emitReadable(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(debug("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?process.nextTick(function(){emitReadable_(e)}):emitReadable_(e))}function emitReadable_(e){debug("emit readable"),e.emit("readable"),flow(e)}function maybeReadMore(e,t){t.readingMore||(t.readingMore=!0,process.nextTick(function(){maybeReadMore_(e,t)}))}function maybeReadMore_(e,t){for(var n=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(debug("maybeReadMore read 0"),e.read(0),n!==t.length);)n=t.length;t.readingMore=!1}function pipeOnDrain(e){return function(){var t=e._readableState;debug("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&EE.listenerCount(e,"data")&&(t.flowing=!0,flow(e))}}function resume(e,t){t.resumeScheduled||(t.resumeScheduled=!0,process.nextTick(function(){resume_(e,t)}))}function resume_(e,t){t.resumeScheduled=!1,e.emit("resume"),flow(e),t.flowing&&!t.reading&&e.read(0)}function flow(e){var t=e._readableState;if(debug("flow",t.flowing),t.flowing)do var n=e.read();while(null!==n&&t.flowing)}function fromList(e,t){var n,r=t.buffer,i=t.length,a=!!t.decoder,d=!!t.objectMode;if(0===r.length)return null;if(0===i)n=null;else if(d)n=r.shift();else if(!e||e>=i)n=a?r.join(""):Buffer.concat(r,i),r.length=0;else if(e<r[0].length){var o=r[0];n=o.slice(0,e),r[0]=o.slice(e)}else if(e===r[0].length)n=r.shift();else{n=a?"":new Buffer(e);for(var l=0,u=0,s=r.length;s>u&&e>l;u++){var o=r[0],h=Math.min(e-l,o.length);a?n+=o.slice(0,h):o.copy(n,l,0,h),h<o.length?r[0]=o.slice(h):r.shift(),l+=h}}return n}function endReadable(e){var t=e._readableState;if(t.length>0)throw new Error("endReadable called on non-empty stream");t.endEmitted||(t.ended=!0,process.nextTick(function(){t.endEmitted||0!==t.length||(t.endEmitted=!0,e.readable=!1,e.emit("end"))}))}function forEach(e,t){for(var n=0,r=e.length;r>n;n++)t(e[n],n)}function indexOf(e,t){for(var n=0,r=e.length;r>n;n++)if(e[n]===t)return n;return-1}module.exports=Readable;var isArray=require("isarray"),Buffer=require("buffer").Buffer;Readable.ReadableState=ReadableState;var EE=require("events").EventEmitter;EE.listenerCount||(EE.listenerCount=function(e,t){return e.listeners(t).length});var Stream=require("stream"),util=require("core-util-is");util.inherits=require("inherits");var StringDecoder,debug=require("util");debug=debug&&debug.debuglog?debug.debuglog("stream"):function(){},util.inherits(Readable,Stream),Readable.prototype.push=function(e,t){var n=this._readableState;return util.isString(e)&&!n.objectMode&&(t=t||n.defaultEncoding,t!==n.encoding&&(e=new Buffer(e,t),t="")),readableAddChunk(this,n,e,t,!1)},Readable.prototype.unshift=function(e){var t=this._readableState;return readableAddChunk(this,t,e,"",!0)},Readable.prototype.setEncoding=function(e){return StringDecoder||(StringDecoder=require("string_decoder/").StringDecoder),this._readableState.decoder=new StringDecoder(e),this._readableState.encoding=e,this};var MAX_HWM=8388608;Readable.prototype.read=function(e){debug("read",e);var t=this._readableState,n=e;if((!util.isNumber(e)||e>0)&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return debug("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?endReadable(this):emitReadable(this),null;if(e=howMuchToRead(e,t),0===e&&t.ended)return 0===t.length&&endReadable(this),null;var r=t.needReadable;debug("need readable",r),(0===t.length||t.length-e<t.highWaterMark)&&(r=!0,debug("length less than watermark",r)),(t.ended||t.reading)&&(r=!1,debug("reading or ended",r)),r&&(debug("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1),r&&!t.reading&&(e=howMuchToRead(n,t));var i;return i=e>0?fromList(e,t):null,util.isNull(i)&&(t.needReadable=!0,e=0),t.length-=e,0!==t.length||t.ended||(t.needReadable=!0),n!==e&&t.ended&&0===t.length&&endReadable(this),util.isNull(i)||this.emit("data",i),i},Readable.prototype._read=function(e){this.emit("error",new Error("not implemented"))},Readable.prototype.pipe=function(e,t){function n(e){debug("onunpipe"),e===s&&i()}function r(){debug("onend"),e.end()}function i(){debug("cleanup"),e.removeListener("close",o),e.removeListener("finish",l),e.removeListener("drain",g),e.removeListener("error",d),e.removeListener("unpipe",n),s.removeListener("end",r),s.removeListener("end",i),s.removeListener("data",a),!h.awaitDrain||e._writableState&&!e._writableState.needDrain||g()}function a(t){debug("ondata");var n=e.write(t);!1===n&&(debug("false write response, pause",s._readableState.awaitDrain),s._readableState.awaitDrain++,s.pause())}function d(t){debug("onerror",t),u(),e.removeListener("error",d),0===EE.listenerCount(e,"error")&&e.emit("error",t)}function o(){e.removeListener("finish",l),u()}function l(){debug("onfinish"),e.removeListener("close",o),u()}function u(){debug("unpipe"),s.unpipe(e)}var s=this,h=this._readableState;switch(h.pipesCount){case 0:h.pipes=e;break;case 1:h.pipes=[h.pipes,e];break;default:h.pipes.push(e)}h.pipesCount+=1,debug("pipe count=%d opts=%j",h.pipesCount,t);var f=(!t||t.end!==!1)&&e!==process.stdout&&e!==process.stderr,b=f?r:i;h.endEmitted?process.nextTick(b):s.once("end",b),e.on("unpipe",n);var g=pipeOnDrain(s);return e.on("drain",g),s.on("data",a),e._events&&e._events.error?isArray(e._events.error)?e._events.error.unshift(d):e._events.error=[d,e._events.error]:e.on("error",d),e.once("close",o),e.once("finish",l),e.emit("pipe",s),h.flowing||(debug("pipe resume"),s.resume()),e},Readable.prototype.unpipe=function(e){var t=this._readableState;if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes?this:(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this),this);if(!e){var n=t.pipes,r=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var i=0;r>i;i++)n[i].emit("unpipe",this);return this}var i=indexOf(t.pipes,e);return-1===i?this:(t.pipes.splice(i,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this),this)},Readable.prototype.on=function(e,t){var n=Stream.prototype.on.call(this,e,t);if("data"===e&&!1!==this._readableState.flowing&&this.resume(),"readable"===e&&this.readable){var r=this._readableState;if(!r.readableListening)if(r.readableListening=!0,r.emittedReadable=!1,r.needReadable=!0,r.reading)r.length&&emitReadable(this,r);else{var i=this;process.nextTick(function(){debug("readable nexttick read 0"),i.read(0)})}}return n},Readable.prototype.addListener=Readable.prototype.on,Readable.prototype.resume=function(){var e=this._readableState;return e.flowing||(debug("resume"),e.flowing=!0,e.reading||(debug("resume read 0"),this.read(0)),resume(this,e)),this},Readable.prototype.pause=function(){return debug("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(debug("pause"),this._readableState.flowing=!1,this.emit("pause")),this},Readable.prototype.wrap=function(e){var t=this._readableState,n=!1,r=this;e.on("end",function(){if(debug("wrapped end"),t.decoder&&!t.ended){var e=t.decoder.end();e&&e.length&&r.push(e)}r.push(null)}),e.on("data",function(i){if(debug("wrapped data"),t.decoder&&(i=t.decoder.write(i)),i&&(t.objectMode||i.length)){var a=r.push(i);a||(n=!0,e.pause())}});for(var i in e)util.isFunction(e[i])&&util.isUndefined(this[i])&&(this[i]=function(t){return function(){return e[t].apply(e,arguments)}}(i));var a=["error","close","destroy","pause","resume"];return forEach(a,function(t){e.on(t,r.emit.bind(r,t))}),r._read=function(t){debug("wrapped _read",t),n&&(n=!1,e.resume())},r},Readable._fromList=fromList;

}).call(this,require('_process'))

},{"./_stream_duplex":91,"_process":15,"buffer":4,"core-util-is":96,"events":8,"inherits":122,"isarray":97,"stream":33,"string_decoder/":98,"util":3}],94:[function(require,module,exports){
function TransformState(r,t){this.afterTransform=function(r,n){return afterTransform(t,r,n)},this.needTransform=!1,this.transforming=!1,this.writecb=null,this.writechunk=null}function afterTransform(r,t,n){var e=r._transformState;e.transforming=!1;var i=e.writecb;if(!i)return r.emit("error",new Error("no writecb in Transform class"));e.writechunk=null,e.writecb=null,util.isNullOrUndefined(n)||r.push(n),i&&i(t);var a=r._readableState;a.reading=!1,(a.needReadable||a.length<a.highWaterMark)&&r._read(a.highWaterMark)}function Transform(r){if(!(this instanceof Transform))return new Transform(r);Duplex.call(this,r),this._transformState=new TransformState(r,this);var t=this;this._readableState.needReadable=!0,this._readableState.sync=!1,this.once("prefinish",function(){util.isFunction(this._flush)?this._flush(function(r){done(t,r)}):done(t)})}function done(r,t){if(t)return r.emit("error",t);var n=r._writableState,e=r._transformState;if(n.length)throw new Error("calling transform done when ws.length != 0");if(e.transforming)throw new Error("calling transform done when still transforming");return r.push(null)}module.exports=Transform;var Duplex=require("./_stream_duplex"),util=require("core-util-is");util.inherits=require("inherits"),util.inherits(Transform,Duplex),Transform.prototype.push=function(r,t){return this._transformState.needTransform=!1,Duplex.prototype.push.call(this,r,t)},Transform.prototype._transform=function(r,t,n){throw new Error("not implemented")},Transform.prototype._write=function(r,t,n){var e=this._transformState;if(e.writecb=n,e.writechunk=r,e.writeencoding=t,!e.transforming){var i=this._readableState;(e.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},Transform.prototype._read=function(r){var t=this._transformState;util.isNull(t.writechunk)||!t.writecb||t.transforming?t.needTransform=!0:(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform))};

},{"./_stream_duplex":91,"core-util-is":96,"inherits":122}],95:[function(require,module,exports){
(function (process){
function WriteReq(e,i,t){this.chunk=e,this.encoding=i,this.callback=t}function WritableState(e,i){var t=require("./_stream_duplex");e=e||{};var r=e.highWaterMark,n=e.objectMode?16:16384;this.highWaterMark=r||0===r?r:n,this.objectMode=!!e.objectMode,i instanceof t&&(this.objectMode=this.objectMode||!!e.writableObjectMode),this.highWaterMark=~~this.highWaterMark,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1;var o=e.decodeStrings===!1;this.decodeStrings=!o,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){onwrite(i,e)},this.writecb=null,this.writelen=0,this.buffer=[],this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1}function Writable(e){var i=require("./_stream_duplex");return this instanceof Writable||this instanceof i?(this._writableState=new WritableState(e,this),this.writable=!0,void Stream.call(this)):new Writable(e)}function writeAfterEnd(e,i,t){var r=new Error("write after end");e.emit("error",r),process.nextTick(function(){t(r)})}function validChunk(e,i,t,r){var n=!0;if(!(util.isBuffer(t)||util.isString(t)||util.isNullOrUndefined(t)||i.objectMode)){var o=new TypeError("Invalid non-string/buffer chunk");e.emit("error",o),process.nextTick(function(){r(o)}),n=!1}return n}function decodeChunk(e,i,t){return!e.objectMode&&e.decodeStrings!==!1&&util.isString(i)&&(i=new Buffer(i,t)),i}function writeOrBuffer(e,i,t,r,n){t=decodeChunk(i,t,r),util.isBuffer(t)&&(r="buffer");var o=i.objectMode?1:t.length;i.length+=o;var f=i.length<i.highWaterMark;return f||(i.needDrain=!0),i.writing||i.corked?i.buffer.push(new WriteReq(t,r,n)):doWrite(e,i,!1,o,t,r,n),f}function doWrite(e,i,t,r,n,o,f){i.writelen=r,i.writecb=f,i.writing=!0,i.sync=!0,t?e._writev(n,i.onwrite):e._write(n,o,i.onwrite),i.sync=!1}function onwriteError(e,i,t,r,n){t?process.nextTick(function(){i.pendingcb--,n(r)}):(i.pendingcb--,n(r)),e._writableState.errorEmitted=!0,e.emit("error",r)}function onwriteStateUpdate(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}function onwrite(e,i){var t=e._writableState,r=t.sync,n=t.writecb;if(onwriteStateUpdate(t),i)onwriteError(e,t,r,i,n);else{var o=needFinish(e,t);o||t.corked||t.bufferProcessing||!t.buffer.length||clearBuffer(e,t),r?process.nextTick(function(){afterWrite(e,t,o,n)}):afterWrite(e,t,o,n)}}function afterWrite(e,i,t,r){t||onwriteDrain(e,i),i.pendingcb--,r(),finishMaybe(e,i)}function onwriteDrain(e,i){0===i.length&&i.needDrain&&(i.needDrain=!1,e.emit("drain"))}function clearBuffer(e,i){if(i.bufferProcessing=!0,e._writev&&i.buffer.length>1){for(var t=[],r=0;r<i.buffer.length;r++)t.push(i.buffer[r].callback);i.pendingcb++,doWrite(e,i,!0,i.length,i.buffer,"",function(e){for(var r=0;r<t.length;r++)i.pendingcb--,t[r](e)}),i.buffer=[]}else{for(var r=0;r<i.buffer.length;r++){var n=i.buffer[r],o=n.chunk,f=n.encoding,u=n.callback,s=i.objectMode?1:o.length;if(doWrite(e,i,!1,s,o,f,u),i.writing){r++;break}}r<i.buffer.length?i.buffer=i.buffer.slice(r):i.buffer.length=0}i.bufferProcessing=!1}function needFinish(e,i){return i.ending&&0===i.length&&!i.finished&&!i.writing}function prefinish(e,i){i.prefinished||(i.prefinished=!0,e.emit("prefinish"))}function finishMaybe(e,i){var t=needFinish(e,i);return t&&(0===i.pendingcb?(prefinish(e,i),i.finished=!0,e.emit("finish")):prefinish(e,i)),t}function endWritable(e,i,t){i.ending=!0,finishMaybe(e,i),t&&(i.finished?process.nextTick(t):e.once("finish",t)),i.ended=!0}module.exports=Writable;var Buffer=require("buffer").Buffer;Writable.WritableState=WritableState;var util=require("core-util-is");util.inherits=require("inherits");var Stream=require("stream");util.inherits(Writable,Stream),Writable.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe. Not readable."))},Writable.prototype.write=function(e,i,t){var r=this._writableState,n=!1;return util.isFunction(i)&&(t=i,i=null),util.isBuffer(e)?i="buffer":i||(i=r.defaultEncoding),util.isFunction(t)||(t=function(){}),r.ended?writeAfterEnd(this,r,t):validChunk(this,r,e,t)&&(r.pendingcb++,n=writeOrBuffer(this,r,e,i,t)),n},Writable.prototype.cork=function(){var e=this._writableState;e.corked++},Writable.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.buffer.length||clearBuffer(this,e))},Writable.prototype._write=function(e,i,t){t(new Error("not implemented"))},Writable.prototype._writev=null,Writable.prototype.end=function(e,i,t){var r=this._writableState;util.isFunction(e)?(t=e,e=null,i=null):util.isFunction(i)&&(t=i,i=null),util.isNullOrUndefined(e)||this.write(e,i),r.corked&&(r.corked=1,this.uncork()),r.ending||r.finished||endWritable(this,r,t)};

}).call(this,require('_process'))

},{"./_stream_duplex":91,"_process":15,"buffer":4,"core-util-is":96,"inherits":122,"stream":33}],96:[function(require,module,exports){
(function (Buffer){
function isArray(e){return Array.isArray(e)}function isBoolean(e){return"boolean"==typeof e}function isNull(e){return null===e}function isNullOrUndefined(e){return null==e}function isNumber(e){return"number"==typeof e}function isString(e){return"string"==typeof e}function isSymbol(e){return"symbol"==typeof e}function isUndefined(e){return void 0===e}function isRegExp(e){return isObject(e)&&"[object RegExp]"===objectToString(e)}function isObject(e){return"object"==typeof e&&null!==e}function isDate(e){return isObject(e)&&"[object Date]"===objectToString(e)}function isError(e){return isObject(e)&&("[object Error]"===objectToString(e)||e instanceof Error)}function isFunction(e){return"function"==typeof e}function isPrimitive(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||"undefined"==typeof e}function isBuffer(e){return Buffer.isBuffer(e)}function objectToString(e){return Object.prototype.toString.call(e)}exports.isArray=isArray,exports.isBoolean=isBoolean,exports.isNull=isNull,exports.isNullOrUndefined=isNullOrUndefined,exports.isNumber=isNumber,exports.isString=isString,exports.isSymbol=isSymbol,exports.isUndefined=isUndefined,exports.isRegExp=isRegExp,exports.isObject=isObject,exports.isDate=isDate,exports.isError=isError,exports.isFunction=isFunction,exports.isPrimitive=isPrimitive,exports.isBuffer=isBuffer;

}).call(this,{"isBuffer":require("/home/amar/misc/Dropbox/projects/home/filewi.re/node_modules/watchify/node_modules/browserify/node_modules/insert-module-globals/node_modules/is-buffer/index.js")})

},{"/home/amar/misc/Dropbox/projects/home/filewi.re/node_modules/watchify/node_modules/browserify/node_modules/insert-module-globals/node_modules/is-buffer/index.js":11}],97:[function(require,module,exports){
module.exports=Array.isArray||function(r){return"[object Array]"==Object.prototype.toString.call(r)};

},{}],98:[function(require,module,exports){
function assertEncoding(e){if(e&&!isBufferEncoding(e))throw new Error("Unknown encoding: "+e)}function passThroughWrite(e){return e.toString(this.encoding)}function utf16DetectIncompleteChar(e){this.charReceived=e.length%2,this.charLength=this.charReceived?2:0}function base64DetectIncompleteChar(e){this.charReceived=e.length%3,this.charLength=this.charReceived?3:0}var Buffer=require("buffer").Buffer,isBufferEncoding=Buffer.isEncoding||function(e){switch(e&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}},StringDecoder=exports.StringDecoder=function(e){switch(this.encoding=(e||"utf8").toLowerCase().replace(/[-_]/,""),assertEncoding(e),this.encoding){case"utf8":this.surrogateSize=3;break;case"ucs2":case"utf16le":this.surrogateSize=2,this.detectIncompleteChar=utf16DetectIncompleteChar;break;case"base64":this.surrogateSize=3,this.detectIncompleteChar=base64DetectIncompleteChar;break;default:return void(this.write=passThroughWrite)}this.charBuffer=new Buffer(6),this.charReceived=0,this.charLength=0};StringDecoder.prototype.write=function(e){for(var t="";this.charLength;){var r=e.length>=this.charLength-this.charReceived?this.charLength-this.charReceived:e.length;if(e.copy(this.charBuffer,this.charReceived,0,r),this.charReceived+=r,this.charReceived<this.charLength)return"";e=e.slice(r,e.length),t=this.charBuffer.slice(0,this.charLength).toString(this.encoding);var h=t.charCodeAt(t.length-1);if(!(h>=55296&&56319>=h)){if(this.charReceived=this.charLength=0,0===e.length)return t;break}this.charLength+=this.surrogateSize,t=""}this.detectIncompleteChar(e);var i=e.length;this.charLength&&(e.copy(this.charBuffer,0,e.length-this.charReceived,i),i-=this.charReceived),t+=e.toString(this.encoding,0,i);var i=t.length-1,h=t.charCodeAt(i);if(h>=55296&&56319>=h){var c=this.surrogateSize;return this.charLength+=c,this.charReceived+=c,this.charBuffer.copy(this.charBuffer,c,0,c),e.copy(this.charBuffer,0,0,c),t.substring(0,i)}return t},StringDecoder.prototype.detectIncompleteChar=function(e){for(var t=e.length>=3?3:e.length;t>0;t--){var r=e[e.length-t];if(1==t&&r>>5==6){this.charLength=2;break}if(2>=t&&r>>4==14){this.charLength=3;break}if(3>=t&&r>>3==30){this.charLength=4;break}}this.charReceived=t},StringDecoder.prototype.end=function(e){var t="";if(e&&e.length&&(t=this.write(e)),this.charReceived){var r=this.charReceived,h=this.charBuffer,i=this.encoding;t+=h.slice(0,r).toString(i)}return t};

},{"buffer":4}],99:[function(require,module,exports){
exports=module.exports=require("./lib/_stream_readable.js"),exports.Stream=require("stream"),exports.Readable=exports,exports.Writable=require("./lib/_stream_writable.js"),exports.Duplex=require("./lib/_stream_duplex.js"),exports.Transform=require("./lib/_stream_transform.js"),exports.PassThrough=require("./lib/_stream_passthrough.js");

},{"./lib/_stream_duplex.js":91,"./lib/_stream_passthrough.js":92,"./lib/_stream_readable.js":93,"./lib/_stream_transform.js":94,"./lib/_stream_writable.js":95,"stream":33}],100:[function(require,module,exports){
function dezalgo(a){var p=!0;return asap(function(){p=!1}),function(){var r=arguments,e=this;p?asap(function(){a.apply(e,r)}):a.apply(e,r)}}var wrappy=require("wrappy");module.exports=wrappy(dezalgo);var asap=require("asap");

},{"asap":101,"wrappy":103}],101:[function(require,module,exports){
"use strict";function throwFirstError(){if(pendingErrors.length)throw pendingErrors.shift()}function asap(r){var s;s=freeTasks.length?freeTasks.pop():new RawTask,s.task=r,rawAsap(s)}function RawTask(){this.task=null}var rawAsap=require("./raw"),freeTasks=[],pendingErrors=[],requestErrorThrow=rawAsap.makeRequestCallFromTimer(throwFirstError);module.exports=asap,RawTask.prototype.call=function(){try{this.task.call()}catch(r){asap.onerror?asap.onerror(r):(pendingErrors.push(r),requestErrorThrow())}finally{this.task=null,freeTasks[freeTasks.length]=this}};

},{"./raw":102}],102:[function(require,module,exports){
(function (global){
"use strict";function rawAsap(e){queue.length||(requestFlush(),flushing=!0),queue[queue.length]=e}function flush(){for(;index<queue.length;){var e=index;if(index+=1,queue[e].call(),index>capacity){for(var u=0,r=queue.length-index;r>u;u++)queue[u]=queue[u+index];queue.length-=index,index=0}}queue.length=0,index=0,flushing=!1}function makeRequestCallFromMutationObserver(e){var u=1,r=new BrowserMutationObserver(e),t=document.createTextNode("");return r.observe(t,{characterData:!0}),function(){u=-u,t.data=u}}function makeRequestCallFromTimer(e){return function(){function u(){clearTimeout(r),clearInterval(t),e()}var r=setTimeout(u,0),t=setInterval(u,50)}}module.exports=rawAsap;var queue=[],flushing=!1,requestFlush,index=0,capacity=1024,BrowserMutationObserver=global.MutationObserver||global.WebKitMutationObserver;requestFlush="function"==typeof BrowserMutationObserver?makeRequestCallFromMutationObserver(flush):makeRequestCallFromTimer(flush),rawAsap.requestFlush=requestFlush,rawAsap.makeRequestCallFromTimer=makeRequestCallFromTimer;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],103:[function(require,module,exports){
function wrappy(n,r){function e(){for(var r=new Array(arguments.length),e=0;e<r.length;e++)r[e]=arguments[e];var t=n.apply(this,r),o=r[r.length-1];return"function"==typeof t&&t!==o&&Object.keys(o).forEach(function(n){t[n]=o[n]}),t}if(n&&r)return wrappy(n)(r);if("function"!=typeof n)throw new TypeError("need wrapper function");return Object.keys(n).forEach(function(r){e[r]=n[r]}),e}module.exports=wrappy;

},{}],104:[function(require,module,exports){
(function (Buffer){
var isTypedArray=require("is-typedarray").strict;module.exports=function(r){var e=Buffer.TYPED_ARRAY_SUPPORT?Buffer._augment:function(r){return new Buffer(r)};return r instanceof Uint8Array?e(r):r instanceof ArrayBuffer?e(new Uint8Array(r)):isTypedArray(r)?e(new Uint8Array(r.buffer,r.byteOffset,r.byteLength)):new Buffer(r)};

}).call(this,require("buffer").Buffer)

},{"buffer":4,"is-typedarray":105}],105:[function(require,module,exports){
function isTypedArray(r){return isStrictTypedArray(r)||isLooseTypedArray(r)}function isStrictTypedArray(r){return r instanceof Int8Array||r instanceof Int16Array||r instanceof Int32Array||r instanceof Uint8Array||r instanceof Uint8ClampedArray||r instanceof Uint16Array||r instanceof Uint32Array||r instanceof Float32Array||r instanceof Float64Array}function isLooseTypedArray(r){return names[toString.call(r)]}module.exports=isTypedArray,isTypedArray.strict=isStrictTypedArray,isTypedArray.loose=isLooseTypedArray;var toString=Object.prototype.toString,names={"[object Int8Array]":!0,"[object Int16Array]":!0,"[object Int32Array]":!0,"[object Uint8Array]":!0,"[object Uint8ClampedArray]":!0,"[object Uint16Array]":!0,"[object Uint32Array]":!0,"[object Float32Array]":!0,"[object Float64Array]":!0};

},{}],106:[function(require,module,exports){
function FileReadStream(e,r){var i=this;return this instanceof FileReadStream?(r=r||{},Readable.call(this,r),this._offset=0,this._ready=!1,this._file=e,this._size=e.size,this._chunkSize=r.chunkSize||Math.max(this._size/1e3,204800),this.reader=new FileReader,void this._generateHeaderBlocks(e,r,function(e,r){return e?i.emit("error",e):(Array.isArray(r)&&r.forEach(function(e){i.push(e)}),i._ready=!0,void i.emit("_ready"))})):new FileReadStream(e,r)}var Readable=require("stream").Readable,inherits=require("inherits"),reExtension=/^.*\.(\w+)$/,toBuffer=require("typedarray-to-buffer");inherits(FileReadStream,Readable),module.exports=FileReadStream,FileReadStream.prototype._generateHeaderBlocks=function(e,r,i){i(null,[])},FileReadStream.prototype._read=function(){if(!this._ready)return void this.once("_ready",this._read.bind(this));var e=this,r=this.reader,i=this._offset,t=this._offset+this._chunkSize;return t>this._size&&(t=this._size),i===this._size?(this.destroy(),void this.push(null)):(r.onload=function(){e._offset=t,e.push(toBuffer(r.result))},r.onerror=function(){e.emit("error",r.error)},void r.readAsArrayBuffer(this._file.slice(i,t)))},FileReadStream.prototype.destroy=function(){if(this._file=null,this.reader){this.reader.onload=null,this.reader.onerror=null;try{this.reader.abort()}catch(e){}}this.reader=null};

},{"inherits":122,"stream":33,"typedarray-to-buffer":104}],107:[function(require,module,exports){
module.exports=function(r,n){function t(r,e){return r.reduce(function(r,u){return Array.isArray(u)&&n>e?r.concat(t(u,e+1)):r.concat(u)},[])}return n="number"==typeof n?n:1/0,t(r,1)};

},{}],108:[function(require,module,exports){
"use strict";function isFileSync(s){return fs.existsSync(s)&&fs.statSync(s).isFile()}var fs=require("fs");module.exports=function(s,i){return i?void fs.stat(s,function(s,e){return s?i(s):i(null,e.isFile())}):isFileSync(s)},module.exports.sync=isFileSync;

},{"fs":2}],109:[function(require,module,exports){
"use strict";exports.re=/^npm-debug\.log$|^\..*\.swp$|^\.DS_Store$|^\.AppleDouble$|^\.LSOverride$|^Icon[\r\?]?|^\._.*|^\.Spotlight-V100$|\.Trashes|^__MACOSX$|~$|^Thumbs\.db$|^ehthumbs\.db$|^Desktop\.ini$/,exports.is=function(e){return exports.re.test(e)},exports.not=exports.isnt=function(e){return!exports.is(e)};

},{}],110:[function(require,module,exports){
function wrappy(n,r){function e(){for(var r=new Array(arguments.length),e=0;e<r.length;e++)r[e]=arguments[e];var t=n.apply(this,r),o=r[r.length-1];return"function"==typeof t&&t!==o&&Object.keys(o).forEach(function(n){t[n]=o[n]}),t}if(n&&r)return wrappy(n)(r);if("function"!=typeof n)throw new TypeError("need wrapper function");return Object.keys(n).forEach(function(r){e[r]=n[r]}),e}module.exports=wrappy;

},{}],111:[function(require,module,exports){
function once(e){var n=function(){return n.called?n.value:(n.called=!0,n.value=e.apply(this,arguments))};return n.called=!1,n}var wrappy=require("wrappy");module.exports=wrappy(once),once.proto=once(function(){Object.defineProperty(Function.prototype,"once",{value:function(){return once(this)},configurable:!0})});

},{"wrappy":110}],112:[function(require,module,exports){
for(var closest=require("closest-to"),sizes=[],i=14;22>=i;i++)sizes.push(Math.pow(2,i));module.exports=function(s){return closest(s/Math.pow(2,10),sizes)};

},{"closest-to":113}],113:[function(require,module,exports){
module.exports=function(r,n){var t=1/0,o=0,u=null;n.sort(function(r,n){return r-n});for(var e=0,a=n.length;a>e&&(o=Math.abs(r-n[e]),!(o>=t));e++)t=o,u=n[e];return u};

},{}],114:[function(require,module,exports){
function useColors(){return"WebkitAppearance"in document.documentElement.style||window.console&&(console.firebug||console.exception&&console.table)||navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31}function formatArgs(){var o=arguments,e=this.useColors;if(o[0]=(e?"%c":"")+this.namespace+(e?" %c":" ")+o[0]+(e?"%c ":" ")+"+"+exports.humanize(this.diff),!e)return o;var r="color: "+this.color;o=[o[0],r,"color: inherit"].concat(Array.prototype.slice.call(o,1));var t=0,s=0;return o[0].replace(/%[a-z%]/g,function(o){"%%"!==o&&(t++,"%c"===o&&(s=t))}),o.splice(s,0,r),o}function log(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)}function save(o){try{null==o?exports.storage.removeItem("debug"):exports.storage.debug=o}catch(e){}}function load(){var o;try{o=exports.storage.debug}catch(e){}return o}function localstorage(){try{return window.localStorage}catch(o){}}exports=module.exports=require("./debug"),exports.log=log,exports.formatArgs=formatArgs,exports.save=save,exports.load=load,exports.useColors=useColors,exports.storage="undefined"!=typeof chrome&&"undefined"!=typeof chrome.storage?chrome.storage.local:localstorage(),exports.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],exports.formatters.j=function(o){return JSON.stringify(o)},exports.enable(load());

},{"./debug":115}],115:[function(require,module,exports){
function selectColor(){return exports.colors[prevColor++%exports.colors.length]}function debug(e){function r(){}function o(){var e=o,r=+new Date,s=r-(prevTime||r);e.diff=s,e.prev=prevTime,e.curr=r,prevTime=r,null==e.useColors&&(e.useColors=exports.useColors()),null==e.color&&e.useColors&&(e.color=selectColor());var t=Array.prototype.slice.call(arguments);t[0]=exports.coerce(t[0]),"string"!=typeof t[0]&&(t=["%o"].concat(t));var n=0;t[0]=t[0].replace(/%([a-z%])/g,function(r,o){if("%%"===r)return r;n++;var s=exports.formatters[o];if("function"==typeof s){var p=t[n];r=s.call(e,p),t.splice(n,1),n--}return r}),"function"==typeof exports.formatArgs&&(t=exports.formatArgs.apply(e,t));var p=o.log||exports.log||console.log.bind(console);p.apply(e,t)}r.enabled=!1,o.enabled=!0;var s=exports.enabled(e)?o:r;return s.namespace=e,s}function enable(e){exports.save(e);for(var r=(e||"").split(/[\s,]+/),o=r.length,s=0;o>s;s++)r[s]&&(e=r[s].replace(/\*/g,".*?"),"-"===e[0]?exports.skips.push(new RegExp("^"+e.substr(1)+"$")):exports.names.push(new RegExp("^"+e+"$")))}function disable(){exports.enable("")}function enabled(e){var r,o;for(r=0,o=exports.skips.length;o>r;r++)if(exports.skips[r].test(e))return!1;for(r=0,o=exports.names.length;o>r;r++)if(exports.names[r].test(e))return!0;return!1}function coerce(e){return e instanceof Error?e.stack||e.message:e}exports=module.exports=debug,exports.coerce=coerce,exports.disable=disable,exports.enable=enable,exports.enabled=enabled,exports.humanize=require("ms"),exports.names=[],exports.skips=[],exports.formatters={};var prevColor=0,prevTime;

},{"ms":116}],116:[function(require,module,exports){
function parse(e){if(e=""+e,!(e.length>1e4)){var a=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(a){var r=parseFloat(a[1]),c=(a[2]||"ms").toLowerCase();switch(c){case"years":case"year":case"yrs":case"yr":case"y":return r*y;case"days":case"day":case"d":return r*d;case"hours":case"hour":case"hrs":case"hr":case"h":return r*h;case"minutes":case"minute":case"mins":case"min":case"m":return r*m;case"seconds":case"second":case"secs":case"sec":case"s":return r*s;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r}}}}function short(e){return e>=d?Math.round(e/d)+"d":e>=h?Math.round(e/h)+"h":e>=m?Math.round(e/m)+"m":e>=s?Math.round(e/s)+"s":e+"ms"}function long(e){return plural(e,d,"day")||plural(e,h,"hour")||plural(e,m,"minute")||plural(e,s,"second")||e+" ms"}function plural(s,e,a){return e>s?void 0:1.5*e>s?Math.floor(s/e)+" "+a:Math.ceil(s/e)+" "+a+"s"}var s=1e3,m=60*s,h=60*m,d=24*h,y=365.25*d;module.exports=function(s,e){return e=e||{},"string"==typeof s?parse(s):e["long"]?long(s):short(s)};

},{}],117:[function(require,module,exports){
var once=require("once"),noop=function(){},isRequest=function(e){return e.setHeader&&"function"==typeof e.abort},isChildProcess=function(e){return e.stdio&&Array.isArray(e.stdio)&&3===e.stdio.length},eos=function(e,r,n){if("function"==typeof r)return eos(e,null,r);r||(r={}),n=once(n||noop);var o=e._writableState,t=e._readableState,i=r.readable||r.readable!==!1&&e.readable,s=r.writable||r.writable!==!1&&e.writable,u=function(){e.writable||c()},c=function(){s=!1,i||n()},a=function(){i=!1,s||n()},l=function(e){n(e?new Error("exited with error code: "+e):null)},d=function(){return(!i||t&&t.ended)&&(!s||o&&o.ended)?void 0:n(new Error("premature close"))},f=function(){e.req.on("finish",c)};return isRequest(e)?(e.on("complete",c),e.on("abort",d),e.req?f():e.on("request",f)):s&&!o&&(e.on("end",u),e.on("close",u)),isChildProcess(e)&&e.on("exit",l),e.on("end",a),e.on("finish",c),r.error!==!1&&e.on("error",n),e.on("close",d),function(){e.removeListener("complete",c),e.removeListener("abort",d),e.removeListener("request",f),e.req&&e.req.removeListener("finish",c),e.removeListener("end",u),e.removeListener("close",u),e.removeListener("finish",c),e.removeListener("exit",l),e.removeListener("end",a),e.removeListener("error",n),e.removeListener("close",d)}};module.exports=eos;

},{"once":119}],118:[function(require,module,exports){
function wrappy(n,r){function e(){for(var r=new Array(arguments.length),e=0;e<r.length;e++)r[e]=arguments[e];var t=n.apply(this,r),o=r[r.length-1];return"function"==typeof t&&t!==o&&Object.keys(o).forEach(function(n){t[n]=o[n]}),t}if(n&&r)return wrappy(n)(r);if("function"!=typeof n)throw new TypeError("need wrapper function");return Object.keys(n).forEach(function(r){e[r]=n[r]}),e}module.exports=wrappy;

},{}],119:[function(require,module,exports){
function once(e){var n=function(){return n.called?n.value:(n.called=!0,n.value=e.apply(this,arguments))};return n.called=!1,n}var wrappy=require("wrappy");module.exports=wrappy(once),once.proto=once(function(){Object.defineProperty(Function.prototype,"once",{value:function(){return once(this)},configurable:!0})});

},{"wrappy":118}],120:[function(require,module,exports){
var hat=module.exports=function(t,r){if(r||(r=16),void 0===t&&(t=128),0>=t)return"0";for(var o=Math.log(Math.pow(2,t))/Math.log(r),a=2;o===1/0;a*=2)o=Math.log(Math.pow(2,t/a))/Math.log(r)*a;for(var n=o-Math.floor(o),h="",a=0;a<Math.floor(o);a++){var e=Math.floor(Math.random()*r).toString(r);h=e+h}if(n){var i=Math.pow(r,n),e=Math.floor(Math.random()*i).toString(r);h=e+h}var f=parseInt(h,r);return f!==1/0&&f>=Math.pow(2,t)?hat(t,r):h};hat.rack=function(t,r,o){var a=function(a){var h=0;do{if(h++>10){if(!o)throw new Error("too many ID collisions, use more bits");t+=o}var e=hat(t,r)}while(Object.hasOwnProperty.call(n,e));return n[e]=a,e},n=a.hats={};return a.get=function(t){return a.hats[t]},a.set=function(t,r){return a.hats[t]=r,a},a.bits=t||128,a.base=r||16,a};

},{}],121:[function(require,module,exports){
(function (process){
function ImmediateStore(t){if(!(this instanceof ImmediateStore))return new ImmediateStore(t);if(this.store=t,!this.store||!this.store.get||!this.store.put)throw new Error("First argument must be abstract-chunk-store compliant");this.mem=[]}function nextTick(t,e,o){process.nextTick(function(){t&&t(e,o)})}module.exports=ImmediateStore,ImmediateStore.prototype.put=function(t,e,o){var i=this;i.mem[t]=e,i.store.put(t,e,function(e){i.mem[t]=null,o&&o(e)})},ImmediateStore.prototype.get=function(t,e,o){if("function"==typeof e)return this.get(t,null,e);var i=e&&e.offset||0,r=e&&e.length&&i+e.length,n=this.mem[t];return n?nextTick(o,null,e?n.slice(i,r):n):void this.store.get(t,e,o)},ImmediateStore.prototype.close=function(t){this.store.close(t)},ImmediateStore.prototype.destroy=function(t){this.store.destroy(t)};

}).call(this,require('_process'))

},{"_process":15}],122:[function(require,module,exports){
"function"==typeof Object.create?module.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:module.exports=function(t,e){t.super_=e;var o=function(){};o.prototype=e.prototype,t.prototype=new o,t.prototype.constructor=t};

},{}],123:[function(require,module,exports){
function MediaSourceStream(e,r){var o=this;if(!(o instanceof MediaSourceStream))return new MediaSourceStream(e,r);if(stream.Writable.call(o,r),!MediaSource)throw new Error("web browser lacks MediaSource support");if(r||(r={}),o._elem=e,o._mediaSource=new MediaSource,o._sourceBuffer=null,o._cb=null,o._type=r.type||getType(r.extname),!o._type)throw new Error("missing `opts.type` or `opts.extname` options");o._elem.src=window.URL.createObjectURL(o._mediaSource),o._mediaSource.addEventListener("sourceopen",function(){MediaSource.isTypeSupported(o._type)?(o._sourceBuffer=o._mediaSource.addSourceBuffer(o._type),o._sourceBuffer.addEventListener("updateend",o._flow.bind(o)),o._flow()):o._mediaSource.endOfStream("decode")}),o.on("finish",function(){o._mediaSource.endOfStream()})}function getType(e){return e?("."!==e[0]&&(e="."+e),{".m4a":'audio/mp4; codecs="mp4a.40.5"',".m4v":'video/mp4; codecs="avc1.640029, mp4a.40.5"',".mp3":"audio/mpeg",".mp4":'video/mp4; codecs="avc1.640029, mp4a.40.5"',".webm":'video/webm; codecs="vorbis, vp8"'}[e]):null}module.exports=MediaSourceStream;var inherits=require("inherits"),stream=require("stream"),MediaSource="undefined"!=typeof window&&window.MediaSource;inherits(MediaSourceStream,stream.Writable),MediaSourceStream.prototype._write=function(e,r,o){var i=this;return i._sourceBuffer?i._sourceBuffer.updating?o(new Error("Cannot append buffer while source buffer updating")):(i._sourceBuffer.appendBuffer(e),void(i._cb=o)):void(i._cb=function(t){return t?o(t):void i._write(e,r,o)})},MediaSourceStream.prototype._flow=function(){var e=this;e._cb&&e._cb(null)};

},{"inherits":122,"stream":33}],124:[function(require,module,exports){
(function (process){
function Storage(t,n){if(!(this instanceof Storage))return new Storage(t,n);if(n||(n={}),this.chunkLength=Number(t),!this.chunkLength)throw new Error("First argument must be a chunk length");this.chunks=[],this.closed=!1,this.length=Number(n.length)||1/0,this.length!==1/0&&(this.lastChunkLength=this.length%this.chunkLength||this.chunkLength,this.lastChunkIndex=Math.ceil(this.length/this.chunkLength)-1)}function nextTick(t,n,e){process.nextTick(function(){t&&t(n,e)})}module.exports=Storage,Storage.prototype.put=function(t,n,e){if(this.closed)return nextTick(e,new Error("Storage is closed"));var h=t===this.lastChunkIndex;return h&&n.length!==this.lastChunkLength?nextTick(e,new Error("Last chunk length must be "+this.lastChunkLength)):h||n.length===this.chunkLength?(this.chunks[t]=n,void nextTick(e,null)):nextTick(e,new Error("Chunk length must be "+this.chunkLength))},Storage.prototype.get=function(t,n,e){if("function"==typeof n)return this.get(t,null,n);if(this.closed)return nextTick(e,new Error("Storage is closed"));var h=this.chunks[t];if(!h)return nextTick(e,new Error("Chunk not found"));if(!n)return nextTick(e,null,h);var r=n.offset||0,i=n.length||h.length-r;nextTick(e,null,h.slice(r,i+r))},Storage.prototype.close=Storage.prototype.destroy=function(t){return this.closed?nextTick(t,new Error("Storage is closed")):(this.closed=!0,this.chunks=null,void nextTick(t,null))};

}).call(this,require('_process'))

},{"_process":15}],125:[function(require,module,exports){
(function (process){
function Mime(){this.types=Object.create(null),this.extensions=Object.create(null)}var path=require("path"),fs=require("fs");Mime.prototype.define=function(e){for(var t in e){for(var i=e[t],s=0;s<i.length;s++)process.env.DEBUG_MIME&&this.types[i]&&console.warn(this._loading.replace(/.*\//,""),'changes "'+i[s]+'" extension type from '+this.types[i]+" to "+t),this.types[i[s]]=t;this.extensions[t]||(this.extensions[t]=i[0])}},Mime.prototype.load=function(e){this._loading=e;var t={},i=fs.readFileSync(e,"ascii"),s=i.split(/[\r\n]+/);s.forEach(function(e){var i=e.replace(/\s*#.*|^\s*|\s*$/g,"").split(/\s+/);t[i.shift()]=i}),this.define(t),this._loading=null},Mime.prototype.lookup=function(e,t){var i=e.replace(/.*[\.\/\\]/,"").toLowerCase();return this.types[i]||t||this.default_type},Mime.prototype.extension=function(e){var t=e.match(/^\s*([^;\s]*)(?:;|\s|$)/)[1].toLowerCase();return this.extensions[t]};var mime=new Mime;mime.define(require("./types.json")),mime.default_type=mime.lookup("bin"),mime.Mime=Mime,mime.charsets={lookup:function(e,t){return/^text\//.test(e)?"UTF-8":t}},module.exports=mime;

}).call(this,require('_process'))

},{"./types.json":126,"_process":15,"fs":2,"path":14}],126:[function(require,module,exports){
module.exports={"application/andrew-inset":["ez"],"application/applixware":["aw"],"application/atom+xml":["atom"],"application/atomcat+xml":["atomcat"],"application/atomsvc+xml":["atomsvc"],"application/ccxml+xml":["ccxml"],"application/cdmi-capability":["cdmia"],"application/cdmi-container":["cdmic"],"application/cdmi-domain":["cdmid"],"application/cdmi-object":["cdmio"],"application/cdmi-queue":["cdmiq"],"application/cu-seeme":["cu"],"application/dash+xml":["mdp"],"application/davmount+xml":["davmount"],"application/docbook+xml":["dbk"],"application/dssc+der":["dssc"],"application/dssc+xml":["xdssc"],"application/ecmascript":["ecma"],"application/emma+xml":["emma"],"application/epub+zip":["epub"],"application/exi":["exi"],"application/font-tdpfr":["pfr"],"application/font-woff":["woff"],"application/font-woff2":["woff2"],"application/gml+xml":["gml"],"application/gpx+xml":["gpx"],"application/gxf":["gxf"],"application/hyperstudio":["stk"],"application/inkml+xml":["ink","inkml"],"application/ipfix":["ipfix"],"application/java-archive":["jar"],"application/java-serialized-object":["ser"],"application/java-vm":["class"],"application/javascript":["js"],"application/json":["json","map"],"application/json5":["json5"],"application/jsonml+json":["jsonml"],"application/lost+xml":["lostxml"],"application/mac-binhex40":["hqx"],"application/mac-compactpro":["cpt"],"application/mads+xml":["mads"],"application/marc":["mrc"],"application/marcxml+xml":["mrcx"],"application/mathematica":["ma","nb","mb"],"application/mathml+xml":["mathml"],"application/mbox":["mbox"],"application/mediaservercontrol+xml":["mscml"],"application/metalink+xml":["metalink"],"application/metalink4+xml":["meta4"],"application/mets+xml":["mets"],"application/mods+xml":["mods"],"application/mp21":["m21","mp21"],"application/mp4":["mp4s","m4p"],"application/msword":["doc","dot"],"application/mxf":["mxf"],"application/octet-stream":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","buffer"],"application/oda":["oda"],"application/oebps-package+xml":["opf"],"application/ogg":["ogx"],"application/omdoc+xml":["omdoc"],"application/onenote":["onetoc","onetoc2","onetmp","onepkg"],"application/oxps":["oxps"],"application/patch-ops-error+xml":["xer"],"application/pdf":["pdf"],"application/pgp-encrypted":["pgp"],"application/pgp-signature":["asc","sig"],"application/pics-rules":["prf"],"application/pkcs10":["p10"],"application/pkcs7-mime":["p7m","p7c"],"application/pkcs7-signature":["p7s"],"application/pkcs8":["p8"],"application/pkix-attr-cert":["ac"],"application/pkix-cert":["cer"],"application/pkix-crl":["crl"],"application/pkix-pkipath":["pkipath"],"application/pkixcmp":["pki"],"application/pls+xml":["pls"],"application/postscript":["ai","eps","ps"],"application/prs.cww":["cww"],"application/pskc+xml":["pskcxml"],"application/rdf+xml":["rdf"],"application/reginfo+xml":["rif"],"application/relax-ng-compact-syntax":["rnc"],"application/resource-lists+xml":["rl"],"application/resource-lists-diff+xml":["rld"],"application/rls-services+xml":["rs"],"application/rpki-ghostbusters":["gbr"],"application/rpki-manifest":["mft"],"application/rpki-roa":["roa"],"application/rsd+xml":["rsd"],"application/rss+xml":["rss"],"application/rtf":["rtf"],"application/sbml+xml":["sbml"],"application/scvp-cv-request":["scq"],"application/scvp-cv-response":["scs"],"application/scvp-vp-request":["spq"],"application/scvp-vp-response":["spp"],"application/sdp":["sdp"],"application/set-payment-initiation":["setpay"],"application/set-registration-initiation":["setreg"],"application/shf+xml":["shf"],"application/smil+xml":["smi","smil"],"application/sparql-query":["rq"],"application/sparql-results+xml":["srx"],"application/srgs":["gram"],"application/srgs+xml":["grxml"],"application/sru+xml":["sru"],"application/ssdl+xml":["ssdl"],"application/ssml+xml":["ssml"],"application/tei+xml":["tei","teicorpus"],"application/thraud+xml":["tfi"],"application/timestamped-data":["tsd"],"application/vnd.3gpp.pic-bw-large":["plb"],"application/vnd.3gpp.pic-bw-small":["psb"],"application/vnd.3gpp.pic-bw-var":["pvb"],"application/vnd.3gpp2.tcap":["tcap"],"application/vnd.3m.post-it-notes":["pwn"],"application/vnd.accpac.simply.aso":["aso"],"application/vnd.accpac.simply.imp":["imp"],"application/vnd.acucobol":["acu"],"application/vnd.acucorp":["atc","acutc"],"application/vnd.adobe.air-application-installer-package+zip":["air"],"application/vnd.adobe.formscentral.fcdt":["fcdt"],"application/vnd.adobe.fxp":["fxp","fxpl"],"application/vnd.adobe.xdp+xml":["xdp"],"application/vnd.adobe.xfdf":["xfdf"],"application/vnd.ahead.space":["ahead"],"application/vnd.airzip.filesecure.azf":["azf"],"application/vnd.airzip.filesecure.azs":["azs"],"application/vnd.amazon.ebook":["azw"],"application/vnd.americandynamics.acc":["acc"],"application/vnd.amiga.ami":["ami"],"application/vnd.android.package-archive":["apk"],"application/vnd.anser-web-certificate-issue-initiation":["cii"],"application/vnd.anser-web-funds-transfer-initiation":["fti"],"application/vnd.antix.game-component":["atx"],"application/vnd.apple.installer+xml":["mpkg"],"application/vnd.apple.mpegurl":["m3u8"],"application/vnd.aristanetworks.swi":["swi"],"application/vnd.astraea-software.iota":["iota"],"application/vnd.audiograph":["aep"],"application/vnd.blueice.multipass":["mpm"],"application/vnd.bmi":["bmi"],"application/vnd.businessobjects":["rep"],"application/vnd.chemdraw+xml":["cdxml"],"application/vnd.chipnuts.karaoke-mmd":["mmd"],"application/vnd.cinderella":["cdy"],"application/vnd.claymore":["cla"],"application/vnd.cloanto.rp9":["rp9"],"application/vnd.clonk.c4group":["c4g","c4d","c4f","c4p","c4u"],"application/vnd.cluetrust.cartomobile-config":["c11amc"],"application/vnd.cluetrust.cartomobile-config-pkg":["c11amz"],"application/vnd.commonspace":["csp"],"application/vnd.contact.cmsg":["cdbcmsg"],"application/vnd.cosmocaller":["cmc"],"application/vnd.crick.clicker":["clkx"],"application/vnd.crick.clicker.keyboard":["clkk"],"application/vnd.crick.clicker.palette":["clkp"],"application/vnd.crick.clicker.template":["clkt"],"application/vnd.crick.clicker.wordbank":["clkw"],"application/vnd.criticaltools.wbs+xml":["wbs"],"application/vnd.ctc-posml":["pml"],"application/vnd.cups-ppd":["ppd"],"application/vnd.curl.car":["car"],"application/vnd.curl.pcurl":["pcurl"],"application/vnd.dart":["dart"],"application/vnd.data-vision.rdz":["rdz"],"application/vnd.dece.data":["uvf","uvvf","uvd","uvvd"],"application/vnd.dece.ttml+xml":["uvt","uvvt"],"application/vnd.dece.unspecified":["uvx","uvvx"],"application/vnd.dece.zip":["uvz","uvvz"],"application/vnd.denovo.fcselayout-link":["fe_launch"],"application/vnd.dna":["dna"],"application/vnd.dolby.mlp":["mlp"],"application/vnd.dpgraph":["dpg"],"application/vnd.dreamfactory":["dfac"],"application/vnd.ds-keypoint":["kpxx"],"application/vnd.dvb.ait":["ait"],"application/vnd.dvb.service":["svc"],"application/vnd.dynageo":["geo"],"application/vnd.ecowin.chart":["mag"],"application/vnd.enliven":["nml"],"application/vnd.epson.esf":["esf"],"application/vnd.epson.msf":["msf"],"application/vnd.epson.quickanime":["qam"],"application/vnd.epson.salt":["slt"],"application/vnd.epson.ssf":["ssf"],"application/vnd.eszigno3+xml":["es3","et3"],"application/vnd.ezpix-album":["ez2"],"application/vnd.ezpix-package":["ez3"],"application/vnd.fdf":["fdf"],"application/vnd.fdsn.mseed":["mseed"],"application/vnd.fdsn.seed":["seed","dataless"],"application/vnd.flographit":["gph"],"application/vnd.fluxtime.clip":["ftc"],"application/vnd.framemaker":["fm","frame","maker","book"],"application/vnd.frogans.fnc":["fnc"],"application/vnd.frogans.ltf":["ltf"],"application/vnd.fsc.weblaunch":["fsc"],"application/vnd.fujitsu.oasys":["oas"],"application/vnd.fujitsu.oasys2":["oa2"],"application/vnd.fujitsu.oasys3":["oa3"],"application/vnd.fujitsu.oasysgp":["fg5"],"application/vnd.fujitsu.oasysprs":["bh2"],"application/vnd.fujixerox.ddd":["ddd"],"application/vnd.fujixerox.docuworks":["xdw"],"application/vnd.fujixerox.docuworks.binder":["xbd"],"application/vnd.fuzzysheet":["fzs"],"application/vnd.genomatix.tuxedo":["txd"],"application/vnd.geogebra.file":["ggb"],"application/vnd.geogebra.tool":["ggt"],"application/vnd.geometry-explorer":["gex","gre"],"application/vnd.geonext":["gxt"],"application/vnd.geoplan":["g2w"],"application/vnd.geospace":["g3w"],"application/vnd.gmx":["gmx"],"application/vnd.google-earth.kml+xml":["kml"],"application/vnd.google-earth.kmz":["kmz"],"application/vnd.grafeq":["gqf","gqs"],"application/vnd.groove-account":["gac"],"application/vnd.groove-help":["ghf"],"application/vnd.groove-identity-message":["gim"],"application/vnd.groove-injector":["grv"],"application/vnd.groove-tool-message":["gtm"],"application/vnd.groove-tool-template":["tpl"],"application/vnd.groove-vcard":["vcg"],"application/vnd.hal+xml":["hal"],"application/vnd.handheld-entertainment+xml":["zmm"],"application/vnd.hbci":["hbci"],"application/vnd.hhe.lesson-player":["les"],"application/vnd.hp-hpgl":["hpgl"],"application/vnd.hp-hpid":["hpid"],"application/vnd.hp-hps":["hps"],"application/vnd.hp-jlyt":["jlt"],"application/vnd.hp-pcl":["pcl"],"application/vnd.hp-pclxl":["pclxl"],"application/vnd.ibm.minipay":["mpy"],"application/vnd.ibm.modcap":["afp","listafp","list3820"],"application/vnd.ibm.rights-management":["irm"],"application/vnd.ibm.secure-container":["sc"],"application/vnd.iccprofile":["icc","icm"],"application/vnd.igloader":["igl"],"application/vnd.immervision-ivp":["ivp"],"application/vnd.immervision-ivu":["ivu"],"application/vnd.insors.igm":["igm"],"application/vnd.intercon.formnet":["xpw","xpx"],"application/vnd.intergeo":["i2g"],"application/vnd.intu.qbo":["qbo"],"application/vnd.intu.qfx":["qfx"],"application/vnd.ipunplugged.rcprofile":["rcprofile"],"application/vnd.irepository.package+xml":["irp"],"application/vnd.is-xpr":["xpr"],"application/vnd.isac.fcs":["fcs"],"application/vnd.jam":["jam"],"application/vnd.jcp.javame.midlet-rms":["rms"],"application/vnd.jisp":["jisp"],"application/vnd.joost.joda-archive":["joda"],"application/vnd.kahootz":["ktz","ktr"],"application/vnd.kde.karbon":["karbon"],"application/vnd.kde.kchart":["chrt"],"application/vnd.kde.kformula":["kfo"],"application/vnd.kde.kivio":["flw"],"application/vnd.kde.kontour":["kon"],"application/vnd.kde.kpresenter":["kpr","kpt"],"application/vnd.kde.kspread":["ksp"],"application/vnd.kde.kword":["kwd","kwt"],"application/vnd.kenameaapp":["htke"],"application/vnd.kidspiration":["kia"],"application/vnd.kinar":["kne","knp"],"application/vnd.koan":["skp","skd","skt","skm"],"application/vnd.kodak-descriptor":["sse"],"application/vnd.las.las+xml":["lasxml"],"application/vnd.llamagraphics.life-balance.desktop":["lbd"],"application/vnd.llamagraphics.life-balance.exchange+xml":["lbe"],"application/vnd.lotus-1-2-3":["123"],"application/vnd.lotus-approach":["apr"],"application/vnd.lotus-freelance":["pre"],"application/vnd.lotus-notes":["nsf"],"application/vnd.lotus-organizer":["org"],"application/vnd.lotus-screencam":["scm"],"application/vnd.lotus-wordpro":["lwp"],"application/vnd.macports.portpkg":["portpkg"],"application/vnd.mcd":["mcd"],"application/vnd.medcalcdata":["mc1"],"application/vnd.mediastation.cdkey":["cdkey"],"application/vnd.mfer":["mwf"],"application/vnd.mfmp":["mfm"],"application/vnd.micrografx.flo":["flo"],"application/vnd.micrografx.igx":["igx"],"application/vnd.mif":["mif"],"application/vnd.mobius.daf":["daf"],"application/vnd.mobius.dis":["dis"],"application/vnd.mobius.mbk":["mbk"],"application/vnd.mobius.mqy":["mqy"],"application/vnd.mobius.msl":["msl"],"application/vnd.mobius.plc":["plc"],"application/vnd.mobius.txf":["txf"],"application/vnd.mophun.application":["mpn"],"application/vnd.mophun.certificate":["mpc"],"application/vnd.mozilla.xul+xml":["xul"],"application/vnd.ms-artgalry":["cil"],"application/vnd.ms-cab-compressed":["cab"],"application/vnd.ms-excel":["xls","xlm","xla","xlc","xlt","xlw"],"application/vnd.ms-excel.addin.macroenabled.12":["xlam"],"application/vnd.ms-excel.sheet.binary.macroenabled.12":["xlsb"],"application/vnd.ms-excel.sheet.macroenabled.12":["xlsm"],"application/vnd.ms-excel.template.macroenabled.12":["xltm"],"application/vnd.ms-fontobject":["eot"],"application/vnd.ms-htmlhelp":["chm"],"application/vnd.ms-ims":["ims"],"application/vnd.ms-lrm":["lrm"],"application/vnd.ms-officetheme":["thmx"],"application/vnd.ms-pki.seccat":["cat"],"application/vnd.ms-pki.stl":["stl"],"application/vnd.ms-powerpoint":["ppt","pps","pot"],"application/vnd.ms-powerpoint.addin.macroenabled.12":["ppam"],"application/vnd.ms-powerpoint.presentation.macroenabled.12":["pptm"],"application/vnd.ms-powerpoint.slide.macroenabled.12":["sldm"],"application/vnd.ms-powerpoint.slideshow.macroenabled.12":["ppsm"],"application/vnd.ms-powerpoint.template.macroenabled.12":["potm"],"application/vnd.ms-project":["mpp","mpt"],"application/vnd.ms-word.document.macroenabled.12":["docm"],"application/vnd.ms-word.template.macroenabled.12":["dotm"],"application/vnd.ms-works":["wps","wks","wcm","wdb"],"application/vnd.ms-wpl":["wpl"],"application/vnd.ms-xpsdocument":["xps"],"application/vnd.mseq":["mseq"],"application/vnd.musician":["mus"],"application/vnd.muvee.style":["msty"],"application/vnd.mynfc":["taglet"],"application/vnd.neurolanguage.nlu":["nlu"],"application/vnd.nitf":["ntf","nitf"],"application/vnd.noblenet-directory":["nnd"],"application/vnd.noblenet-sealer":["nns"],"application/vnd.noblenet-web":["nnw"],"application/vnd.nokia.n-gage.data":["ngdat"],"application/vnd.nokia.radio-preset":["rpst"],"application/vnd.nokia.radio-presets":["rpss"],"application/vnd.novadigm.edm":["edm"],"application/vnd.novadigm.edx":["edx"],"application/vnd.novadigm.ext":["ext"],"application/vnd.oasis.opendocument.chart":["odc"],"application/vnd.oasis.opendocument.chart-template":["otc"],"application/vnd.oasis.opendocument.database":["odb"],"application/vnd.oasis.opendocument.formula":["odf"],"application/vnd.oasis.opendocument.formula-template":["odft"],"application/vnd.oasis.opendocument.graphics":["odg"],"application/vnd.oasis.opendocument.graphics-template":["otg"],"application/vnd.oasis.opendocument.image":["odi"],"application/vnd.oasis.opendocument.image-template":["oti"],"application/vnd.oasis.opendocument.presentation":["odp"],"application/vnd.oasis.opendocument.presentation-template":["otp"],"application/vnd.oasis.opendocument.spreadsheet":["ods"],"application/vnd.oasis.opendocument.spreadsheet-template":["ots"],"application/vnd.oasis.opendocument.text":["odt"],"application/vnd.oasis.opendocument.text-master":["odm"],"application/vnd.oasis.opendocument.text-template":["ott"],"application/vnd.oasis.opendocument.text-web":["oth"],"application/vnd.olpc-sugar":["xo"],"application/vnd.oma.dd2+xml":["dd2"],"application/vnd.openofficeorg.extension":["oxt"],"application/vnd.openxmlformats-officedocument.presentationml.presentation":["pptx"],"application/vnd.openxmlformats-officedocument.presentationml.slide":["sldx"],"application/vnd.openxmlformats-officedocument.presentationml.slideshow":["ppsx"],"application/vnd.openxmlformats-officedocument.presentationml.template":["potx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":["xlsx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.template":["xltx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.document":["docx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.template":["dotx"],"application/vnd.osgeo.mapguide.package":["mgp"],"application/vnd.osgi.dp":["dp"],"application/vnd.osgi.subsystem":["esa"],"application/vnd.palm":["pdb","pqa","oprc"],"application/vnd.pawaafile":["paw"],"application/vnd.pg.format":["str"],"application/vnd.pg.osasli":["ei6"],"application/vnd.picsel":["efif"],"application/vnd.pmi.widget":["wg"],"application/vnd.pocketlearn":["plf"],"application/vnd.powerbuilder6":["pbd"],"application/vnd.previewsystems.box":["box"],"application/vnd.proteus.magazine":["mgz"],"application/vnd.publishare-delta-tree":["qps"],"application/vnd.pvi.ptid1":["ptid"],"application/vnd.quark.quarkxpress":["qxd","qxt","qwd","qwt","qxl","qxb"],"application/vnd.realvnc.bed":["bed"],"application/vnd.recordare.musicxml":["mxl"],"application/vnd.recordare.musicxml+xml":["musicxml"],"application/vnd.rig.cryptonote":["cryptonote"],"application/vnd.rim.cod":["cod"],"application/vnd.rn-realmedia":["rm"],"application/vnd.rn-realmedia-vbr":["rmvb"],"application/vnd.route66.link66+xml":["link66"],"application/vnd.sailingtracker.track":["st"],"application/vnd.seemail":["see"],"application/vnd.sema":["sema"],"application/vnd.semd":["semd"],"application/vnd.semf":["semf"],"application/vnd.shana.informed.formdata":["ifm"],"application/vnd.shana.informed.formtemplate":["itp"],"application/vnd.shana.informed.interchange":["iif"],"application/vnd.shana.informed.package":["ipk"],"application/vnd.simtech-mindmapper":["twd","twds"],"application/vnd.smaf":["mmf"],"application/vnd.smart.teacher":["teacher"],"application/vnd.solent.sdkm+xml":["sdkm","sdkd"],"application/vnd.spotfire.dxp":["dxp"],"application/vnd.spotfire.sfs":["sfs"],"application/vnd.stardivision.calc":["sdc"],"application/vnd.stardivision.draw":["sda"],"application/vnd.stardivision.impress":["sdd"],"application/vnd.stardivision.math":["smf"],"application/vnd.stardivision.writer":["sdw","vor"],"application/vnd.stardivision.writer-global":["sgl"],"application/vnd.stepmania.package":["smzip"],"application/vnd.stepmania.stepchart":["sm"],"application/vnd.sun.xml.calc":["sxc"],"application/vnd.sun.xml.calc.template":["stc"],"application/vnd.sun.xml.draw":["sxd"],"application/vnd.sun.xml.draw.template":["std"],"application/vnd.sun.xml.impress":["sxi"],"application/vnd.sun.xml.impress.template":["sti"],"application/vnd.sun.xml.math":["sxm"],"application/vnd.sun.xml.writer":["sxw"],"application/vnd.sun.xml.writer.global":["sxg"],"application/vnd.sun.xml.writer.template":["stw"],"application/vnd.sus-calendar":["sus","susp"],"application/vnd.svd":["svd"],"application/vnd.symbian.install":["sis","sisx"],"application/vnd.syncml+xml":["xsm"],"application/vnd.syncml.dm+wbxml":["bdm"],"application/vnd.syncml.dm+xml":["xdm"],"application/vnd.tao.intent-module-archive":["tao"],"application/vnd.tcpdump.pcap":["pcap","cap","dmp"],"application/vnd.tmobile-livetv":["tmo"],"application/vnd.trid.tpt":["tpt"],"application/vnd.triscape.mxs":["mxs"],"application/vnd.trueapp":["tra"],"application/vnd.ufdl":["ufd","ufdl"],"application/vnd.uiq.theme":["utz"],"application/vnd.umajin":["umj"],"application/vnd.unity":["unityweb"],"application/vnd.uoml+xml":["uoml"],"application/vnd.vcx":["vcx"],"application/vnd.visio":["vsd","vst","vss","vsw"],"application/vnd.visionary":["vis"],"application/vnd.vsf":["vsf"],"application/vnd.wap.wbxml":["wbxml"],"application/vnd.wap.wmlc":["wmlc"],"application/vnd.wap.wmlscriptc":["wmlsc"],"application/vnd.webturbo":["wtb"],"application/vnd.wolfram.player":["nbp"],"application/vnd.wordperfect":["wpd"],"application/vnd.wqd":["wqd"],"application/vnd.wt.stf":["stf"],"application/vnd.xara":["xar"],"application/vnd.xfdl":["xfdl"],"application/vnd.yamaha.hv-dic":["hvd"],"application/vnd.yamaha.hv-script":["hvs"],"application/vnd.yamaha.hv-voice":["hvp"],"application/vnd.yamaha.openscoreformat":["osf"],"application/vnd.yamaha.openscoreformat.osfpvg+xml":["osfpvg"],"application/vnd.yamaha.smaf-audio":["saf"],"application/vnd.yamaha.smaf-phrase":["spf"],"application/vnd.yellowriver-custom-menu":["cmp"],"application/vnd.zul":["zir","zirz"],"application/vnd.zzazz.deck+xml":["zaz"],"application/voicexml+xml":["vxml"],"application/widget":["wgt"],"application/winhlp":["hlp"],"application/wsdl+xml":["wsdl"],"application/wspolicy+xml":["wspolicy"],"application/x-7z-compressed":["7z"],"application/x-abiword":["abw"],"application/x-ace-compressed":["ace"],"application/x-apple-diskimage":["dmg"],"application/x-authorware-bin":["aab","x32","u32","vox"],"application/x-authorware-map":["aam"],"application/x-authorware-seg":["aas"],"application/x-bcpio":["bcpio"],"application/x-bittorrent":["torrent"],"application/x-blorb":["blb","blorb"],"application/x-bzip":["bz"],"application/x-bzip2":["bz2","boz"],"application/x-cbr":["cbr","cba","cbt","cbz","cb7"],"application/x-cdlink":["vcd"],"application/x-cfs-compressed":["cfs"],"application/x-chat":["chat"],"application/x-chess-pgn":["pgn"],"application/x-chrome-extension":["crx"],"application/x-conference":["nsc"],"application/x-cpio":["cpio"],"application/x-csh":["csh"],"application/x-debian-package":["deb","udeb"],"application/x-dgc-compressed":["dgc"],"application/x-director":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"],"application/x-doom":["wad"],"application/x-dtbncx+xml":["ncx"],"application/x-dtbook+xml":["dtb"],"application/x-dtbresource+xml":["res"],"application/x-dvi":["dvi"],"application/x-envoy":["evy"],"application/x-eva":["eva"],"application/x-font-bdf":["bdf"],"application/x-font-ghostscript":["gsf"],"application/x-font-linux-psf":["psf"],"application/x-font-otf":["otf"],"application/x-font-pcf":["pcf"],"application/x-font-snf":["snf"],"application/x-font-ttf":["ttf","ttc"],"application/x-font-type1":["pfa","pfb","pfm","afm"],"application/x-freearc":["arc"],"application/x-futuresplash":["spl"],"application/x-gca-compressed":["gca"],"application/x-glulx":["ulx"],"application/x-gnumeric":["gnumeric"],"application/x-gramps-xml":["gramps"],"application/x-gtar":["gtar"],"application/x-hdf":["hdf"],"application/x-install-instructions":["install"],"application/x-iso9660-image":["iso"],"application/x-java-jnlp-file":["jnlp"],"application/x-latex":["latex"],"application/x-lua-bytecode":["luac"],"application/x-lzh-compressed":["lzh","lha"],"application/x-mie":["mie"],"application/x-mobipocket-ebook":["prc","mobi"],"application/x-ms-application":["application"],"application/x-ms-shortcut":["lnk"],"application/x-ms-wmd":["wmd"],"application/x-ms-wmz":["wmz"],"application/x-ms-xbap":["xbap"],"application/x-msaccess":["mdb"],"application/x-msbinder":["obd"],"application/x-mscardfile":["crd"],"application/x-msclip":["clp"],"application/x-msdownload":["exe","dll","com","bat","msi"],"application/x-msmediaview":["mvb","m13","m14"],"application/x-msmetafile":["wmf","wmz","emf","emz"],"application/x-msmoney":["mny"],"application/x-mspublisher":["pub"],"application/x-msschedule":["scd"],"application/x-msterminal":["trm"],"application/x-mswrite":["wri"],"application/x-netcdf":["nc","cdf"],"application/x-nzb":["nzb"],"application/x-pkcs12":["p12","pfx"],"application/x-pkcs7-certificates":["p7b","spc"],"application/x-pkcs7-certreqresp":["p7r"],"application/x-rar-compressed":["rar"],"application/x-research-info-systems":["ris"],"application/x-sh":["sh"],"application/x-shar":["shar"],"application/x-shockwave-flash":["swf"],"application/x-silverlight-app":["xap"],"application/x-sql":["sql"],"application/x-stuffit":["sit"],"application/x-stuffitx":["sitx"],"application/x-subrip":["srt"],"application/x-sv4cpio":["sv4cpio"],"application/x-sv4crc":["sv4crc"],"application/x-t3vm-image":["t3"],"application/x-tads":["gam"],"application/x-tar":["tar"],"application/x-tcl":["tcl"],"application/x-tex":["tex"],"application/x-tex-tfm":["tfm"],"application/x-texinfo":["texinfo","texi"],"application/x-tgif":["obj"],"application/x-ustar":["ustar"],"application/x-wais-source":["src"],"application/x-web-app-manifest+json":["webapp"],"application/x-x509-ca-cert":["der","crt"],"application/x-xfig":["fig"],"application/x-xliff+xml":["xlf"],"application/x-xpinstall":["xpi"],"application/x-xz":["xz"],"application/x-zmachine":["z1","z2","z3","z4","z5","z6","z7","z8"],"application/xaml+xml":["xaml"],"application/xcap-diff+xml":["xdf"],"application/xenc+xml":["xenc"],"application/xhtml+xml":["xhtml","xht"],"application/xml":["xml","xsl","xsd"],"application/xml-dtd":["dtd"],"application/xop+xml":["xop"],"application/xproc+xml":["xpl"],"application/xslt+xml":["xslt"],"application/xspf+xml":["xspf"],"application/xv+xml":["mxml","xhvml","xvml","xvm"],"application/yang":["yang"],"application/yin+xml":["yin"],"application/zip":["zip"],"audio/adpcm":["adp"],"audio/basic":["au","snd"],"audio/midi":["mid","midi","kar","rmi"],"audio/mp4":["mp4a","m4a"],"audio/mpeg":["mpga","mp2","mp2a","mp3","m2a","m3a"],"audio/ogg":["oga","ogg","spx"],"audio/s3m":["s3m"],"audio/silk":["sil"],"audio/vnd.dece.audio":["uva","uvva"],"audio/vnd.digital-winds":["eol"],"audio/vnd.dra":["dra"],"audio/vnd.dts":["dts"],"audio/vnd.dts.hd":["dtshd"],"audio/vnd.lucent.voice":["lvp"],"audio/vnd.ms-playready.media.pya":["pya"],"audio/vnd.nuera.ecelp4800":["ecelp4800"],"audio/vnd.nuera.ecelp7470":["ecelp7470"],"audio/vnd.nuera.ecelp9600":["ecelp9600"],"audio/vnd.rip":["rip"],"audio/webm":["weba"],"audio/x-aac":["aac"],"audio/x-aiff":["aif","aiff","aifc"],"audio/x-caf":["caf"],"audio/x-flac":["flac"],"audio/x-matroska":["mka"],"audio/x-mpegurl":["m3u"],"audio/x-ms-wax":["wax"],"audio/x-ms-wma":["wma"],"audio/x-pn-realaudio":["ram","ra"],"audio/x-pn-realaudio-plugin":["rmp"],"audio/x-wav":["wav"],"audio/xm":["xm"],"chemical/x-cdx":["cdx"],"chemical/x-cif":["cif"],"chemical/x-cmdf":["cmdf"],"chemical/x-cml":["cml"],"chemical/x-csml":["csml"],"chemical/x-xyz":["xyz"],"font/opentype":["otf"],"image/bmp":["bmp"],"image/cgm":["cgm"],"image/g3fax":["g3"],"image/gif":["gif"],"image/ief":["ief"],"image/jpeg":["jpeg","jpg","jpe"],"image/ktx":["ktx"],"image/png":["png"],"image/prs.btif":["btif"],"image/sgi":["sgi"],"image/svg+xml":["svg","svgz"],"image/tiff":["tiff","tif"],"image/vnd.adobe.photoshop":["psd"],"image/vnd.dece.graphic":["uvi","uvvi","uvg","uvvg"],"image/vnd.djvu":["djvu","djv"],"image/vnd.dvb.subtitle":["sub"],"image/vnd.dwg":["dwg"],"image/vnd.dxf":["dxf"],"image/vnd.fastbidsheet":["fbs"],"image/vnd.fpx":["fpx"],"image/vnd.fst":["fst"],"image/vnd.fujixerox.edmics-mmr":["mmr"],"image/vnd.fujixerox.edmics-rlc":["rlc"],"image/vnd.ms-modi":["mdi"],"image/vnd.ms-photo":["wdp"],"image/vnd.net-fpx":["npx"],"image/vnd.wap.wbmp":["wbmp"],"image/vnd.xiff":["xif"],"image/webp":["webp"],"image/x-3ds":["3ds"],"image/x-cmu-raster":["ras"],"image/x-cmx":["cmx"],"image/x-freehand":["fh","fhc","fh4","fh5","fh7"],"image/x-icon":["ico"],"image/x-mrsid-image":["sid"],"image/x-pcx":["pcx"],"image/x-pict":["pic","pct"],"image/x-portable-anymap":["pnm"],"image/x-portable-bitmap":["pbm"],"image/x-portable-graymap":["pgm"],"image/x-portable-pixmap":["ppm"],"image/x-rgb":["rgb"],"image/x-tga":["tga"],"image/x-xbitmap":["xbm"],"image/x-xpixmap":["xpm"],"image/x-xwindowdump":["xwd"],"message/rfc822":["eml","mime"],"model/iges":["igs","iges"],"model/mesh":["msh","mesh","silo"],"model/vnd.collada+xml":["dae"],"model/vnd.dwf":["dwf"],"model/vnd.gdl":["gdl"],"model/vnd.gtw":["gtw"],"model/vnd.mts":["mts"],"model/vnd.vtu":["vtu"],"model/vrml":["wrl","vrml"],"model/x3d+binary":["x3db","x3dbz"],"model/x3d+vrml":["x3dv","x3dvz"],"model/x3d+xml":["x3d","x3dz"],"text/cache-manifest":["appcache","manifest"],"text/calendar":["ics","ifb"],"text/coffeescript":["coffee"],"text/css":["css"],"text/csv":["csv"],"text/hjson":["hjson"],"text/html":["html","htm"],"text/jade":["jade"],"text/jsx":["jsx"],"text/less":["less"],"text/n3":["n3"],"text/plain":["txt","text","conf","def","list","log","in","ini"],"text/prs.lines.tag":["dsc"],"text/richtext":["rtx"],"text/sgml":["sgml","sgm"],"text/stylus":["stylus","styl"],"text/tab-separated-values":["tsv"],"text/troff":["t","tr","roff","man","me","ms"],"text/turtle":["ttl"],"text/uri-list":["uri","uris","urls"],"text/vcard":["vcard"],"text/vnd.curl":["curl"],"text/vnd.curl.dcurl":["dcurl"],"text/vnd.curl.mcurl":["mcurl"],"text/vnd.curl.scurl":["scurl"],"text/vnd.dvb.subtitle":["sub"],"text/vnd.fly":["fly"],"text/vnd.fmi.flexstor":["flx"],"text/vnd.graphviz":["gv"],"text/vnd.in3d.3dml":["3dml"],"text/vnd.in3d.spot":["spot"],"text/vnd.sun.j2me.app-descriptor":["jad"],"text/vnd.wap.wml":["wml"],"text/vnd.wap.wmlscript":["wmls"],"text/vtt":["vtt"],"text/x-asm":["s","asm"],"text/x-c":["c","cc","cxx","cpp","h","hh","dic"],"text/x-component":["htc"],"text/x-fortran":["f","for","f77","f90"],"text/x-handlebars-template":["hbs"],"text/x-java-source":["java"],"text/x-lua":["lua"],"text/x-markdown":["markdown","md","mkd"],"text/x-nfo":["nfo"],"text/x-opml":["opml"],"text/x-pascal":["p","pas"],"text/x-sass":["sass"],"text/x-scss":["scss"],"text/x-setext":["etx"],"text/x-sfv":["sfv"],"text/x-uuencode":["uu"],"text/x-vcalendar":["vcs"],"text/x-vcard":["vcf"],"text/yaml":["yaml","yml"],"video/3gpp":["3gp"],"video/3gpp2":["3g2"],"video/h261":["h261"],"video/h263":["h263"],"video/h264":["h264"],"video/jpeg":["jpgv"],"video/jpm":["jpm","jpgm"],"video/mj2":["mj2","mjp2"],"video/mp2t":["ts"],"video/mp4":["mp4","mp4v","mpg4"],"video/mpeg":["mpeg","mpg","mpe","m1v","m2v"],"video/ogg":["ogv"],"video/quicktime":["qt","mov"],"video/vnd.dece.hd":["uvh","uvvh"],"video/vnd.dece.mobile":["uvm","uvvm"],"video/vnd.dece.pd":["uvp","uvvp"],"video/vnd.dece.sd":["uvs","uvvs"],"video/vnd.dece.video":["uvv","uvvv"],"video/vnd.dvb.file":["dvb"],"video/vnd.fvt":["fvt"],"video/vnd.mpegurl":["mxu","m4u"],"video/vnd.ms-playready.media.pyv":["pyv"],"video/vnd.uvvu.mp4":["uvu","uvvu"],"video/vnd.vivo":["viv"],"video/webm":["webm"],"video/x-f4v":["f4v"],"video/x-fli":["fli"],"video/x-flv":["flv"],"video/x-m4v":["m4v"],"video/x-matroska":["mkv","mk3d","mks"],"video/x-mng":["mng"],"video/x-ms-asf":["asf","asx"],"video/x-ms-vob":["vob"],"video/x-ms-wm":["wm"],"video/x-ms-wmv":["wmv"],"video/x-ms-wmx":["wmx"],"video/x-ms-wvx":["wvx"],"video/x-msvideo":["avi"],"video/x-sgi-movie":["movie"],"video/x-smv":["smv"],"x-conference/x-cooltalk":["ice"]}

},{}],127:[function(require,module,exports){
function MultiStream(t,e){return this instanceof MultiStream?(stream.Readable.call(this,e),this.destroyed=!1,this._drained=!1,this._forwarding=!1,this._current=null,this._queue="function"==typeof t?t:t.map(toStreams2),void this._next()):new MultiStream(t,e)}function toStreams2(t){if(!t||"function"==typeof t||t._readableState)return t;var e=(new stream.Readable).wrap(t);return t.destroy&&(e.destroy=t.destroy.bind(t)),e}module.exports=MultiStream;var inherits=require("inherits"),stream=require("stream");inherits(MultiStream,stream.Readable),MultiStream.obj=function(t){return new MultiStream(t,{objectMode:!0,highWaterMark:16})},MultiStream.prototype._read=function(){this._drained=!0,this._forward()},MultiStream.prototype._forward=function(){if(!this._forwarding&&this._drained&&this._current){this._forwarding=!0;for(var t;null!==(t=this._current.read());)this._drained=this.push(t);this._forwarding=!1}},MultiStream.prototype.destroy=function(t){this.destroyed||(this.destroyed=!0,this._current&&this._current.destroy&&this._current.destroy(),"function"!=typeof this._queue&&this._queue.forEach(function(t){t.destroy&&t.destroy()}),t&&this.emit("error",t),this.emit("close"))},MultiStream.prototype._next=function(){var t=this;if(t._current=null,"function"==typeof t._queue)t._queue(function(e,r){return e?t.destroy(e):void t._gotNextStream(toStreams2(r))});else{var e=t._queue.shift();"function"==typeof e&&(e=toStreams2(e())),t._gotNextStream(e)}},MultiStream.prototype._gotNextStream=function(t){function e(){n._forward()}function r(){t._readableState.ended||n.destroy()}function i(){n._current=null,t.removeListener("readable",e),t.removeListener("end",i),t.removeListener("error",o),t.removeListener("close",r),n._next()}function o(t){n.destroy(t)}var n=this;return t?(n._current=t,n._forward(),t.on("readable",e),t.on("end",i),t.on("error",o),void t.on("close",r)):(n.push(null),void n.destroy())};

},{"inherits":122,"stream":33}],128:[function(require,module,exports){
(function (Buffer){
function parseTorrent(e){if("string"==typeof e&&/magnet:/.test(e))return magnet(e);if("string"==typeof e&&(/^[a-f0-9]{40}$/i.test(e)||/^[a-z2-7]{32}$/i.test(e)))return magnet("magnet:?xt=urn:btih:"+e);if(Buffer.isBuffer(e)&&20===e.length)return magnet("magnet:?xt=urn:btih:"+e.toString("hex"));if(Buffer.isBuffer(e))return parseTorrentFile(e);if(e&&e.infoHash)return e.announce||(e.announce=[]),"string"==typeof e.announce&&(e.announce=[e.announce]),e;throw new Error("Invalid torrent identifier")}function parseTorrentRemote(e,r){function t(e){try{n=parseTorrent(e)}catch(t){return r(t)}n&&n.infoHash?r(null,n):r(new Error("Invalid torrent identifier"))}var n;if("function"!=typeof r)throw new Error("second argument must be a Function");r=dezalgo(r);try{n=parseTorrent(e)}catch(o){}n&&n.infoHash?r(null,n):"function"==typeof get&&/^https?:/.test(e)?get.concat({url:e,headers:{"user-agent":"WebTorrent (http://webtorrent.io)"}},function(e,n){return e?(e=new Error("Error downloading torrent: "+e.message),r(e)):void t(n)}):"function"==typeof fs.readFile&&"string"==typeof e?fs.readFile(e,function(e,n){return e?r(new Error("Invalid torrent identifier")):void t(n)}):r(new Error("Invalid torrent identifier"))}module.exports=parseTorrent,module.exports.remote=parseTorrentRemote;var dezalgo=require("dezalgo"),fs=require("fs"),get=require("simple-get"),magnet=require("magnet-uri"),parseTorrentFile=require("parse-torrent-file");module.exports.toMagnetURI=magnet.encode,module.exports.toTorrentFile=parseTorrentFile.encode;

}).call(this,{"isBuffer":require("/home/amar/misc/Dropbox/projects/home/filewi.re/node_modules/watchify/node_modules/browserify/node_modules/insert-module-globals/node_modules/is-buffer/index.js")})

},{"/home/amar/misc/Dropbox/projects/home/filewi.re/node_modules/watchify/node_modules/browserify/node_modules/insert-module-globals/node_modules/is-buffer/index.js":11,"dezalgo":129,"fs":2,"magnet-uri":133,"parse-torrent-file":136,"simple-get":141}],129:[function(require,module,exports){
function dezalgo(a){var p=!0;return asap(function(){p=!1}),function(){var r=arguments,e=this;p?asap(function(){a.apply(e,r)}):a.apply(e,r)}}var wrappy=require("wrappy");module.exports=wrappy(dezalgo);var asap=require("asap");

},{"asap":130,"wrappy":132}],130:[function(require,module,exports){
"use strict";function throwFirstError(){if(pendingErrors.length)throw pendingErrors.shift()}function asap(r){var s;s=freeTasks.length?freeTasks.pop():new RawTask,s.task=r,rawAsap(s)}function RawTask(){this.task=null}var rawAsap=require("./raw"),freeTasks=[],pendingErrors=[],requestErrorThrow=rawAsap.makeRequestCallFromTimer(throwFirstError);module.exports=asap,RawTask.prototype.call=function(){try{this.task.call()}catch(r){asap.onerror?asap.onerror(r):(pendingErrors.push(r),requestErrorThrow())}finally{this.task=null,freeTasks[freeTasks.length]=this}};

},{"./raw":131}],131:[function(require,module,exports){
(function (global){
"use strict";function rawAsap(e){queue.length||(requestFlush(),flushing=!0),queue[queue.length]=e}function flush(){for(;index<queue.length;){var e=index;if(index+=1,queue[e].call(),index>capacity){for(var u=0,r=queue.length-index;r>u;u++)queue[u]=queue[u+index];queue.length-=index,index=0}}queue.length=0,index=0,flushing=!1}function makeRequestCallFromMutationObserver(e){var u=1,r=new BrowserMutationObserver(e),t=document.createTextNode("");return r.observe(t,{characterData:!0}),function(){u=-u,t.data=u}}function makeRequestCallFromTimer(e){return function(){function u(){clearTimeout(r),clearInterval(t),e()}var r=setTimeout(u,0),t=setInterval(u,50)}}module.exports=rawAsap;var queue=[],flushing=!1,requestFlush,index=0,capacity=1024,BrowserMutationObserver=global.MutationObserver||global.WebKitMutationObserver;requestFlush="function"==typeof BrowserMutationObserver?makeRequestCallFromMutationObserver(flush):makeRequestCallFromTimer(flush),rawAsap.requestFlush=requestFlush,rawAsap.makeRequestCallFromTimer=makeRequestCallFromTimer;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],132:[function(require,module,exports){
function wrappy(n,r){function e(){for(var r=new Array(arguments.length),e=0;e<r.length;e++)r[e]=arguments[e];var t=n.apply(this,r),o=r[r.length-1];return"function"==typeof t&&t!==o&&Object.keys(o).forEach(function(n){t[n]=o[n]}),t}if(n&&r)return wrappy(n)(r);if("function"!=typeof n)throw new TypeError("need wrapper function");return Object.keys(n).forEach(function(r){e[r]=n[r]}),e}module.exports=wrappy;

},{}],133:[function(require,module,exports){
(function (Buffer){
function magnetURIDecode(e){var n={},r=e.split("magnet:?")[1],t=r&&r.length>=0?r.split("&"):[];t.forEach(function(e){var r=e.split("=");if(2===r.length){var t=r[0],o=r[1];if("dn"===t&&(o=decodeURIComponent(o).replace(/\+/g," ")),("tr"===t||"xs"===t||"as"===t||"ws"===t)&&(o=decodeURIComponent(o)),"kt"===t&&(o=decodeURIComponent(o).split("+")),n[t])if(Array.isArray(n[t]))n[t].push(o);else{var a=n[t];n[t]=[a,o]}else n[t]=o}});var o;if(n.xt){var a=Array.isArray(n.xt)?n.xt:[n.xt];a.forEach(function(e){if(o=e.match(/^urn:btih:(.{40})/))n.infoHash=new Buffer(o[1],"hex").toString("hex");else if(o=e.match(/^urn:btih:(.{32})/)){var r=base32.decode(o[1]);n.infoHash=new Buffer(r,"binary").toString("hex")}})}return n.dn&&(n.name=n.dn),n.kt&&(n.keywords=n.kt),"string"==typeof n.tr?n.announce=[n.tr]:Array.isArray(n.tr)?n.announce=n.tr:n.announce=[],uniq(n.announce),n.urlList=[],("string"==typeof n.as||Array.isArray(n.as))&&(n.urlList=n.urlList.concat(n.as)),("string"==typeof n.ws||Array.isArray(n.ws))&&(n.urlList=n.urlList.concat(n.ws)),n}function magnetURIEncode(e){e=extend(e),e.infoHash&&(e.xt="urn:btih:"+e.infoHash),e.name&&(e.dn=e.name),e.keywords&&(e.kt=e.keywords),e.announce&&(e.tr=e.announce),e.urlList&&(e.ws=e.urlList,delete e.as);var n="magnet:?";return Object.keys(e).filter(function(e){return 2===e.length}).forEach(function(r,t){var o=Array.isArray(e[r])?e[r]:[e[r]];o.forEach(function(e,o){!(t>0||o>0)||"kt"===r&&0!==o||(n+="&"),"dn"===r&&(e=encodeURIComponent(e).replace(/%20/g,"+")),("tr"===r||"xs"===r||"as"===r||"ws"===r)&&(e=encodeURIComponent(e)),"kt"===r&&(e=encodeURIComponent(e)),n+="kt"===r&&o>0?"+"+e:r+"="+e})}),n}module.exports=magnetURIDecode,module.exports.decode=magnetURIDecode,module.exports.encode=magnetURIEncode;var base32=require("thirty-two"),extend=require("xtend"),uniq=require("uniq");

}).call(this,require("buffer").Buffer)

},{"buffer":4,"thirty-two":134,"uniq":171,"xtend":184}],134:[function(require,module,exports){
var base32=require("./thirty-two");exports.encode=base32.encode,exports.decode=base32.decode;

},{"./thirty-two":135}],135:[function(require,module,exports){
(function (Buffer){
function quintetCount(e){var r=Math.floor(e.length/5);return e.length%5==0?r:r+1}var charTable="ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",byteTable=[255,255,26,27,28,29,30,31,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,255,255,255,255,255];exports.encode=function(e){var r=0,t=0,n=0,f=0,a=new Buffer(8*quintetCount(e));for(Buffer.isBuffer(e)||(e=new Buffer(e));r<e.length;){var o=e[r];n>3?(f=o&255>>n,n=(n+5)%8,f=f<<n|(r+1<e.length?e[r+1]:0)>>8-n,r++):(f=o>>8-(n+5)&31,n=(n+5)%8,0==n&&r++),a[t]=charTable.charCodeAt(f),t++}for(r=t;r<a.length;r++)a[r]=61;return a},exports.decode=function(e){var r,t=0,n=0,f=0;Buffer.isBuffer(e)||(e=new Buffer(e));for(var a=new Buffer(Math.ceil(5*e.length/8)),o=0;o<e.length&&61!=e[o];o++){var u=e[o]-48;if(!(u<byteTable.length))throw new Error("Invalid input - it is not base32 encoded string");n=byteTable[u],3>=t?(t=(t+5)%8,0==t?(r|=n,a[f]=r,f++,r=0):r|=255&n<<8-t):(t=(t+5)%8,r|=255&n>>>t,a[f]=r,f++,r=255&n<<8-t)}return a.slice(0,f)};

}).call(this,require("buffer").Buffer)

},{"buffer":4}],136:[function(require,module,exports){
(function (Buffer){
function decodeTorrentFile(e){Buffer.isBuffer(e)&&(e=bencode.decode(e)),ensure(e.info,"info"),ensure(e.info["name.utf-8"]||e.info.name,"info.name"),ensure(e.info["piece length"],"info['piece length']"),ensure(e.info.pieces,"info.pieces"),e.info.files?e.info.files.forEach(function(e){ensure("number"==typeof e.length,"info.files[0].length"),ensure(e["path.utf-8"]||e.path,"info.files[0].path")}):ensure("number"==typeof e.info.length,"info.length");var n={};n.info=e.info,n.infoBuffer=bencode.encode(e.info),n.infoHash=sha1.sync(n.infoBuffer),n.name=(e.info["name.utf-8"]||e.info.name).toString(),void 0!==e.info["private"]&&(n["private"]=!!e.info["private"]),e["creation date"]&&(n.created=new Date(1e3*e["creation date"])),e["created by"]&&(n.createdBy=e["created by"].toString()),Buffer.isBuffer(e.comment)&&(n.comment=e.comment.toString()),n.announce=[],e["announce-list"]&&e["announce-list"].length?e["announce-list"].forEach(function(e){e.forEach(function(e){n.announce.push(e.toString())})}):e.announce&&n.announce.push(e.announce.toString()),uniq(n.announce),Buffer.isBuffer(e["url-list"])&&(e["url-list"]=e["url-list"].length>0?[e["url-list"]]:[]),n.urlList=(e["url-list"]||[]).map(function(e){return e.toString()});var t=e.info.files||[e.info];n.files=t.map(function(e,i){var o=[].concat(n.name,e["path.utf-8"]||e.path||[]).map(function(e){return e.toString()});return{path:path.join.apply(null,[path.sep].concat(o)).slice(1),name:o[o.length-1],length:e.length,offset:t.slice(0,i).reduce(sumLength,0)}}),n.length=t.reduce(sumLength,0);var i=n.files[n.files.length-1];return n.pieceLength=e.info["piece length"],n.lastPieceLength=(i.offset+i.length)%n.pieceLength||n.pieceLength,n.pieces=splitPieces(e.info.pieces),n}function encodeTorrentFile(e){var n={info:e.info};return n["announce-list"]=e.announce.map(function(e){return n.announce||(n.announce=e),e=new Buffer(e,"utf8"),[e]}),e.created&&(n["creation date"]=e.created.getTime()/1e3|0),e.urlList&&(n["url-list"]=e.urlList),bencode.encode(n)}function sumLength(e,n){return e+n.length}function splitPieces(e){for(var n=[],t=0;t<e.length;t+=20)n.push(e.slice(t,t+20).toString("hex"));return n}function ensure(e,n){if(!e)throw new Error("Torrent is missing required field: "+n)}module.exports=decodeTorrentFile,module.exports.decode=decodeTorrentFile,module.exports.encode=encodeTorrentFile;var bencode=require("bencode"),path=require("path"),sha1=require("simple-sha1"),uniq=require("uniq");

}).call(this,require("buffer").Buffer)

},{"bencode":137,"buffer":4,"path":14,"simple-sha1":152,"uniq":171}],137:[function(require,module,exports){
module.exports={encode:require("./lib/encode"),decode:require("./lib/decode")};

},{"./lib/decode":138,"./lib/encode":140}],138:[function(require,module,exports){
(function (Buffer){
function decode(e,d){return decode.position=0,decode.encoding=d||null,decode.data=Buffer.isBuffer(e)?e:new Buffer(e),decode.next()}var Dict=require("./dict");decode.position=0,decode.data=null,decode.encoding=null,decode.next=function(){switch(decode.data[decode.position]){case 100:return decode.dictionary();case 108:return decode.list();case 105:return decode.integer();default:return decode.bytes()}},decode.find=function(e){for(var d=decode.position,o=decode.data.length,t=decode.data;o>d;){if(t[d]===e)return d;d++}throw new Error('Invalid data: Missing delimiter "'+String.fromCharCode(e)+'" [0x'+e.toString(16)+"]")},decode.dictionary=function(){decode.position++;for(var e=new Dict;101!==decode.data[decode.position];)e.binarySet(decode.bytes(),decode.next());return decode.position++,e},decode.list=function(){decode.position++;for(var e=[];101!==decode.data[decode.position];)e.push(decode.next());return decode.position++,e},decode.integer=function(){var e=decode.find(101),d=decode.data.toString("ascii",decode.position+1,e);return decode.position+=e+1-decode.position,parseInt(d,10)},decode.bytes=function(){var e=decode.find(58),d=parseInt(decode.data.toString("ascii",decode.position,e),10),o=++e+d;return decode.position=o,decode.encoding?decode.data.toString(decode.encoding,e,o):decode.data.slice(e,o)},module.exports=decode;

}).call(this,require("buffer").Buffer)

},{"./dict":139,"buffer":4}],139:[function(require,module,exports){
var Dict=module.exports=function(){Object.defineProperty(this,"_keys",{enumerable:!1,value:[]})};Dict.prototype.binaryKeys=function(){return this._keys.slice()},Dict.prototype.binarySet=function(e,t){this._keys.push(e),this[e]=t};

},{}],140:[function(require,module,exports){
(function (Buffer){
function encode(e){var n=[];return encode._encode(n,e),Buffer.concat(n)}encode._floatConversionDetected=!1,encode._encode=function(e,n){if(Buffer.isBuffer(n))return e.push(new Buffer(n.length+":")),void e.push(n);switch(typeof n){case"string":encode.bytes(e,n);break;case"number":encode.number(e,n);break;case"object":n.constructor===Array?encode.list(e,n):encode.dict(e,n)}};var buff_e=new Buffer("e"),buff_d=new Buffer("d"),buff_l=new Buffer("l");encode.bytes=function(e,n){e.push(new Buffer(Buffer.byteLength(n)+":"+n))},encode.number=function(e,n){var o=2147483648,c=n/o<<0,f=n%o<<0,t=c*o+f;e.push(new Buffer("i"+t+"e")),t===n||encode._floatConversionDetected||(encode._floatConversionDetected=!0,console.warn('WARNING: Possible data corruption detected with value "'+n+'":','Bencoding only defines support for integers, value was converted to "'+t+'"'),console.trace())},encode.dict=function(e,n){e.push(buff_d);for(var o,c=0,f=Object.keys(n).sort(),t=f.length;t>c;c++)o=f[c],encode.bytes(e,o),encode._encode(e,n[o]);e.push(buff_e)},encode.list=function(e,n){var o=0,c=n.length;for(e.push(buff_l);c>o;o++)encode._encode(e,n[o]);e.push(buff_e)},module.exports=encode;

}).call(this,require("buffer").Buffer)

},{"buffer":4}],141:[function(require,module,exports){
(function (Buffer){
function simpleGet(e,t){e="string"==typeof e?{url:e}:extend(e),t=once(t),e.url&&parseOptsUrl(e),null==e.headers&&(e.headers={}),null==e.maxRedirects&&(e.maxRedirects=10);var r=e.body;e.body=void 0,r&&!e.method&&(e.method="POST");var o=Object.keys(e.headers).some(function(e){return"accept-encoding"===e.toLowerCase()});o||(e.headers["accept-encoding"]="gzip, deflate");var n="https:"===e.protocol?https:http,s=n.request(e,function(r){return r.statusCode>=300&&r.statusCode<400&&"location"in r.headers?(e.url=r.headers.location,parseOptsUrl(e),r.resume(),e.maxRedirects-=1,void(e.maxRedirects>0?simpleGet(e,t):t(new Error("too many redirects")))):void t(null,"function"==typeof unzipResponse?unzipResponse(r):r)});return s.on("error",t),s.end(r),s}function parseOptsUrl(e){var t=url.parse(e.url);t.hostname&&(e.hostname=t.hostname),t.port&&(e.port=t.port),t.protocol&&(e.protocol=t.protocol),e.path=t.path,delete e.url}module.exports=simpleGet;var extend=require("xtend"),http=require("http"),https=require("https"),once=require("once"),unzipResponse=require("unzip-response"),url=require("url");module.exports.concat=function(e,t){return simpleGet(e,function(e,r){if(e)return t(e);var o=[];r.on("data",function(e){o.push(e)}),r.on("end",function(){t(null,Buffer.concat(o),r)})})},["get","post","put","patch","head","delete"].forEach(function(e){module.exports[e]=function(t,r){return"string"==typeof t&&(t={url:t}),t.method=e.toUpperCase(),simpleGet(t,r)}});

}).call(this,require("buffer").Buffer)

},{"buffer":4,"http":34,"https":9,"once":143,"unzip-response":3,"url":44,"xtend":184}],142:[function(require,module,exports){
function wrappy(n,r){function e(){for(var r=new Array(arguments.length),e=0;e<r.length;e++)r[e]=arguments[e];var t=n.apply(this,r),o=r[r.length-1];return"function"==typeof t&&t!==o&&Object.keys(o).forEach(function(n){t[n]=o[n]}),t}if(n&&r)return wrappy(n)(r);if("function"!=typeof n)throw new TypeError("need wrapper function");return Object.keys(n).forEach(function(r){e[r]=n[r]}),e}module.exports=wrappy;

},{}],143:[function(require,module,exports){
function once(e){var n=function(){return n.called?n.value:(n.called=!0,n.value=e.apply(this,arguments))};return n.called=!1,n}var wrappy=require("wrappy");module.exports=wrappy(once),once.proto=once(function(){Object.defineProperty(Function.prototype,"once",{value:function(){return once(this)},configurable:!0})});

},{"wrappy":142}],144:[function(require,module,exports){
"use strict";var fs=require("fs");module.exports=function(s,c){var t="function"==typeof fs.access?fs.access:fs.stat;t(s,function(s){c(null,!s)})},module.exports.sync=function(s){var c="function"==typeof fs.accessSync?fs.accessSync:fs.statSync;try{return c(s),!0}catch(t){return!1}};

},{"fs":2}],145:[function(require,module,exports){
var once=require("once"),eos=require("end-of-stream"),fs=require("fs"),noop=function(){},isFn=function(e){return"function"==typeof e},isFS=function(e){return(e instanceof(fs.ReadStream||noop)||e instanceof(fs.WriteStream||noop))&&isFn(e.close)},isRequest=function(e){return e.setHeader&&isFn(e.abort)},destroyer=function(e,r,n,o){o=once(o);var t=!1;e.on("close",function(){t=!0}),eos(e,{readable:r,writable:n},function(e){return e?o(e):(t=!0,void o())});var i=!1;return function(r){return t||i?void 0:(i=!0,isFS(e)?e.close():isRequest(e)?e.abort():isFn(e.destroy)?e.destroy():void o(r||new Error("stream was destroyed")))}},call=function(e){e()},pipe=function(e,r){return e.pipe(r)},pump=function(){var e=Array.prototype.slice.call(arguments),r=isFn(e[e.length-1]||noop)&&e.pop()||noop;if(Array.isArray(e[0])&&(e=e[0]),e.length<2)throw new Error("pump requires two streams per minimum");var n,o=e.map(function(t,i){var s=i<e.length-1,u=i>0;return destroyer(t,s,u,function(e){n||(n=e),e&&o.forEach(call),s||(o.forEach(call),r(n))})});return e.reduce(pipe)};module.exports=pump;

},{"end-of-stream":117,"fs":2,"once":147}],146:[function(require,module,exports){
function wrappy(n,r){function e(){for(var r=new Array(arguments.length),e=0;e<r.length;e++)r[e]=arguments[e];var t=n.apply(this,r),o=r[r.length-1];return"function"==typeof t&&t!==o&&Object.keys(o).forEach(function(n){t[n]=o[n]}),t}if(n&&r)return wrappy(n)(r);if("function"!=typeof n)throw new TypeError("need wrapper function");return Object.keys(n).forEach(function(r){e[r]=n[r]}),e}module.exports=wrappy;

},{}],147:[function(require,module,exports){
function once(e){var n=function(){return n.called?n.value:(n.called=!0,n.value=e.apply(this,arguments))};return n.called=!1,n}var wrappy=require("wrappy");module.exports=wrappy(once),once.proto=once(function(){Object.defineProperty(Function.prototype,"once",{value:function(){return once(this)},configurable:!0})});

},{"wrappy":146}],148:[function(require,module,exports){
var iterate=function(r){var t=0;return function(){if(t===r.length)return null;var e=r.length-t,n=Math.random()*e|0,a=r[t+n],u=r[t];return r[t]=a,r[t+n]=u,t++,a}};module.exports=iterate;

},{}],149:[function(require,module,exports){
module.exports=function(r,t){var e=!0,i=t.indexOf("=");if(-1==i)return-2;var s=t.slice(i+1).split(",").map(function(t){var t=t.split("-"),i=parseInt(t[0],10),s=parseInt(t[1],10);return isNaN(i)?(i=r-s,s=r-1):isNaN(s)&&(s=r-1),s>r-1&&(s=r-1),(isNaN(i)||isNaN(s)||i>s||0>i)&&(e=!1),{start:i,end:s}});return s.type=t.slice(0,i),e?s:-1};

},{}],150:[function(require,module,exports){
function reemit(e,r,t){Array.isArray(t)||(t=[t]);var n=[];return t.forEach(function(t){var i=function(){var e=[].slice.call(arguments);e.unshift(t),r.emit.apply(r,e)};n.push(i),e.on(t,i)}),function(){t.forEach(function(r,t){e.removeListener(r,n[t])})}}function filter(e,r){var t=new EventEmitter;return reemit(e,t,r),t}module.exports=reemit,module.exports.filter=filter;var EventEmitter=require("events").EventEmitter;

},{"events":8}],151:[function(require,module,exports){
(function (process){
module.exports=function(n,o){function i(n){function i(){o&&o(n,t),o=null}e?process.nextTick(i):i()}function c(n,o,c){t[n]=c,(0===--r||o)&&i(o)}var t,r,u,e=!0;Array.isArray(n)?(t=[],r=n.length):(u=Object.keys(n),t={},r=u.length),r?u?u.forEach(function(o){n[o](c.bind(void 0,o))}):n.forEach(function(n,o){n(c.bind(void 0,o))}):i(null),e=!1};

}).call(this,require('_process'))

},{"_process":15}],152:[function(require,module,exports){
function sha1(t,r){return subtle?("string"==typeof t&&(t=uint8array(t)),void subtle.digest({name:"sha-1"},t).then(function(t){r(hex(new Uint8Array(t)))},function(n){r(sha1sync(t))})):void setTimeout(r,0,sha1sync(t))}function uint8array(t){for(var r=t.length,n=new Uint8Array(r),e=0;r>e;e++)n[e]=t.charCodeAt(e);return n}function hex(t){for(var r=t.length,n=[],e=0;r>e;e++){var s=t[e];n.push((s>>>4).toString(16)),n.push((15&s).toString(16))}return n.join("")}var Rusha=require("rusha"),rusha=new Rusha,crypto=window.crypto||window.msCrypto||{},subtle=crypto.subtle||crypto.webkitSubtle,sha1sync=rusha.digest.bind(rusha);try{subtle.digest({name:"sha-1"},new Uint8Array)["catch"](function(){subtle=!1})}catch(err){subtle=!1}module.exports=sha1,module.exports.sync=sha1sync;

},{"rusha":153}],153:[function(require,module,exports){
(function (global){
!function(){function e(t){"use strict";var a={fill:0},f=function(e){for(e+=9;e%64>0;e+=1);return e},i=function(e,r){for(var n=r>>2;n<e.length;n++)e[n]=0},s=function(e,r,n){e[r>>2]|=128<<24-(r%4<<3),e[((r>>2)+2&-16)+14]=n>>29,e[((r>>2)+2&-16)+15]=n<<3},o=function(e,r,n,t,a){var f,i=this,s=a%4,o=t%4,c=t-o;if(c>0)switch(s){case 0:e[a+3|0]=i.charCodeAt(n);case 1:e[a+2|0]=i.charCodeAt(n+1);case 2:e[a+1|0]=i.charCodeAt(n+2);case 3:e[0|a]=i.charCodeAt(n+3)}for(f=s;c>f;f=f+4|0)r[a+f>>2]=i.charCodeAt(n+f)<<24|i.charCodeAt(n+f+1)<<16|i.charCodeAt(n+f+2)<<8|i.charCodeAt(n+f+3);switch(o){case 3:e[a+c+1|0]=i.charCodeAt(n+c+2);case 2:e[a+c+2|0]=i.charCodeAt(n+c+1);case 1:e[a+c+3|0]=i.charCodeAt(n+c)}},c=function(e,r,n,t,a){var f,i=this,s=a%4,o=t%4,c=t-o;if(c>0)switch(s){case 0:e[a+3|0]=i[n];case 1:e[a+2|0]=i[n+1];case 2:e[a+1|0]=i[n+2];case 3:e[0|a]=i[n+3]}for(f=4-s;c>f;f=f+=4)r[a+f>>2]=i[n+f]<<24|i[n+f+1]<<16|i[n+f+2]<<8|i[n+f+3];switch(o){case 3:e[a+c+1|0]=i[n+c+2];case 2:e[a+c+2|0]=i[n+c+1];case 1:e[a+c+3|0]=i[n+c]}},u=function(e,r,t,a,f){var i,s=this,o=f%4,c=a%4,u=a-c,h=new Uint8Array(n.readAsArrayBuffer(s.slice(t,t+a)));if(u>0)switch(o){case 0:e[f+3|0]=h[0];case 1:e[f+2|0]=h[1];case 2:e[f+1|0]=h[2];case 3:e[0|f]=h[3]}for(i=4-o;u>i;i=i+=4)r[f+i>>2]=h[i]<<24|h[i+1]<<16|h[i+2]<<8|h[i+3];switch(c){case 3:e[f+u+1|0]=h[u+2];case 2:e[f+u+2|0]=h[u+1];case 1:e[f+u+3|0]=h[u]}},h=function(e){switch(r.getDataType(e)){case"string":return o.bind(e);case"array":return c.bind(e);case"buffer":return c.bind(e);case"arraybuffer":return c.bind(new Uint8Array(e));case"view":return c.bind(new Uint8Array(e.buffer,e.byteOffset,e.byteLength));case"blob":return u.bind(e)}},d=function(e){var r,n,t="0123456789abcdef",a=[],f=new Uint8Array(e);for(r=0;r<f.length;r++)n=f[r],a[r]=t.charAt(n>>4&15)+t.charAt(n>>0&15);return a.join("")},w=function(e){var r;if(65536>=e)return 65536;if(16777216>e)for(r=1;e>r;r<<=1);else for(r=16777216;e>r;r+=16777216);return r},y=function(r){if(r%64>0)throw new Error("Chunk size must be a multiple of 128 bit");a.maxChunkLen=r,a.padMaxChunkLen=f(r),a.heap=new ArrayBuffer(w(a.padMaxChunkLen+320+20)),a.h32=new Int32Array(a.heap),a.h8=new Int8Array(a.heap),a.core=new e._core({Int32Array:Int32Array,DataView:DataView},{},a.heap),a.buffer=null};y(t||65536);var A=function(e,r){var n=new Int32Array(e,r+320,5);n[0]=1732584193,n[1]=-271733879,n[2]=-1732584194,n[3]=271733878,n[4]=-1009589776},b=function(e,r){var n=f(e),t=new Int32Array(a.heap,0,n>>2);return i(t,e),s(t,e,r),n},l=function(e,r,n){h(e)(a.h8,a.h32,r,n,0)},p=function(e,r,n,t,f){var i=n;f&&(i=b(n,t)),l(e,r,n),a.core.hash(i,a.padMaxChunkLen)},g=function(e,r){var n=new Int32Array(e,r+320,5),t=new Int32Array(5),a=new DataView(t.buffer);return a.setInt32(0,n[0],!1),a.setInt32(4,n[1],!1),a.setInt32(8,n[2],!1),a.setInt32(12,n[3],!1),a.setInt32(16,n[4],!1),t},v=this.rawDigest=function(e){var r=e.byteLength||e.length||e.size||0;A(a.heap,a.padMaxChunkLen);var n=0,t=a.maxChunkLen;for(n=0;r>n+t;n+=t)p(e,n,t,r,!1);return p(e,n,r-n,r,!0),g(a.heap,a.padMaxChunkLen)};this.digest=this.digestFromString=this.digestFromBuffer=this.digestFromArrayBuffer=function(e){return d(v(e).buffer)}}var r={getDataType:function(e){if("string"==typeof e)return"string";if(e instanceof Array)return"array";if("undefined"!=typeof global&&global.Buffer&&global.Buffer.isBuffer(e))return"buffer";if(e instanceof ArrayBuffer)return"arraybuffer";if(e.buffer instanceof ArrayBuffer)return"view";if(e instanceof Blob)return"blob";throw new Error("Unsupported data type.")}};if(e._core=function(e,r,n){"use asm";function t(e,r){e|=0,r|=0;var n=0,t=0,f=0,i=0,s=0,o=0,c=0,u=0,h=0,d=0,w=0,y=0,A=0,b=0;for(f=a[r+320>>2]|0,s=a[r+324>>2]|0,c=a[r+328>>2]|0,h=a[r+332>>2]|0,w=a[r+336>>2]|0,n=0;(n|0)<(e|0);n=n+64|0){for(i=f,o=s,u=c,d=h,y=w,t=0;(t|0)<64;t=t+4|0)b=a[n+t>>2]|0,A=((f<<5|f>>>27)+(s&c|~s&h)|0)+((b+w|0)+1518500249|0)|0,w=h,h=c,c=s<<30|s>>>2,s=f,f=A,a[e+t>>2]=b;for(t=e+64|0;(t|0)<(e+80|0);t=t+4|0)b=(a[t-12>>2]^a[t-32>>2]^a[t-56>>2]^a[t-64>>2])<<1|(a[t-12>>2]^a[t-32>>2]^a[t-56>>2]^a[t-64>>2])>>>31,A=((f<<5|f>>>27)+(s&c|~s&h)|0)+((b+w|0)+1518500249|0)|0,w=h,h=c,c=s<<30|s>>>2,s=f,f=A,a[t>>2]=b;for(t=e+80|0;(t|0)<(e+160|0);t=t+4|0)b=(a[t-12>>2]^a[t-32>>2]^a[t-56>>2]^a[t-64>>2])<<1|(a[t-12>>2]^a[t-32>>2]^a[t-56>>2]^a[t-64>>2])>>>31,A=((f<<5|f>>>27)+(s^c^h)|0)+((b+w|0)+1859775393|0)|0,w=h,h=c,c=s<<30|s>>>2,s=f,f=A,a[t>>2]=b;for(t=e+160|0;(t|0)<(e+240|0);t=t+4|0)b=(a[t-12>>2]^a[t-32>>2]^a[t-56>>2]^a[t-64>>2])<<1|(a[t-12>>2]^a[t-32>>2]^a[t-56>>2]^a[t-64>>2])>>>31,A=((f<<5|f>>>27)+(s&c|s&h|c&h)|0)+((b+w|0)-1894007588|0)|0,w=h,h=c,c=s<<30|s>>>2,s=f,f=A,a[t>>2]=b;for(t=e+240|0;(t|0)<(e+320|0);t=t+4|0)b=(a[t-12>>2]^a[t-32>>2]^a[t-56>>2]^a[t-64>>2])<<1|(a[t-12>>2]^a[t-32>>2]^a[t-56>>2]^a[t-64>>2])>>>31,A=((f<<5|f>>>27)+(s^c^h)|0)+((b+w|0)-899497514|0)|0,w=h,h=c,c=s<<30|s>>>2,s=f,f=A,a[t>>2]=b;f=f+i|0,s=s+o|0,c=c+u|0,h=h+d|0,w=w+y|0}a[r+320>>2]=f,a[r+324>>2]=s,a[r+328>>2]=c,a[r+332>>2]=h,a[r+336>>2]=w}var a=new e.Int32Array(n);return{hash:t}},"undefined"!=typeof module?module.exports=e:"undefined"!=typeof window&&(window.Rusha=e),"undefined"!=typeof FileReaderSync){var n=new FileReaderSync,t=new e(4194304);self.onmessage=function(e){var r,n=e.data.data;try{r=t.digest(n),self.postMessage({id:e.data.id,hash:r})}catch(a){self.postMessage({id:e.data.id,error:a.name})}}}}();

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],154:[function(require,module,exports){
var tick=1,maxTick=65535,resolution=4,inc=function(){tick=tick+1&maxTick},timer=setInterval(inc,1e3/resolution|0);timer.unref&&timer.unref(),module.exports=function(t){var i=resolution*(t||5),n=[0],r=1,e=tick-1&maxTick;return function(t){var o=tick-e&maxTick;for(o>i&&(o=i),e=tick;o--;)r===i&&(r=0),n[r]=n[0===r?i-1:r-1],r++;t&&(n[r-1]+=t);var c=n[r-1],u=n.length<i?0:n[r===i?0:r];return n.length<resolution?c:(c-u)*resolution/n.length}};

},{}],155:[function(require,module,exports){
(function (process,Buffer){
function Discovery(e){var r=this;if(!(r instanceof Discovery))return new Discovery(e);if(EventEmitter.call(r),extend(r,{announce:[],dht:"function"==typeof DHT,rtcConfig:null,peerId:null,port:0,tracker:!0,wrtc:null},e),r.infoHash=null,r.infoHashHex=null,r.torrent=null,r._externalDHT="object"==typeof r.dht,r._performedDHTLookup=!1,!r.peerId)throw new Error("peerId required");if(!process.browser&&!r.port)throw new Error("port required");r.dht&&r._createDHT(r.dhtPort)}module.exports=Discovery;var debug=require("debug")("torrent-discovery"),DHT=require("bittorrent-dht/client"),EventEmitter=require("events").EventEmitter,extend=require("xtend/mutable"),inherits=require("inherits"),parallel=require("run-parallel"),reemit=require("re-emitter"),Tracker=require("bittorrent-tracker/client");inherits(Discovery,EventEmitter),Discovery.prototype.setTorrent=function(e){var r=this;if(!r.infoHash&&Buffer.isBuffer(e)||"string"==typeof e)r.infoHash="string"==typeof e?new Buffer(e,"hex"):e;else{if(r.torrent||!e||!e.infoHash)return;r.torrent=e,r.infoHash="string"==typeof e.infoHash?new Buffer(e.infoHash,"hex"):e.infoHash}r.infoHashHex=r.infoHash.toString("hex"),debug("setTorrent %s",r.infoHashHex),r.tracker&&r.tracker!==!0?r.tracker.torrentLength=e.length:r._createTracker(),r.dht&&(r.dht.ready?r._dhtLookupAndAnnounce():r.dht.on("ready",r._dhtLookupAndAnnounce.bind(r)))},Discovery.prototype.updatePort=function(e){var r=this;e!==r.port&&(r.port=e,r.dht&&r.infoHash&&(r._performedDHTLookup=!1,r._dhtLookupAndAnnounce()),r.tracker&&r.tracker!==!0&&(r.tracker.stop(),r.tracker.destroy(function(){r._createTracker()})))},Discovery.prototype.stop=function(e){var r=this,t=[];r.tracker&&r.tracker!==!0&&(r.tracker.stop(),t.push(function(e){r.tracker.destroy(e)})),!r._externalDHT&&r.dht&&r.dht!==!0&&t.push(function(e){r.dht.destroy(e)}),parallel(t,e)},Discovery.prototype._createDHT=function(e){var r=this;r._externalDHT||(r.dht=new DHT),reemit(r.dht,r,["error","warning"]),r.dht.on("peer",function(e,t){t===r.infoHashHex&&r.emit("peer",e)}),r._externalDHT||r.dht.listen(e)},Discovery.prototype._createTracker=function(){var e=this;if(e.tracker){var r=e.torrent?extend({announce:[]},e.torrent):{infoHash:e.infoHashHex,announce:[]};e.announce&&(r.announce=r.announce.concat(e.announce));var t={rtcConfig:e.rtcConfig,wrtc:e.wrtc};e.tracker=new Tracker(e.peerId,e.port,r,t),reemit(e.tracker,e,["peer","warning","error"]),e.tracker.on("update",function(r){e.emit("trackerAnnounce",r)}),e.tracker.start()}},Discovery.prototype._dhtLookupAndAnnounce=function(){var e=this;e._performedDHTLookup||(e._performedDHTLookup=!0,debug("dht lookup"),e.dht.lookup(e.infoHash,function(r){!r&&e.port&&(debug("dht announce"),e.dht.announce(e.infoHash,e.port,function(){debug("dht announce complete"),e.emit("dhtAnnounce")}))}))};

}).call(this,require('_process'),require("buffer").Buffer)

},{"_process":15,"bittorrent-dht/client":3,"bittorrent-tracker/client":156,"buffer":4,"debug":114,"events":8,"inherits":122,"re-emitter":150,"run-parallel":151,"xtend/mutable":185}],156:[function(require,module,exports){
(function (process,Buffer){
function Client(e,n,t,r){var o=this;if(!(o instanceof Client))return new Client(e,n,t,r);EventEmitter.call(o),r||(r={}),o._peerId=Buffer.isBuffer(e)?e:new Buffer(e,"hex"),o._peerIdHex=o._peerId.toString("hex"),o._peerIdBinary=o._peerId.toString("binary"),o._infoHash=Buffer.isBuffer(t.infoHash)?t.infoHash:new Buffer(t.infoHash,"hex"),o._infoHashHex=o._infoHash.toString("hex"),o._infoHashBinary=o._infoHash.toString("binary"),o.torrentLength=t.length,o.destroyed=!1,o._port=n,o._rtcConfig=r.rtcConfig,o._wrtc=r.wrtc,debug("new client %s",o._infoHashHex);var i=!!o._wrtc||"undefined"!=typeof window,a="string"==typeof t.announce?[t.announce]:null==t.announce?[]:t.announce;a=a.map(function(e){return e=e.toString(),"/"===e[e.length-1]&&(e=e.substring(0,e.length-1)),e}),a=uniq(a),o._trackers=a.map(function(e){var n=url.parse(e).protocol;return"http:"!==n&&"https:"!==n||"function"!=typeof HTTPTracker?"udp:"===n&&"function"==typeof UDPTracker?new UDPTracker(o,e):"ws:"!==n&&"wss:"!==n||!i?(process.nextTick(function(){var n=new Error("unsupported tracker protocol for "+e);o.emit("warning",n)}),null):new WebSocketTracker(o,e):new HTTPTracker(o,e)}).filter(Boolean)}module.exports=Client;var EventEmitter=require("events").EventEmitter,debug=require("debug")("bittorrent-tracker"),inherits=require("inherits"),once=require("once"),parallel=require("run-parallel"),uniq=require("uniq"),url=require("url"),common=require("./lib/common"),HTTPTracker=require("./lib/client/http-tracker"),UDPTracker=require("./lib/client/udp-tracker"),WebSocketTracker=require("./lib/client/websocket-tracker");inherits(Client,EventEmitter),Client.scrape=function(e,n,t){t=once(t);var r=new Buffer("01234567890123456789"),o=6881,i={infoHash:Array.isArray(n)?n[0]:n,announce:[e]},a=new Client(r,o,i);a.once("error",t);var u=Array.isArray(n)?n.length:1,c={};a.on("scrape",function(e){if(u-=1,c[e.infoHash]=e,0===u){a.destroy();var n=Object.keys(c);1===n.length?t(null,c[n[0]]):t(null,c)}}),n=Array.isArray(n)?n.map(function(e){return new Buffer(e,"hex")}):new Buffer(n,"hex"),a.scrape({infoHash:n})},Client.prototype.start=function(e){var n=this;debug("send `start`"),e=n._defaultAnnounceOpts(e),e.event="started",n._announce(e),n._trackers.forEach(function(e){e.setInterval()})},Client.prototype.stop=function(e){var n=this;debug("send `stop`"),e=n._defaultAnnounceOpts(e),e.event="stopped",n._announce(e)},Client.prototype.complete=function(e){var n=this;debug("send `complete`"),e||(e={}),null==e.downloaded&&null!=n.torrentLength&&(e.downloaded=n.torrentLength),e=n._defaultAnnounceOpts(e),e.event="completed",n._announce(e)},Client.prototype.update=function(e){var n=this;debug("send `update`"),e=n._defaultAnnounceOpts(e),e.event&&delete e.event,n._announce(e)},Client.prototype._announce=function(e){var n=this;n._trackers.forEach(function(n){n.announce(e)})},Client.prototype.scrape=function(e){var n=this;debug("send `scrape`"),e||(e={}),n._trackers.forEach(function(n){n.scrape(e)})},Client.prototype.setInterval=function(e){var n=this;debug("setInterval %d",e),n._trackers.forEach(function(n){n.setInterval(e)})},Client.prototype.destroy=function(e){var n=this;if(!n.destroyed){n.destroyed=!0,debug("destroy");var t=n._trackers.map(function(e){return function(n){e.destroy(n)}});parallel(t,e),n._trackers=[]}},Client.prototype._defaultAnnounceOpts=function(e){var n=this;return e||(e={}),null==e.numwant&&(e.numwant=common.DEFAULT_ANNOUNCE_PEERS),null==e.uploaded&&(e.uploaded=0),null==e.downloaded&&(e.downloaded=0),null==e.left&&null!=n.torrentLength&&(e.left=n.torrentLength-e.downloaded),e};

}).call(this,require('_process'),require("buffer").Buffer)

},{"./lib/client/http-tracker":3,"./lib/client/udp-tracker":3,"./lib/client/websocket-tracker":158,"./lib/common":160,"_process":15,"buffer":4,"debug":114,"events":8,"inherits":122,"once":162,"run-parallel":151,"uniq":171,"url":44}],157:[function(require,module,exports){
function Tracker(e,r){var t=this;EventEmitter.call(t),t.client=e,t.announceUrl=r,t.interval=null,t.destroyed=!1}module.exports=Tracker;var EventEmitter=require("events").EventEmitter,inherits=require("inherits");inherits(Tracker,EventEmitter),Tracker.prototype.setInterval=function(e){var r=this;if(!r.interval&&(null==e&&(e=r.DEFAULT_ANNOUNCE_INTERVAL),clearInterval(r.interval),e)){var t=r.announce.bind(r,r.client._defaultAnnounceOpts());r.interval=setInterval(t,e),r.interval.unref&&r.interval.unref()}};

},{"events":8,"inherits":122}],158:[function(require,module,exports){
function WebSocketTracker(e,o,n){var r=this;Tracker.call(r,e,o),debug("new websocket tracker %s",o),r.peers={},r.socket=null,r.reconnecting=!1,r._openSocket()}function noop(){}module.exports=WebSocketTracker;var debug=require("debug")("bittorrent-tracker:websocket-tracker"),hat=require("hat"),inherits=require("inherits"),Peer=require("simple-peer"),Socket=require("simple-websocket"),common=require("../common"),Tracker=require("./tracker"),socketPool={},RECONNECT_VARIANCE=3e4,RECONNECT_MINIMUM=5e3;inherits(WebSocketTracker,Tracker),WebSocketTracker.prototype.DEFAULT_ANNOUNCE_INTERVAL=3e4,WebSocketTracker.prototype.announce=function(e){var o=this;if(!o.destroyed&&!o.reconnecting){if(!o.socket.connected)return o.socket.once("connect",o.announce.bind(o,e));var n=Math.min(e.numwant,10);o._generateOffers(n,function(r){var t={numwant:n,uploaded:e.uploaded||0,downloaded:e.downloaded,event:e.event,info_hash:o.client._infoHashBinary,peer_id:o.client._peerIdBinary,offers:r};o._trackerId&&(t.trackerid=o._trackerId),o._send(t)})}},WebSocketTracker.prototype.scrape=function(e){var o=this;o.destroyed||o.reconnecting||o._onSocketError(new Error("scrape not supported "+o.announceUrl))},WebSocketTracker.prototype.destroy=function(e){var o=this;if(!o.destroyed){o.destroyed=!0,clearInterval(o.interval),socketPool[o.announceUrl]=null,o.socket.removeListener("connect",o._onSocketConnectBound),o.socket.removeListener("data",o._onSocketDataBound),o.socket.removeListener("close",o._onSocketCloseBound),o.socket.removeListener("error",o._onSocketErrorBound),o._onSocketConnectBound=null,o._onSocketErrorBound=null,o._onSocketDataBound=null,o._onSocketCloseBound=null,o.socket.on("error",noop);try{o.socket.destroy(e)}catch(n){e&&e()}o.socket=null}},WebSocketTracker.prototype._openSocket=function(){var e=this;e.destroyed=!1,e._onSocketConnectBound=e._onSocketConnect.bind(e),e._onSocketErrorBound=e._onSocketError.bind(e),e._onSocketDataBound=e._onSocketData.bind(e),e._onSocketCloseBound=e._onSocketClose.bind(e),e.socket=socketPool[e.announceUrl],e.socket||(e.socket=socketPool[e.announceUrl]=new Socket(e.announceUrl),e.socket.on("connect",e._onSocketConnectBound)),e.socket.on("data",e._onSocketDataBound),e.socket.on("close",e._onSocketCloseBound),e.socket.on("error",e._onSocketErrorBound)},WebSocketTracker.prototype._onSocketConnect=function(){var e=this;e.destroyed||e.reconnecting&&(e.reconnecting=!1,e.announce(e.client._defaultAnnounceOpts()))},WebSocketTracker.prototype._onSocketData=function(e){var o=this;if(!o.destroyed){if("object"!=typeof e||null===e)return o.client.emit("warning",new Error("Invalid tracker response"));if(e.info_hash!==o.client._infoHashBinary)return void debug("ignoring websocket data from %s for %s (looking for %s: reused socket)",o.announceUrl,common.binaryToHex(e.info_hash),o.client._infoHashHex);if(!e.peer_id||e.peer_id!==o.client._peerIdBinary){debug("received %s from %s for %s",JSON.stringify(e),o.announceUrl,o.client._infoHashHex);var n=e["failure reason"];if(n)return o.client.emit("warning",new Error(n));var r=e["warning message"];r&&o.client.emit("warning",new Error(r));var t=e.interval||e["min interval"];t&&o.setInterval(1e3*t);var c=e["tracker id"];c&&(o._trackerId=c),e.complete&&o.client.emit("update",{announce:o.announceUrl,complete:e.complete,incomplete:e.incomplete});var i;e.offer&&e.peer_id&&(i=new Peer({trickle:!1,config:o.client._rtcConfig,wrtc:o.client._wrtc}),i.id=common.binaryToHex(e.peer_id),i.once("signal",function(n){var r={info_hash:o.client._infoHashBinary,peer_id:o.client._peerIdBinary,to_peer_id:e.peer_id,answer:n,offer_id:e.offer_id};o._trackerId&&(r.trackerid=o._trackerId),o._send(r)}),i.signal(e.offer),o.client.emit("peer",i)),e.answer&&e.peer_id&&(i=o.peers[common.binaryToHex(e.offer_id)],i?(i.id=common.binaryToHex(e.peer_id),i.signal(e.answer),o.client.emit("peer",i)):debug("got unexpected answer: "+JSON.stringify(e.answer)))}}},WebSocketTracker.prototype._onSocketClose=function(){var e=this;e.destroyed||(e.destroy(),e._startReconnectTimer())},WebSocketTracker.prototype._onSocketError=function(e){var o=this;o.destroyed||(o.destroy(),o.client.emit("warning",e),o._startReconnectTimer())},WebSocketTracker.prototype._startReconnectTimer=function(){var e=this,o=Math.floor(Math.random()*RECONNECT_VARIANCE)+RECONNECT_MINIMUM;e.reconnecting=!0;var n=setTimeout(function(){e._openSocket()},o);n.unref&&n.unref(),debug("reconnecting socket in %s ms",o)},WebSocketTracker.prototype._send=function(e){var o=this;if(!o.destroyed){var n=JSON.stringify(e);debug("send %s",n),o.socket.send(n)}},WebSocketTracker.prototype._generateOffers=function(e,o){function n(){var e=hat(160),o=t.peers[e]=new Peer({initiator:!0,trickle:!1,config:t.client._rtcConfig,wrtc:t.client._wrtc});o.once("signal",function(o){c.push({offer:o,offer_id:common.hexToBinary(e)}),r()})}function r(){c.length===e&&(debug("generated %s offers",e),o(c))}var t=this,c=[];debug("generating %s offers",e);for(var i=0;e>i;++i)n()};

},{"../common":160,"./tracker":157,"debug":114,"hat":120,"inherits":122,"simple-peer":163,"simple-websocket":167}],159:[function(require,module,exports){
(function (Buffer){
function toUInt32(e){var t=new Buffer(4);return t.writeUInt32BE(e,0),t}var querystring=require("querystring");exports.IPV4_RE=/^[\d\.]+$/,exports.IPV6_RE=/^[\da-fA-F:]+$/,exports.CONNECTION_ID=Buffer.concat([toUInt32(1047),toUInt32(655366528)]),exports.ACTIONS={CONNECT:0,ANNOUNCE:1,SCRAPE:2,ERROR:3},exports.EVENTS={update:0,completed:1,started:2,stopped:3},exports.EVENT_IDS={0:"update",1:"completed",2:"started",3:"stopped"},exports.EVENT_NAMES={update:"update",completed:"complete",started:"start",stopped:"stop"},exports.toUInt32=toUInt32,exports.querystringParse=function(e){var t=querystring.unescape;querystring.unescape=unescape;var r=querystring.parse(e);return querystring.unescape=t,r},exports.querystringStringify=function(e){var t=querystring.escape;querystring.escape=escape;var r=querystring.stringify(e);return r=r.replace(/[\@\*\/\+]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}),querystring.escape=t,r};

}).call(this,require("buffer").Buffer)

},{"buffer":4,"querystring":19}],160:[function(require,module,exports){
(function (Buffer){
var extend=require("xtend/mutable");exports.DEFAULT_ANNOUNCE_PEERS=50,exports.MAX_ANNOUNCE_PEERS=82,exports.binaryToHex=function(e){return new Buffer(e,"binary").toString("hex")},exports.hexToBinary=function(e){return new Buffer(e,"hex").toString("binary")};var config=require("./common-node");extend(exports,config);

}).call(this,require("buffer").Buffer)

},{"./common-node":159,"buffer":4,"xtend/mutable":185}],161:[function(require,module,exports){
function wrappy(n,r){function e(){for(var r=new Array(arguments.length),e=0;e<r.length;e++)r[e]=arguments[e];var t=n.apply(this,r),o=r[r.length-1];return"function"==typeof t&&t!==o&&Object.keys(o).forEach(function(n){t[n]=o[n]}),t}if(n&&r)return wrappy(n)(r);if("function"!=typeof n)throw new TypeError("need wrapper function");return Object.keys(n).forEach(function(r){e[r]=n[r]}),e}module.exports=wrappy;

},{}],162:[function(require,module,exports){
function once(e){var n=function(){return n.called?n.value:(n.called=!0,n.value=e.apply(this,arguments))};return n.called=!1,n}var wrappy=require("wrappy");module.exports=wrappy(once),once.proto=once(function(){Object.defineProperty(Function.prototype,"once",{value:function(){return once(this)},configurable:!0})});

},{"wrappy":161}],163:[function(require,module,exports){
(function (Buffer){
function Peer(e){var n=this;if(!(n instanceof Peer))return new Peer(e);if(n._debug("new peer %o",e),e||(e={}),e.allowHalfOpen=!1,null==e.highWaterMark&&(e.highWaterMark=1048576),stream.Duplex.call(n,e),n.initiator=e.initiator||!1,n.channelConfig=e.channelConfig||Peer.channelConfig,n.channelName=e.channelName||hat(160),e.initiator||(n.channelName=null),n.config=e.config||Peer.config,n.constraints=e.constraints||Peer.constraints,n.reconnectTimer=e.reconnectTimer||0,n.sdpTransform=e.sdpTransform||function(e){return e},n.stream=e.stream||!1,n.trickle=void 0!==e.trickle?e.trickle:!0,n.destroyed=!1,n.connected=!1,n.remoteAddress=void 0,n.remoteFamily=void 0,n.remotePort=void 0,n.localAddress=void 0,n.localPort=void 0,n._wrtc=e.wrtc||getBrowserRTC(),!n._wrtc)throw"undefined"==typeof window?new Error("No WebRTC support: Specify `opts.wrtc` option in this environment"):new Error("No WebRTC support: Not a supported browser");n._maxBufferedAmount=e.highWaterMark,n._pcReady=!1,n._channelReady=!1,n._iceComplete=!1,n._channel=null,n._pendingCandidates=[],n._chunk=null,n._cb=null,n._interval=null,n._reconnectTimeout=null,n._pc=new n._wrtc.RTCPeerConnection(n.config,n.constraints),n._pc.oniceconnectionstatechange=n._onIceConnectionStateChange.bind(n),n._pc.onsignalingstatechange=n._onSignalingStateChange.bind(n),n._pc.onicecandidate=n._onIceCandidate.bind(n),n.stream&&n._pc.addStream(n.stream),n._pc.onaddstream=n._onAddStream.bind(n),n.initiator?(n._setupData({channel:n._pc.createDataChannel(n.channelName,n.channelConfig)}),n._pc.onnegotiationneeded=once(n._createOffer.bind(n)),"undefined"!=typeof window&&window.webkitRTCPeerConnection||n._pc.onnegotiationneeded()):n._pc.ondatachannel=n._setupData.bind(n),n.on("finish",function(){n.connected?setTimeout(function(){n._destroy()},100):n.once("connect",function(){setTimeout(function(){n._destroy()},100)})})}function noop(){}module.exports=Peer;var debug=require("debug")("simple-peer"),getBrowserRTC=require("get-browser-rtc"),hat=require("hat"),inherits=require("inherits"),isTypedArray=require("is-typedarray"),once=require("once"),stream=require("stream"),toBuffer=require("typedarray-to-buffer");inherits(Peer,stream.Duplex),Peer.WEBRTC_SUPPORT=!!getBrowserRTC(),Peer.config={iceServers:[{url:"stun:23.21.150.121",urls:"stun:23.21.150.121"}]},Peer.constraints={},Peer.channelConfig={},Object.defineProperty(Peer.prototype,"bufferSize",{get:function(){var e=this;return e._channel&&e._channel.bufferedAmount||0}}),Peer.prototype.address=function(){var e=this;return{port:e.localPort,family:"IPv4",address:e.localAddress}},Peer.prototype.signal=function(e){function n(e){try{t._pc.addIceCandidate(new t._wrtc.RTCIceCandidate(e),noop,t._onError.bind(t))}catch(n){t._destroy(new Error("error adding candidate: "+n.message))}}var t=this;if(t.destroyed)throw new Error("cannot signal after peer is destroyed");if("string"==typeof e)try{e=JSON.parse(e)}catch(r){e={}}t._debug("signal()"),e.sdp&&t._pc.setRemoteDescription(new t._wrtc.RTCSessionDescription(e),function(){t.destroyed||("offer"===t._pc.remoteDescription.type&&t._createAnswer(),t._pendingCandidates.forEach(n),t._pendingCandidates=[])},t._onError.bind(t)),e.candidate&&(t._pc.remoteDescription?n(e.candidate):t._pendingCandidates.push(e.candidate)),e.sdp||e.candidate||t._destroy(new Error("signal() called with invalid signal data"))},Peer.prototype.send=function(e){var n=this;isTypedArray.strict(e)||e instanceof ArrayBuffer||Buffer.isBuffer(e)||"string"==typeof e||"undefined"!=typeof Blob&&e instanceof Blob||(e=JSON.stringify(e)),Buffer.isBuffer(e)&&!isTypedArray.strict(e)&&(e=new Uint8Array(e));var t=e.length||e.byteLength||e.size;n._channel.send(e),n._debug("write: %d bytes",t)},Peer.prototype.destroy=function(e){var n=this;n._destroy(null,e)},Peer.prototype._destroy=function(e,n){var t=this;if(!t.destroyed){if(n&&t.once("close",n),t._debug("destroy (error: %s)",e&&e.message),t.readable=t.writable=!1,t._readableState.ended||t.push(null),t._writableState.finished||t.end(),t.destroyed=!0,t.connected=!1,t._pcReady=!1,t._channelReady=!1,t._chunk=null,t._cb=null,clearInterval(t._interval),clearTimeout(t._reconnectTimeout),t._pc){try{t._pc.close()}catch(e){}t._pc.oniceconnectionstatechange=null,t._pc.onsignalingstatechange=null,t._pc.onicecandidate=null}if(t._channel){try{t._channel.close()}catch(e){}t._channel.onmessage=null,t._channel.onopen=null,t._channel.onclose=null}t._pc=null,t._channel=null,e&&t.emit("error",e),t.emit("close")}},Peer.prototype._setupData=function(e){var n=this;n._channel=e.channel,n.channelName=n._channel.label,n._channel.binaryType="arraybuffer",n._channel.onmessage=n._onChannelMessage.bind(n),n._channel.onopen=n._onChannelOpen.bind(n),n._channel.onclose=n._onChannelClose.bind(n)},Peer.prototype._read=function(){},Peer.prototype._write=function(e,n,t){var r=this;if(r.destroyed)return t(new Error("cannot write after peer is destroyed"));if(r.connected){try{r.send(e)}catch(o){return r._onError(o)}r._channel.bufferedAmount>r._maxBufferedAmount?(r._debug("start backpressure: bufferedAmount %d",r._channel.bufferedAmount),r._cb=t):t(null)}else r._debug("write before connect"),r._chunk=e,r._cb=t},Peer.prototype._createOffer=function(){var e=this;e.destroyed||e._pc.createOffer(function(n){if(!e.destroyed){n.sdp=e.sdpTransform(n.sdp),e._pc.setLocalDescription(n,noop,e._onError.bind(e));var t=function(){var t=e._pc.localDescription||n;e._debug("signal"),e.emit("signal",{type:t.type,sdp:t.sdp})};e.trickle||e._iceComplete?t():e.once("_iceComplete",t)}},e._onError.bind(e),e.offerConstraints)},Peer.prototype._createAnswer=function(){var e=this;e.destroyed||e._pc.createAnswer(function(n){if(!e.destroyed){n.sdp=e.sdpTransform(n.sdp),e._pc.setLocalDescription(n,noop,e._onError.bind(e));var t=function(){var t=e._pc.localDescription||n;e._debug("signal"),e.emit("signal",{type:t.type,sdp:t.sdp})};e.trickle||e._iceComplete?t():e.once("_iceComplete",t)}},e._onError.bind(e),e.answerConstraints)},Peer.prototype._onIceConnectionStateChange=function(){var e=this;if(!e.destroyed){var n=e._pc.iceGatheringState,t=e._pc.iceConnectionState;e._debug("iceConnectionStateChange %s %s",n,t),e.emit("iceConnectionStateChange",n,t),("connected"===t||"completed"===t)&&(clearTimeout(e._reconnectTimeout),e._pcReady=!0,e._maybeReady()),"disconnected"===t&&(e.reconnectTimer?(clearTimeout(e._reconnectTimeout),e._reconnectTimeout=setTimeout(function(){e._destroy()},e.reconnectTimer)):e._destroy()),"closed"===t&&e._destroy()}},Peer.prototype._maybeReady=function(){function e(e){if(e.forEach(function(e){"remotecandidate"===e.type?(n.remoteAddress=e.ipAddress,n.remotePort=Number(e.portNumber),n.remoteFamily="IPv4",n._debug("connect remote: %s:%s (%s)",n.remoteAddress,n.remotePort,n.remoteFamily)):"localcandidate"===e.type&&"host"===e.candidateType&&(n.localAddress=e.ipAddress,n.localPort=Number(e.portNumber),n._debug("connect local: %s:%s",n.localAddress,n.localPort))}),n._connecting=!1,n.connected=!0,n._chunk){try{n.send(n._chunk)}catch(t){return n._onError(t)}n._chunk=null,n._debug('sent chunk from "write before connect"');var r=n._cb;n._cb=null,r(null)}n._interval=setInterval(function(){if(n._cb&&n._channel&&!(n._channel.bufferedAmount>n._maxBufferedAmount)){n._debug("ending backpressure: bufferedAmount %d",n._channel.bufferedAmount);var e=n._cb;n._cb=null,e(null)}},150),n._interval.unref&&n._interval.unref(),n._debug("connect"),n.emit("connect")}var n=this;n._debug("maybeReady pc %s channel %s",n._pcReady,n._channelReady),!n.connected&&!n._connecting&&n._pcReady&&n._channelReady&&(n._connecting=!0,"undefined"!=typeof window&&window.mozRTCPeerConnection?n._pc.getStats(null,function(n){var t=[];n.forEach(function(e){t.push(e)}),e(t)},n._onError.bind(n)):n._pc.getStats(function(n){var t=[];n.result().forEach(function(e){var n={};e.names().forEach(function(t){n[t]=e.stat(t)}),n.id=e.id,n.type=e.type,n.timestamp=e.timestamp,t.push(n)}),e(t)}))},Peer.prototype._onSignalingStateChange=function(){var e=this;e.destroyed||(e._debug("signalingStateChange %s",e._pc.signalingState),e.emit("signalingStateChange",e._pc.signalingState))},Peer.prototype._onIceCandidate=function(e){var n=this;n.destroyed||(e.candidate&&n.trickle?n.emit("signal",{candidate:{candidate:e.candidate.candidate,sdpMLineIndex:e.candidate.sdpMLineIndex,sdpMid:e.candidate.sdpMid}}):e.candidate||(n._iceComplete=!0,n.emit("_iceComplete")))},Peer.prototype._onChannelMessage=function(e){var n=this;if(!n.destroyed){var t=e.data;if(n._debug("read: %d bytes",t.byteLength||t.length),t instanceof ArrayBuffer)t=toBuffer(new Uint8Array(t)),n.push(t);else{try{t=JSON.parse(t)}catch(r){}n.emit("data",t)}}},Peer.prototype._onChannelOpen=function(){var e=this;e.connected||e.destroyed||(e._debug("on channel open"),e._channelReady=!0,e._maybeReady())},Peer.prototype._onChannelClose=function(){var e=this;e.destroyed||(e._debug("on channel close"),e._destroy())},Peer.prototype._onAddStream=function(e){var n=this;n.destroyed||(n._debug("on add stream"),n.emit("stream",e.stream))},Peer.prototype._onError=function(e){var n=this;n.destroyed||(n._debug("error %s",e.message||e),n._destroy(e))},Peer.prototype._debug=function(){var e=this,n=[].slice.call(arguments),t=e.channelName&&e.channelName.substring(0,7);n[0]="["+t+"] "+n[0],debug.apply(null,n)};

}).call(this,{"isBuffer":require("/home/amar/misc/Dropbox/projects/home/filewi.re/node_modules/watchify/node_modules/browserify/node_modules/insert-module-globals/node_modules/is-buffer/index.js")})

},{"/home/amar/misc/Dropbox/projects/home/filewi.re/node_modules/watchify/node_modules/browserify/node_modules/insert-module-globals/node_modules/is-buffer/index.js":11,"debug":114,"get-browser-rtc":164,"hat":120,"inherits":122,"is-typedarray":165,"once":162,"stream":33,"typedarray-to-buffer":166}],164:[function(require,module,exports){
module.exports=function(){if("undefined"==typeof window)return null;var n={RTCPeerConnection:window.mozRTCPeerConnection||window.RTCPeerConnection||window.webkitRTCPeerConnection,RTCSessionDescription:window.mozRTCSessionDescription||window.RTCSessionDescription||window.webkitRTCSessionDescription,RTCIceCandidate:window.mozRTCIceCandidate||window.RTCIceCandidate||window.webkitRTCIceCandidate};return n.RTCPeerConnection?n:null};

},{}],165:[function(require,module,exports){
function isTypedArray(r){return isStrictTypedArray(r)||isLooseTypedArray(r)}function isStrictTypedArray(r){return r instanceof Int8Array||r instanceof Int16Array||r instanceof Int32Array||r instanceof Uint8Array||r instanceof Uint8ClampedArray||r instanceof Uint16Array||r instanceof Uint32Array||r instanceof Float32Array||r instanceof Float64Array}function isLooseTypedArray(r){return names[toString.call(r)]}module.exports=isTypedArray,isTypedArray.strict=isStrictTypedArray,isTypedArray.loose=isLooseTypedArray;var toString=Object.prototype.toString,names={"[object Int8Array]":!0,"[object Int16Array]":!0,"[object Int32Array]":!0,"[object Uint8Array]":!0,"[object Uint8ClampedArray]":!0,"[object Uint16Array]":!0,"[object Uint32Array]":!0,"[object Float32Array]":!0,"[object Float64Array]":!0};

},{}],166:[function(require,module,exports){
(function (Buffer){
var isTypedArray=require("is-typedarray").strict;module.exports=function(r){var e=Buffer.TYPED_ARRAY_SUPPORT?Buffer._augment:function(r){return new Buffer(r)};return r instanceof Uint8Array?e(r):r instanceof ArrayBuffer?e(new Uint8Array(r)):isTypedArray(r)?e(new Uint8Array(r.buffer,r.byteOffset,r.byteLength)):new Buffer(r)};

}).call(this,require("buffer").Buffer)

},{"buffer":4,"is-typedarray":165}],167:[function(require,module,exports){
(function (Buffer){
function Socket(e,t){var r=this;return r instanceof Socket?(t||(t={}),debug("new websocket: %s %o",e,t),t.allowHalfOpen=!1,null==t.highWaterMark&&(t.highWaterMark=1048576),stream.Duplex.call(r,t),r.url=e,r.connected=!1,r.destroyed=!1,r._maxBufferedAmount=t.highWaterMark,r._chunk=null,r._cb=null,r._interval=null,r._ws=new WebSocket(r.url),r._ws.binaryType="arraybuffer",r._ws.onopen=r._onOpen.bind(r),r._ws.onmessage=r._onMessage.bind(r),r._ws.onclose=r._onClose.bind(r),r._ws.onerror=function(){r._onError(new Error("connection error to "+r.url))},void r.on("finish",function(){r.connected?setTimeout(function(){r._destroy()},100):r.once("connect",function(){setTimeout(function(){r._destroy()},100)})})):new Socket(e,t)}module.exports=Socket;var debug=require("debug")("simple-websocket"),inherits=require("inherits"),isTypedArray=require("is-typedarray"),stream=require("stream"),toBuffer=require("typedarray-to-buffer"),ws=require("ws"),WebSocket="undefined"!=typeof window?window.WebSocket:ws;inherits(Socket,stream.Duplex),Socket.WEBSOCKET_SUPPORT=!!WebSocket,Socket.prototype.send=function(e){var t=this;isTypedArray.strict(e)||e instanceof ArrayBuffer||Buffer.isBuffer(e)||"string"==typeof e||"undefined"!=typeof Blob&&e instanceof Blob||(e=JSON.stringify(e));var r=e.length||e.byteLength||e.size;t._ws.send(e),debug("write: %d bytes",r)},Socket.prototype.destroy=function(e){var t=this;t._destroy(null,e)},Socket.prototype._destroy=function(e,t){var r=this;if(!r.destroyed){if(t&&r.once("close",t),debug("destroy (error: %s)",e&&e.message),this.readable=this.writable=!1,r._readableState.ended||r.push(null),r._writableState.finished||r.end(),r.connected=!1,r.destroyed=!0,clearInterval(r._interval),r._interval=null,r._chunk=null,r._cb=null,r._ws){var n=r._ws,o=function(){n.onclose=null,r.emit("close")};if(n.readyState===WebSocket.CLOSED)o();else try{n.onclose=o,n.close()}catch(e){o()}n.onopen=null,n.onmessage=null,n.onerror=null}r._ws=null,e&&r.emit("error",e)}},Socket.prototype._read=function(){},Socket.prototype._write=function(e,t,r){var n=this;if(n.destroyed)return r(new Error("cannot write after socket is destroyed"));if(n.connected){try{n.send(e)}catch(o){return n._onError(o)}"function"!=typeof ws&&n._ws.bufferedAmount>n._maxBufferedAmount?(debug("start backpressure: bufferedAmount %d",n._ws.bufferedAmount),n._cb=r):r(null)}else debug("write before connect"),n._chunk=e,n._cb=r},Socket.prototype._onMessage=function(e){var t=this;if(!t.destroyed){var r=e.data;if(debug("read: %d bytes",r.byteLength||r.length),r instanceof ArrayBuffer)r=toBuffer(new Uint8Array(r)),t.push(r);else if(Buffer.isBuffer(r))t.push(r);else{try{r=JSON.parse(r)}catch(n){}t.emit("data",r)}}},Socket.prototype._onOpen=function(){var e=this;if(!e.connected&&!e.destroyed){if(e.connected=!0,e._chunk){try{e.send(e._chunk)}catch(t){return e._onError(t)}e._chunk=null,debug('sent chunk from "write before connect"');var r=e._cb;e._cb=null,r(null)}"function"!=typeof ws&&(e._interval=setInterval(function(){if(e._cb&&e._ws&&!(e._ws.bufferedAmount>e._maxBufferedAmount)){debug("ending backpressure: bufferedAmount %d",e._ws.bufferedAmount);var t=e._cb;e._cb=null,t(null)}},150),e._interval.unref&&e._interval.unref()),debug("connect"),e.emit("connect")}},Socket.prototype._onClose=function(){var e=this;e.destroyed||(debug("on close"),e._destroy())},Socket.prototype._onError=function(e){var t=this;t.destroyed||(debug("error: %s",e.message||e),t._destroy(e))};

}).call(this,{"isBuffer":require("/home/amar/misc/Dropbox/projects/home/filewi.re/node_modules/watchify/node_modules/browserify/node_modules/insert-module-globals/node_modules/is-buffer/index.js")})

},{"/home/amar/misc/Dropbox/projects/home/filewi.re/node_modules/watchify/node_modules/browserify/node_modules/insert-module-globals/node_modules/is-buffer/index.js":11,"debug":114,"inherits":122,"is-typedarray":168,"stream":33,"typedarray-to-buffer":169,"ws":3}],168:[function(require,module,exports){
function isTypedArray(r){return isStrictTypedArray(r)||isLooseTypedArray(r)}function isStrictTypedArray(r){return r instanceof Int8Array||r instanceof Int16Array||r instanceof Int32Array||r instanceof Uint8Array||r instanceof Uint8ClampedArray||r instanceof Uint16Array||r instanceof Uint32Array||r instanceof Float32Array||r instanceof Float64Array}function isLooseTypedArray(r){return names[toString.call(r)]}module.exports=isTypedArray,isTypedArray.strict=isStrictTypedArray,isTypedArray.loose=isLooseTypedArray;var toString=Object.prototype.toString,names={"[object Int8Array]":!0,"[object Int16Array]":!0,"[object Int32Array]":!0,"[object Uint8Array]":!0,"[object Uint8ClampedArray]":!0,"[object Uint16Array]":!0,"[object Uint32Array]":!0,"[object Float32Array]":!0,"[object Float64Array]":!0};

},{}],169:[function(require,module,exports){
(function (Buffer){
var isTypedArray=require("is-typedarray").strict;module.exports=function(r){var e=Buffer.TYPED_ARRAY_SUPPORT?Buffer._augment:function(r){return new Buffer(r)};return r instanceof Uint8Array?e(r):r instanceof ArrayBuffer?e(new Uint8Array(r)):isTypedArray(r)?e(new Uint8Array(r.buffer,r.byteOffset,r.byteLength)):new Buffer(r)};

}).call(this,require("buffer").Buffer)

},{"buffer":4,"is-typedarray":168}],170:[function(require,module,exports){
(function (Buffer){
function Piece(t){return this instanceof Piece?(this.length=t,this.missing=t,this.sources=null,this._chunks=Math.ceil(t/BLOCK_LENGTH),this._remainder=t%BLOCK_LENGTH||BLOCK_LENGTH,this._buffered=0,this._buffer=null,this._cancellations=null,this._reservations=0,void(this._flushed=!1)):new Piece(t)}module.exports=Piece;var BLOCK_LENGTH=16384;Piece.BLOCK_LENGTH=BLOCK_LENGTH,Piece.prototype.chunkLength=function(t){return t===this._chunks-1?this._remainder:BLOCK_LENGTH},Piece.prototype.chunkOffset=function(t){return t*BLOCK_LENGTH},Piece.prototype.reserve=function(){return this.init()?this._cancellations.length?this._cancellations.pop():this._reservations<this._chunks?this._reservations++:-1:-1},Piece.prototype.cancel=function(t){this.init()&&this._cancellations.push(t)},Piece.prototype.get=function(t){return this.init()?this._buffer[t]:null},Piece.prototype.set=function(t,e,i){return this.init()?(this._buffer[t]||(this._buffered++,this._buffer[t]=e,this.missing-=e.length,-1===this.sources.indexOf(i)&&this.sources.push(i)),this._buffered===this._chunks):!1},Piece.prototype.flush=function(){if(!this._buffer||this._chunks!==this._buffered)return null;var t=Buffer.concat(this._buffer,this.length);return this._buffer=null,this._cancellations=null,this.sources=null,this._flushed=!0,t},Piece.prototype.init=function(){return this._flushed?!1:this._buffer?!0:(this._buffer=new Array(this._chunks),this._cancellations=[],this.sources=[],!0)};

}).call(this,require("buffer").Buffer)

},{"buffer":4}],171:[function(require,module,exports){
"use strict";function unique_pred(n,e){for(var u=1,t=n.length,i=n[0],r=n[0],o=1;t>o;++o)if(r=i,i=n[o],e(i,r)){if(o===u){u++;continue}n[u++]=i}return n.length=u,n}function unique_eq(n){for(var e=1,u=n.length,t=n[0],i=n[0],r=1;u>r;++r,i=t)if(i=t,t=n[r],t!==i){if(r===e){e++;continue}n[e++]=t}return n.length=e,n}function unique(n,e,u){return 0===n.length?n:e?(u||n.sort(e),unique_pred(n,e)):(u||n.sort(),unique_eq(n))}module.exports=unique;

},{}],172:[function(require,module,exports){
(function (Buffer){
var bencode=require("bencode"),BitField=require("bitfield"),EventEmitter=require("events").EventEmitter,inherits=require("inherits"),sha1=require("simple-sha1"),MAX_METADATA_SIZE=1e7,BITFIELD_GROW=1e3,PIECE_LENGTH=16384;module.exports=function(e){function t(t){EventEmitter.call(this),this._wire=t,this._metadataComplete=!1,this._metadataSize=null,this._remainingRejects=null,this._fetching=!1,this._bitfield=new BitField(0,{grow:BITFIELD_GROW}),Buffer.isBuffer(e)&&this.setMetadata(e)}return inherits(t,EventEmitter),t.prototype.name="ut_metadata",t.prototype.onHandshake=function(e,t,i){this._infoHash=e,this._infoHashHex=e.toString("hex")},t.prototype.onExtendedHandshake=function(e){return e.m&&e.m.ut_metadata?e.metadata_size?e.metadata_size>MAX_METADATA_SIZE?this.emit("warning",new Error("Peer gave maliciously large metadata size")):(this._metadataSize=e.metadata_size,this._numPieces=Math.ceil(this._metadataSize/PIECE_LENGTH),this._remainingRejects=2*this._numPieces,void(this._fetching&&this._requestPieces())):this.emit("warning",new Error("Peer does not have metadata")):this.emit("warning",new Error("Peer does not support ut_metadata"))},t.prototype.onMessage=function(e){var t,i;try{var a=e.toString(),s=a.indexOf("ee")+2;t=bencode.decode(a.substring(0,s)),i=e.slice(s)}catch(n){return}switch(t.msg_type){case 0:this._onRequest(t.piece);break;case 1:this._onData(t.piece,i,t.total_size);break;case 2:this._onReject(t.piece)}},t.prototype.fetch=function(){this._metadataComplete||(this._fetching=!0,this._metadataSize&&this._requestPieces())},t.prototype.cancel=function(){this._fetching=!1},t.prototype.setMetadata=function(e){if(this._metadataComplete)return!0;try{var t=bencode.decode(e).info;t&&(e=bencode.encode(t))}catch(i){}return this._infoHashHex&&this._infoHashHex!==sha1.sync(e)?!1:(this.cancel(),this.metadata=e,this._metadataComplete=!0,this._metadataSize=this.metadata.length,this._wire.extendedHandshake.metadata_size=this._metadataSize,this.emit("metadata",bencode.encode({info:bencode.decode(this.metadata)})),!0)},t.prototype._send=function(e,t){var i=bencode.encode(e);Buffer.isBuffer(t)&&(i=Buffer.concat([i,t])),this._wire.extended("ut_metadata",i)},t.prototype._request=function(e){this._send({msg_type:0,piece:e})},t.prototype._data=function(e,t,i){var a={msg_type:1,piece:e};"number"==typeof i&&(a.total_size=i),this._send(a,t)},t.prototype._reject=function(e){this._send({msg_type:2,piece:e})},t.prototype._onRequest=function(e){if(!this._metadataComplete)return void this._reject(e);var t=e*PIECE_LENGTH,i=t+PIECE_LENGTH;i>this._metadataSize&&(i=this._metadataSize);var a=this.metadata.slice(t,i);this._data(e,a,this._metadataSize)},t.prototype._onData=function(e,t,i){t.length>PIECE_LENGTH||(t.copy(this.metadata,e*PIECE_LENGTH),this._bitfield.set(e),this._checkDone())},t.prototype._onReject=function(e){this._remainingRejects>0&&this._fetching?(this._request(e),this._remainingRejects-=1):this.emit("warning",new Error('Peer sent "reject" too much'))},t.prototype._requestPieces=function(){this.metadata=new Buffer(this._metadataSize);for(var e=0;e<this._numPieces;e++)this._request(e)},t.prototype._checkDone=function(){for(var e=!0,t=0;t<this._numPieces;t++)if(!this._bitfield.get(t)){e=!1;break}if(e){var i=this.setMetadata(this.metadata);i||this._failedMetadata()}},t.prototype._failedMetadata=function(){this._bitfield=new BitField(0,{grow:BITFIELD_GROW}),this._remainingRejects-=this._numPieces,this._remainingRejects>0?this._requestPieces():this.emit("warning",new Error("Peer sent invalid metadata"))},t};

}).call(this,require("buffer").Buffer)

},{"bencode":173,"bitfield":55,"buffer":4,"events":8,"inherits":122,"simple-sha1":152}],173:[function(require,module,exports){
module.exports={encode:require("./lib/encode"),decode:require("./lib/decode")};

},{"./lib/decode":174,"./lib/encode":176}],174:[function(require,module,exports){
(function (Buffer){
function decode(e,d){return decode.position=0,decode.encoding=d||null,decode.data=Buffer.isBuffer(e)?e:new Buffer(e),decode.next()}var Dict=require("./dict");decode.position=0,decode.data=null,decode.encoding=null,decode.next=function(){switch(decode.data[decode.position]){case 100:return decode.dictionary();case 108:return decode.list();case 105:return decode.integer();default:return decode.bytes()}},decode.find=function(e){for(var d=decode.position,o=decode.data.length,t=decode.data;o>d;){if(t[d]===e)return d;d++}throw new Error('Invalid data: Missing delimiter "'+String.fromCharCode(e)+'" [0x'+e.toString(16)+"]")},decode.dictionary=function(){decode.position++;for(var e=new Dict;101!==decode.data[decode.position];)e.binarySet(decode.bytes(),decode.next());return decode.position++,e},decode.list=function(){decode.position++;for(var e=[];101!==decode.data[decode.position];)e.push(decode.next());return decode.position++,e},decode.integer=function(){var e=decode.find(101),d=decode.data.toString("ascii",decode.position+1,e);return decode.position+=e+1-decode.position,parseInt(d,10)},decode.bytes=function(){var e=decode.find(58),d=parseInt(decode.data.toString("ascii",decode.position,e),10),o=++e+d;return decode.position=o,decode.encoding?decode.data.toString(decode.encoding,e,o):decode.data.slice(e,o)},module.exports=decode;

}).call(this,require("buffer").Buffer)

},{"./dict":175,"buffer":4}],175:[function(require,module,exports){
var Dict=module.exports=function(){Object.defineProperty(this,"_keys",{enumerable:!1,value:[]})};Dict.prototype.binaryKeys=function(){return this._keys.slice()},Dict.prototype.binarySet=function(e,t){this._keys.push(e),this[e]=t};

},{}],176:[function(require,module,exports){
(function (Buffer){
function encode(e){var n=[];return encode._encode(n,e),Buffer.concat(n)}encode._floatConversionDetected=!1,encode._encode=function(e,n){if(Buffer.isBuffer(n))return e.push(new Buffer(n.length+":")),void e.push(n);switch(typeof n){case"string":encode.bytes(e,n);break;case"number":encode.number(e,n);break;case"object":n.constructor===Array?encode.list(e,n):encode.dict(e,n)}};var buff_e=new Buffer("e"),buff_d=new Buffer("d"),buff_l=new Buffer("l");encode.bytes=function(e,n){e.push(new Buffer(Buffer.byteLength(n)+":"+n))},encode.number=function(e,n){var o=2147483648,c=n/o<<0,f=n%o<<0,t=c*o+f;e.push(new Buffer("i"+t+"e")),t===n||encode._floatConversionDetected||(encode._floatConversionDetected=!0,console.warn('WARNING: Possible data corruption detected with value "'+n+'":','Bencoding only defines support for integers, value was converted to "'+t+'"'),console.trace())},encode.dict=function(e,n){e.push(buff_d);for(var o,c=0,f=Object.keys(n).sort(),t=f.length;t>c;c++)o=f[c],encode.bytes(e,o),encode._encode(e,n[o]);e.push(buff_e)},encode.list=function(e,n){var o=0,c=n.length;for(e.push(buff_l);c>o;o++)encode._encode(e,n[o]);e.push(buff_e)},module.exports=encode;

}).call(this,require("buffer").Buffer)

},{"buffer":4}],177:[function(require,module,exports){
var DataStream=function(t,e,i){this._byteOffset=e||0,t instanceof ArrayBuffer?this.buffer=t:"object"==typeof t?(this.dataView=t,e&&(this._byteOffset+=e)):this.buffer=new ArrayBuffer(t||0),this.position=0,this.endianness=null==i?DataStream.LITTLE_ENDIAN:i};module.exports=DataStream,DataStream.prototype={},DataStream.prototype.save=function(t){var e=new Blob([this.buffer]),i=window.webkitURL||window.URL;if(!i||!i.createObjectURL)throw"DataStream.save: Can't create object URL.";var a=i.createObjectURL(e),r=document.createElement("a");r.setAttribute("href",a),r.setAttribute("download",t),r.click(),i.revokeObjectURL(a)},DataStream.BIG_ENDIAN=!1,DataStream.LITTLE_ENDIAN=!0,DataStream.prototype._dynamicSize=!0,Object.defineProperty(DataStream.prototype,"dynamicSize",{get:function(){return this._dynamicSize},set:function(t){t||this._trimAlloc(),this._dynamicSize=t}}),DataStream.prototype._byteLength=0,Object.defineProperty(DataStream.prototype,"byteLength",{get:function(){return this._byteLength-this._byteOffset}}),Object.defineProperty(DataStream.prototype,"buffer",{get:function(){return this._trimAlloc(),this._buffer},set:function(t){this._buffer=t,this._dataView=new DataView(this._buffer,this._byteOffset),this._byteLength=this._buffer.byteLength}}),Object.defineProperty(DataStream.prototype,"byteOffset",{get:function(){return this._byteOffset},set:function(t){this._byteOffset=t,this._dataView=new DataView(this._buffer,this._byteOffset),this._byteLength=this._buffer.byteLength}}),Object.defineProperty(DataStream.prototype,"dataView",{get:function(){return this._dataView},set:function(t){this._byteOffset=t.byteOffset,this._buffer=t.buffer,this._dataView=new DataView(this._buffer,this._byteOffset),this._byteLength=this._byteOffset+t.byteLength}}),DataStream.prototype._realloc=function(t){if(this._dynamicSize){var e=this._byteOffset+this.position+t,i=this._buffer.byteLength;if(i>=e)return void(e>this._byteLength&&(this._byteLength=e));for(1>i&&(i=1);e>i;)i*=2;var a=new ArrayBuffer(i),r=new Uint8Array(this._buffer),n=new Uint8Array(a,0,r.length);n.set(r),this.buffer=a,this._byteLength=e}},DataStream.prototype._trimAlloc=function(){if(this._byteLength!=this._buffer.byteLength){var t=new ArrayBuffer(this._byteLength),e=new Uint8Array(t),i=new Uint8Array(this._buffer,0,e.length);e.set(i),this.buffer=t}},DataStream.prototype.shift=function(t){var e=new ArrayBuffer(this._byteLength-t),i=new Uint8Array(e),a=new Uint8Array(this._buffer,t,i.length);i.set(a),this.buffer=e,this.position-=t},DataStream.prototype.seek=function(t){var e=Math.max(0,Math.min(this.byteLength,t));this.position=isNaN(e)||!isFinite(e)?0:e},DataStream.prototype.isEof=function(){return this.position>=this._byteLength},DataStream.prototype.mapInt32Array=function(t,e){this._realloc(4*t);var i=new Int32Array(this._buffer,this.byteOffset+this.position,t);return DataStream.arrayToNative(i,null==e?this.endianness:e),this.position+=4*t,i},DataStream.prototype.mapInt16Array=function(t,e){this._realloc(2*t);var i=new Int16Array(this._buffer,this.byteOffset+this.position,t);return DataStream.arrayToNative(i,null==e?this.endianness:e),this.position+=2*t,i},DataStream.prototype.mapInt8Array=function(t){this._realloc(1*t);var e=new Int8Array(this._buffer,this.byteOffset+this.position,t);return this.position+=1*t,e},DataStream.prototype.mapUint32Array=function(t,e){this._realloc(4*t);var i=new Uint32Array(this._buffer,this.byteOffset+this.position,t);return DataStream.arrayToNative(i,null==e?this.endianness:e),this.position+=4*t,i},DataStream.prototype.mapUint16Array=function(t,e){this._realloc(2*t);var i=new Uint16Array(this._buffer,this.byteOffset+this.position,t);return DataStream.arrayToNative(i,null==e?this.endianness:e),this.position+=2*t,i},DataStream.prototype.mapUint8Array=function(t){this._realloc(1*t);var e=new Uint8Array(this._buffer,this.byteOffset+this.position,t);return this.position+=1*t,e},DataStream.prototype.mapFloat64Array=function(t,e){this._realloc(8*t);var i=new Float64Array(this._buffer,this.byteOffset+this.position,t);return DataStream.arrayToNative(i,null==e?this.endianness:e),this.position+=8*t,i},DataStream.prototype.mapFloat32Array=function(t,e){this._realloc(4*t);var i=new Float32Array(this._buffer,this.byteOffset+this.position,t);return DataStream.arrayToNative(i,null==e?this.endianness:e),this.position+=4*t,i},DataStream.prototype.readInt32Array=function(t,e){t=null==t?this.byteLength-this.position/4:t;var i=new Int32Array(t);return DataStream.memcpy(i.buffer,0,this.buffer,this.byteOffset+this.position,t*i.BYTES_PER_ELEMENT),DataStream.arrayToNative(i,null==e?this.endianness:e),this.position+=i.byteLength,i},DataStream.prototype.readInt16Array=function(t,e){t=null==t?this.byteLength-this.position/2:t;var i=new Int16Array(t);return DataStream.memcpy(i.buffer,0,this.buffer,this.byteOffset+this.position,t*i.BYTES_PER_ELEMENT),DataStream.arrayToNative(i,null==e?this.endianness:e),this.position+=i.byteLength,i},DataStream.prototype.readInt8Array=function(t){t=null==t?this.byteLength-this.position:t;var e=new Int8Array(t);return DataStream.memcpy(e.buffer,0,this.buffer,this.byteOffset+this.position,t*e.BYTES_PER_ELEMENT),this.position+=e.byteLength,e},DataStream.prototype.readUint32Array=function(t,e){t=null==t?this.byteLength-this.position/4:t;var i=new Uint32Array(t);return DataStream.memcpy(i.buffer,0,this.buffer,this.byteOffset+this.position,t*i.BYTES_PER_ELEMENT),DataStream.arrayToNative(i,null==e?this.endianness:e),this.position+=i.byteLength,i},DataStream.prototype.readUint16Array=function(t,e){t=null==t?this.byteLength-this.position/2:t;var i=new Uint16Array(t);return DataStream.memcpy(i.buffer,0,this.buffer,this.byteOffset+this.position,t*i.BYTES_PER_ELEMENT),DataStream.arrayToNative(i,null==e?this.endianness:e),this.position+=i.byteLength,i},DataStream.prototype.readUint8Array=function(t){t=null==t?this.byteLength-this.position:t;var e=new Uint8Array(t);return DataStream.memcpy(e.buffer,0,this.buffer,this.byteOffset+this.position,t*e.BYTES_PER_ELEMENT),this.position+=e.byteLength,e},DataStream.prototype.readFloat64Array=function(t,e){t=null==t?this.byteLength-this.position/8:t;var i=new Float64Array(t);return DataStream.memcpy(i.buffer,0,this.buffer,this.byteOffset+this.position,t*i.BYTES_PER_ELEMENT),DataStream.arrayToNative(i,null==e?this.endianness:e),this.position+=i.byteLength,i},DataStream.prototype.readFloat32Array=function(t,e){t=null==t?this.byteLength-this.position/4:t;var i=new Float32Array(t);return DataStream.memcpy(i.buffer,0,this.buffer,this.byteOffset+this.position,t*i.BYTES_PER_ELEMENT),DataStream.arrayToNative(i,null==e?this.endianness:e),this.position+=i.byteLength,i},DataStream.prototype.writeInt32Array=function(t,e){if(this._realloc(4*t.length),t instanceof Int32Array&&this.byteOffset+this.position%t.BYTES_PER_ELEMENT===0)DataStream.memcpy(this._buffer,this.byteOffset+this.position,t.buffer,0,t.byteLength),this.mapInt32Array(t.length,e);else for(var i=0;i<t.length;i++)this.writeInt32(t[i],e)},DataStream.prototype.writeInt16Array=function(t,e){if(this._realloc(2*t.length),t instanceof Int16Array&&this.byteOffset+this.position%t.BYTES_PER_ELEMENT===0)DataStream.memcpy(this._buffer,this.byteOffset+this.position,t.buffer,0,t.byteLength),this.mapInt16Array(t.length,e);else for(var i=0;i<t.length;i++)this.writeInt16(t[i],e)},DataStream.prototype.writeInt8Array=function(t){if(this._realloc(1*t.length),t instanceof Int8Array&&this.byteOffset+this.position%t.BYTES_PER_ELEMENT===0)DataStream.memcpy(this._buffer,this.byteOffset+this.position,t.buffer,0,t.byteLength),this.mapInt8Array(t.length);else for(var e=0;e<t.length;e++)this.writeInt8(t[e])},DataStream.prototype.writeUint32Array=function(t,e){if(this._realloc(4*t.length),t instanceof Uint32Array&&this.byteOffset+this.position%t.BYTES_PER_ELEMENT===0)DataStream.memcpy(this._buffer,this.byteOffset+this.position,t.buffer,0,t.byteLength),this.mapUint32Array(t.length,e);else for(var i=0;i<t.length;i++)this.writeUint32(t[i],e)},DataStream.prototype.writeUint16Array=function(t,e){if(this._realloc(2*t.length),t instanceof Uint16Array&&this.byteOffset+this.position%t.BYTES_PER_ELEMENT===0)DataStream.memcpy(this._buffer,this.byteOffset+this.position,t.buffer,0,t.byteLength),this.mapUint16Array(t.length,e);else for(var i=0;i<t.length;i++)this.writeUint16(t[i],e)},DataStream.prototype.writeUint8Array=function(t){if(this._realloc(1*t.length),t instanceof Uint8Array&&this.byteOffset+this.position%t.BYTES_PER_ELEMENT===0)DataStream.memcpy(this._buffer,this.byteOffset+this.position,t.buffer,0,t.byteLength),this.mapUint8Array(t.length);else for(var e=0;e<t.length;e++)this.writeUint8(t[e])},DataStream.prototype.writeFloat64Array=function(t,e){if(this._realloc(8*t.length),t instanceof Float64Array&&this.byteOffset+this.position%t.BYTES_PER_ELEMENT===0)DataStream.memcpy(this._buffer,this.byteOffset+this.position,t.buffer,0,t.byteLength),this.mapFloat64Array(t.length,e);else for(var i=0;i<t.length;i++)this.writeFloat64(t[i],e)},DataStream.prototype.writeFloat32Array=function(t,e){if(this._realloc(4*t.length),t instanceof Float32Array&&this.byteOffset+this.position%t.BYTES_PER_ELEMENT===0)DataStream.memcpy(this._buffer,this.byteOffset+this.position,t.buffer,0,t.byteLength),this.mapFloat32Array(t.length,e);else for(var i=0;i<t.length;i++)this.writeFloat32(t[i],e)},DataStream.prototype.readInt32=function(t){var e=this._dataView.getInt32(this.position,null==t?this.endianness:t);return this.position+=4,e},DataStream.prototype.readInt16=function(t){var e=this._dataView.getInt16(this.position,null==t?this.endianness:t);return this.position+=2,e},DataStream.prototype.readInt8=function(){var t=this._dataView.getInt8(this.position);return this.position+=1,t},DataStream.prototype.readUint32=function(t){var e=this._dataView.getUint32(this.position,null==t?this.endianness:t);return this.position+=4,e},DataStream.prototype.readUint16=function(t){var e=this._dataView.getUint16(this.position,null==t?this.endianness:t);return this.position+=2,e},DataStream.prototype.readUint8=function(){var t=this._dataView.getUint8(this.position);return this.position+=1,t},DataStream.prototype.readFloat32=function(t){var e=this._dataView.getFloat32(this.position,null==t?this.endianness:t);return this.position+=4,e},DataStream.prototype.readFloat64=function(t){var e=this._dataView.getFloat64(this.position,null==t?this.endianness:t);return this.position+=8,e},DataStream.prototype.writeInt32=function(t,e){this._realloc(4),this._dataView.setInt32(this.position,t,null==e?this.endianness:e),this.position+=4},DataStream.prototype.writeInt16=function(t,e){this._realloc(2),this._dataView.setInt16(this.position,t,null==e?this.endianness:e),this.position+=2},DataStream.prototype.writeInt8=function(t){this._realloc(1),this._dataView.setInt8(this.position,t),this.position+=1},DataStream.prototype.writeUint32=function(t,e){this._realloc(4),this._dataView.setUint32(this.position,t,null==e?this.endianness:e),this.position+=4},DataStream.prototype.writeUint16=function(t,e){this._realloc(2),this._dataView.setUint16(this.position,t,null==e?this.endianness:e),this.position+=2},DataStream.prototype.writeUint8=function(t){this._realloc(1),this._dataView.setUint8(this.position,t),this.position+=1},DataStream.prototype.writeFloat32=function(t,e){this._realloc(4),this._dataView.setFloat32(this.position,t,null==e?this.endianness:e),this.position+=4},DataStream.prototype.writeFloat64=function(t,e){this._realloc(8),this._dataView.setFloat64(this.position,t,null==e?this.endianness:e),this.position+=8},DataStream.endianness=new Int8Array(new Int16Array([1]).buffer)[0]>0,DataStream.memcpy=function(t,e,i,a,r){var n=new Uint8Array(t,e,r),s=new Uint8Array(i,a,r);n.set(s)},DataStream.arrayToNative=function(t,e){return e==this.endianness?t:this.flipArrayEndianness(t)},DataStream.nativeToEndian=function(t,e){return this.endianness==e?t:this.flipArrayEndianness(t)},DataStream.flipArrayEndianness=function(t){for(var e=new Uint8Array(t.buffer,t.byteOffset,t.byteLength),i=0;i<t.byteLength;i+=t.BYTES_PER_ELEMENT)for(var a=i+t.BYTES_PER_ELEMENT-1,r=i;a>r;a--,r++){var n=e[r];e[r]=e[a],e[a]=n}return t},DataStream.prototype.failurePosition=0,DataStream.prototype.readStruct=function(t){for(var e,i,a={},r=this.position,n=0;n<t.length;n+=2){if(e=t[n+1],i=this.readType(e,a),null==i)return 0===this.failurePosition&&(this.failurePosition=this.position),this.position=r,null;a[t[n]]=i}return a},DataStream.prototype.readUCS2String=function(t,e){return String.fromCharCode.apply(null,this.readUint16Array(t,e))},DataStream.prototype.writeUCS2String=function(t,e,i){null==i&&(i=t.length);for(var a=0;a<t.length&&i>a;a++)this.writeUint16(t.charCodeAt(a),e);for(;i>a;a++)this.writeUint16(0)},DataStream.prototype.readString=function(t,e){return null==e||"ASCII"==e?String.fromCharCode.apply(null,this.mapUint8Array(null==t?this.byteLength-this.position:t)):new TextDecoder(e).decode(this.mapUint8Array(t))},DataStream.prototype.writeString=function(t,e,i){var a=0;if(null==e||"ASCII"==e)if(null!=i){var r=Math.min(t.length,i);for(a=0;r>a;a++)this.writeUint8(t.charCodeAt(a));for(;i>a;a++)this.writeUint8(0)}else for(a=0;a<t.length;a++)this.writeUint8(t.charCodeAt(a));else this.writeUint8Array(new TextEncoder(e).encode(t.substring(0,i)))},DataStream.prototype.readCString=function(t){var e=this.byteLength-this.position,i=new Uint8Array(this._buffer,this._byteOffset+this.position),a=e;null!=t&&(a=Math.min(t,e));for(var r=0;a>r&&0!==i[r];r++);var n=String.fromCharCode.apply(null,this.mapUint8Array(r));return null!=t?this.position+=a-r:r!=e&&(this.position+=1),n},DataStream.prototype.writeCString=function(t,e){var i=0;if(null!=e){var a=Math.min(t.length,e);for(i=0;a>i;i++)this.writeUint8(t.charCodeAt(i));for(;e>i;i++)this.writeUint8(0)}else{for(i=0;i<t.length;i++)this.writeUint8(t.charCodeAt(i));this.writeUint8(0)}},DataStream.prototype.readType=function(t,e){if("function"==typeof t)return t(this,e);if(!("object"!=typeof t||t instanceof Array))return t.get(this,e);if(t instanceof Array&&3!=t.length)return this.readStruct(t,e);var i,a,r,n=null,s=null,o="ASCII",h=this.position;switch("string"==typeof t&&/:/.test(t)&&(i=t.split(":"),t=i[0],s=parseInt(i[1])),"string"==typeof t&&/,/.test(t)&&(i=t.split(","),t=i[0],o=parseInt(i[1])),t){case"uint8":n=this.readUint8();break;case"int8":n=this.readInt8();break;case"uint16":n=this.readUint16(this.endianness);break;case"int16":n=this.readInt16(this.endianness);break;case"uint32":n=this.readUint32(this.endianness);break;case"int32":n=this.readInt32(this.endianness);break;case"float32":n=this.readFloat32(this.endianness);break;case"float64":n=this.readFloat64(this.endianness);break;case"uint16be":n=this.readUint16(DataStream.BIG_ENDIAN);break;case"int16be":n=this.readInt16(DataStream.BIG_ENDIAN);break;case"uint32be":n=this.readUint32(DataStream.BIG_ENDIAN);break;case"int32be":n=this.readInt32(DataStream.BIG_ENDIAN);break;case"float32be":n=this.readFloat32(DataStream.BIG_ENDIAN);break;case"float64be":n=this.readFloat64(DataStream.BIG_ENDIAN);break;case"uint16le":n=this.readUint16(DataStream.LITTLE_ENDIAN);break;case"int16le":n=this.readInt16(DataStream.LITTLE_ENDIAN);break;case"uint32le":n=this.readUint32(DataStream.LITTLE_ENDIAN);break;case"int32le":n=this.readInt32(DataStream.LITTLE_ENDIAN);break;case"float32le":n=this.readFloat32(DataStream.LITTLE_ENDIAN);break;case"float64le":n=this.readFloat64(DataStream.LITTLE_ENDIAN);break;case"cstring":n=this.readCString(s);break;case"string":n=this.readString(s,o);break;case"u16string":n=this.readUCS2String(s,this.endianness);break;case"u16stringle":n=this.readUCS2String(s,DataStream.LITTLE_ENDIAN);break;case"u16stringbe":n=this.readUCS2String(s,DataStream.BIG_ENDIAN);break;default:if(3==t.length){var f=t[1],p=t[2],y=0;if(y="function"==typeof p?p(e,this,t):"string"==typeof p&&null!=e[p]?parseInt(e[p]):parseInt(p),"string"==typeof f){var l=f.replace(/(le|be)$/,""),u=null;switch(/le$/.test(f)?u=DataStream.LITTLE_ENDIAN:/be$/.test(f)&&(u=DataStream.BIG_ENDIAN),"*"==p&&(y=null),l){case"uint8":n=this.readUint8Array(y);break;case"uint16":n=this.readUint16Array(y,u);break;case"uint32":n=this.readUint32Array(y,u);break;case"int8":n=this.readInt8Array(y);break;case"int16":n=this.readInt16Array(y,u);break;case"int32":n=this.readInt32Array(y,u);break;case"float32":n=this.readFloat32Array(y,u);break;case"float64":n=this.readFloat64Array(y,u);break;case"cstring":case"utf16string":case"string":if(null==y)for(n=[];!this.isEof()&&(r=this.readType(f,e),null!=r);)n.push(r);else for(n=new Array(y),a=0;y>a;a++)n[a]=this.readType(f,e)}}else if("*"==p){n=[];for(this.buffer;;){var b=this.position;try{var c=this.readType(f,e);if(null==c){this.position=b;break}n.push(c)}catch(m){this.position=b;break}}}else for(n=new Array(y),a=0;y>a;a++){if(r=this.readType(f,e),null==r)return null;n[a]=r}break}}return null!=s&&(this.position=h+s),n},DataStream.prototype.writeStruct=function(t,e){for(var i=0;i<t.length;i+=2){var a=t[i+1];this.writeType(a,e[t[i]],e)}},DataStream.prototype.writeType=function(t,e,i){var a;if("function"==typeof t)return t(this,e);if("object"==typeof t&&!(t instanceof Array))return t.set(this,e,i);var r=null,n="ASCII",s=this.position;switch("string"==typeof t&&/:/.test(t)&&(a=t.split(":"),t=a[0],r=parseInt(a[1])),"string"==typeof t&&/,/.test(t)&&(a=t.split(","),t=a[0],n=parseInt(a[1])),t){case"uint8":this.writeUint8(e);break;case"int8":this.writeInt8(e);break;case"uint16":this.writeUint16(e,this.endianness);break;case"int16":this.writeInt16(e,this.endianness);break;case"uint32":this.writeUint32(e,this.endianness);break;case"int32":this.writeInt32(e,this.endianness);break;case"float32":this.writeFloat32(e,this.endianness);break;case"float64":this.writeFloat64(e,this.endianness);break;case"uint16be":this.writeUint16(e,DataStream.BIG_ENDIAN);break;case"int16be":this.writeInt16(e,DataStream.BIG_ENDIAN);break;case"uint32be":this.writeUint32(e,DataStream.BIG_ENDIAN);break;case"int32be":this.writeInt32(e,DataStream.BIG_ENDIAN);break;case"float32be":this.writeFloat32(e,DataStream.BIG_ENDIAN);break;case"float64be":this.writeFloat64(e,DataStream.BIG_ENDIAN);break;case"uint16le":this.writeUint16(e,DataStream.LITTLE_ENDIAN);break;case"int16le":this.writeInt16(e,DataStream.LITTLE_ENDIAN);break;case"uint32le":this.writeUint32(e,DataStream.LITTLE_ENDIAN);break;case"int32le":this.writeInt32(e,DataStream.LITTLE_ENDIAN);break;case"float32le":this.writeFloat32(e,DataStream.LITTLE_ENDIAN);break;case"float64le":this.writeFloat64(e,DataStream.LITTLE_ENDIAN);break;case"cstring":this.writeCString(e,r);break;case"string":this.writeString(e,n,r);break;case"u16string":this.writeUCS2String(e,this.endianness,r);break;case"u16stringle":this.writeUCS2String(e,DataStream.LITTLE_ENDIAN,r);break;case"u16stringbe":this.writeUCS2String(e,DataStream.BIG_ENDIAN,r);break;default:if(3==t.length){for(var o=t[1],h=0;h<e.length;h++)this.writeType(o,e[h]);break}this.writeStruct(t,e)}null!=r&&(this.position=s,this._realloc(r),this.position=s+r)};var MAX_SIZE=Math.pow(2,32);exports.MAX_SIZE=MAX_SIZE,DataStream.prototype.readUint64=function(){return this.readUint32()*MAX_SIZE+this.readUint32()},DataStream.prototype.writeUint64=function(t){var e=Math.floor(t/MAX_SIZE);this.writeUint32(e),this.writeUint32(4294967295&t)},DataStream.prototype.readUint24=function(){return(this.readUint8()<<16)+(this.readUint8()<<8)+this.readUint8()},DataStream.prototype.writeUint24=function(t){this.writeUint8((16711680&t)>>16),this.writeUint8((65280&t)>>8),this.writeUint8(255&t)},DataStream.prototype.adjustUint32=function(t,e){var i=this.position;this.seek(t),this.writeUint32(e),this.seek(i)};

},{}],178:[function(require,module,exports){
function decimalToHex(t,e){var i=Number(t).toString(16);for(e="undefined"==typeof e||null===e?e=2:e;i.length<e;)i="0"+i;return i}var DataStream=require("./DataStream"),MPEG4DescriptorParser=require("./descriptor"),Log=require("./log"),BoxParser={ERR_NOT_ENOUGH_DATA:0,OK:1,boxCodes:["mdat","avcC","hvcC","ftyp","payl","vmhd","smhd","hmhd","dref","elst"],fullBoxCodes:["mvhd","tkhd","mdhd","hdlr","smhd","hmhd","nhmd","url ","urn ","ctts","cslg","stco","co64","stsc","stss","stsz","stz2","stts","stsh","mehd","trex","mfhd","tfhd","trun","tfdt","esds","subs","txtC"],containerBoxCodes:[["moov",["trak"]],["trak"],["edts"],["mdia"],["minf"],["dinf"],["stbl"],["mvex",["trex"]],["moof",["traf"]],["traf",["trun"]],["vttc"],["tref"]],sampleEntryCodes:[{prefix:"Visual",types:["mp4v","avc1","avc2","avc3","avc4","avcp","drac","encv","mjp2","mvc1","mvc2","resv","s263","svc1","vc-1","hvc1","hev1"]},{prefix:"Audio",types:["mp4a","ac-3","alac","dra1","dtsc","dtse",,"dtsh","dtsl","ec-3","enca","g719","g726","m4ae","mlpa","raw ","samr","sawb","sawp","sevc","sqcp","ssmv","twos"]},{prefix:"Hint",types:["fdp ","m2ts","pm2t","prtp","rm2t","rrtp","rsrp","rtp ","sm2t","srtp"]},{prefix:"Metadata",types:["metx","mett","urim"]},{prefix:"Subtitle",types:["stpp","wvtt","sbtt","tx3g","stxt"]}],trackReferenceTypes:["scal"],initialize:function(){var t,e,i;for(BoxParser.FullBox.prototype=new BoxParser.Box,BoxParser.ContainerBox.prototype=new BoxParser.Box,BoxParser.stsdBox.prototype=new BoxParser.FullBox,BoxParser.SampleEntry.prototype=new BoxParser.FullBox,BoxParser.TrackReferenceTypeBox.prototype=new BoxParser.Box,i=BoxParser.boxCodes.length,t=0;i>t;t++)BoxParser[BoxParser.boxCodes[t]+"Box"]=function(t){return function(e){BoxParser.Box.call(this,BoxParser.boxCodes[t],e)}}(t),BoxParser[BoxParser.boxCodes[t]+"Box"].prototype=new BoxParser.Box;for(i=BoxParser.fullBoxCodes.length,t=0;i>t;t++)BoxParser[BoxParser.fullBoxCodes[t]+"Box"]=function(t){return function(e){BoxParser.FullBox.call(this,BoxParser.fullBoxCodes[t],e)}}(t),BoxParser[BoxParser.fullBoxCodes[t]+"Box"].prototype=new BoxParser.FullBox;for(i=BoxParser.containerBoxCodes.length,t=0;i>t;t++)BoxParser[BoxParser.containerBoxCodes[t][0]+"Box"]=function(t,e){return function(i){if(BoxParser.ContainerBox.call(this,BoxParser.containerBoxCodes[t][0],i),e){this.subBoxNames=e;for(var r=e.length,s=0;r>s;s++)this[e[s]+"s"]=[]}}}(t,BoxParser.containerBoxCodes[t][1]),BoxParser[BoxParser.containerBoxCodes[t][0]+"Box"].prototype=new BoxParser.ContainerBox;for(i=BoxParser.sampleEntryCodes.length,e=0;i>e;e++){var r=BoxParser.sampleEntryCodes[e].prefix,s=BoxParser.sampleEntryCodes[e].types,a=s.length;for(BoxParser[r+"SampleEntry"]=function(t,e){BoxParser.SampleEntry.call(this,t,e)},BoxParser[r+"SampleEntry"].prototype=new BoxParser.SampleEntry,t=0;a>t;t++)BoxParser[s[t]+"Box"]=function(t,e){return function(i){BoxParser[BoxParser.sampleEntryCodes[t].prefix+"SampleEntry"].call(this,BoxParser.sampleEntryCodes[t].types[e],i)}}(e,t),BoxParser[s[t]+"Box"].prototype=new BoxParser[r+"SampleEntry"]}for(i=BoxParser.trackReferenceTypes.length,t=0;i>t;t++)BoxParser[BoxParser.trackReferenceTypes[t]+"Box"]=function(t){return function(e){BoxParser.TrackReferenceTypeBox.call(this,BoxParser.trackReferenceTypes[t],e)}}(t),BoxParser[BoxParser.trackReferenceTypes[t]+"Box"].prototype=new BoxParser.Box},Box:function(t,e){this.type=t,this.size=e},FullBox:function(t,e){BoxParser.Box.call(this,t,e),this.flags=0,this.version=0},ContainerBox:function(t,e){BoxParser.Box.call(this,t,e),this.boxes=[]},SampleEntry:function(t,e){BoxParser.Box.call(this,t,e),this.boxes=[]},TrackReferenceTypeBox:function(t,e){BoxParser.Box.call(this,t,e),this.track_ids=[]},stsdBox:function(t){BoxParser.FullBox.call(this,"stsd",t),this.entries=[]},parseOneBox:function(t,e){var i,r=t.position,s=0;if(t.byteLength-t.position<8)return Log.d("BoxParser","Not enough data in stream to parse the type and size of the box"),{code:BoxParser.ERR_NOT_ENOUGH_DATA};var a=t.readUint32(),o=t.readString(4);if(Log.d("BoxParser","Found box of type "+o+" and size "+a+" at position "+r+" in the current buffer ("+(t.buffer.fileStart+r)+" in the file)"),s=8,1==a){if(t.byteLength-t.position<8)return t.seek(r),Log.w("BoxParser",'Not enough data in stream to parse the extended size of the "'+o+'" box'),{code:BoxParser.ERR_NOT_ENOUGH_DATA};a=t.readUint64(),s+=8}else if(0===a)throw"Unlimited box size not supported";return r+a>t.byteLength?(t.seek(r),Log.w("BoxParser",'Not enough data in stream to parse the entire "'+o+'" box'),{code:BoxParser.ERR_NOT_ENOUGH_DATA,type:o,size:a,hdr_size:s}):(i=BoxParser[o+"Box"]?new BoxParser[o+"Box"](a-s):e?new BoxParser.SampleEntry(o,a-s):new BoxParser.Box(o,a-s),i.hdr_size=s,i.start=r,i.fileStart=r+t.buffer.fileStart,i.parse(t),t.seek(r+a),{code:BoxParser.OK,box:i,size:a})}};module.exports=BoxParser,BoxParser.initialize(),BoxParser.Box.prototype.parse=function(t){"mdat"!=this.type?this.data=t.readUint8Array(this.size):t.seek(this.start+this.size+this.hdr_size)},BoxParser.FullBox.prototype.parseFullHeader=function(t){this.version=t.readUint8(),this.flags=t.readUint24(),this.size-=4},BoxParser.ContainerBox.prototype.parse=function(t){var e,i,r;for(r=t.position;t.position<r+this.size;)e=BoxParser.parseOneBox(t),i=e.box,this.boxes.push(i),this.subBoxNames&&-1!=this.subBoxNames.indexOf(i.type)?this[this.subBoxNames+"s"].push(i):this[i.type]=i},BoxParser.SampleEntry.prototype.isVideo=function(){return!1},BoxParser.SampleEntry.prototype.isAudio=function(){return!1},BoxParser.SampleEntry.prototype.isSubtitle=function(){return!1},BoxParser.SampleEntry.prototype.isMetadata=function(){return!1},BoxParser.SampleEntry.prototype.isHint=function(){return!1},BoxParser.SampleEntry.prototype.getCodec=function(){return this.type},BoxParser.SampleEntry.prototype.getWidth=function(){return""},BoxParser.SampleEntry.prototype.getHeight=function(){return""},BoxParser.SampleEntry.prototype.getChannelCount=function(){return""},BoxParser.SampleEntry.prototype.getSampleRate=function(){return""},BoxParser.SampleEntry.prototype.getSampleSize=function(){return""},BoxParser.SampleEntry.prototype.parseHeader=function(t){this.start=t.position,t.readUint8Array(6),this.data_reference_index=t.readUint16()},BoxParser.SampleEntry.prototype.parse=function(t){this.parseHeader(t),t.seek(this.start+this.size)},BoxParser.SampleEntry.prototype.parseFooter=function(t){for(var e,i;t.position<this.start+this.size;)e=BoxParser.parseOneBox(t,!1),i=e.box,this.boxes.push(i),this[i.type]=i},BoxParser.VisualSampleEntry.prototype.parse=function(t){this.parseHeader(t),t.readUint16(),t.readUint16(),t.readUint32Array(3),this.width=t.readUint16(),this.height=t.readUint16(),this.horizresolution=t.readUint32(),this.vertresolution=t.readUint32(),t.readUint32(),this.frame_count=t.readUint16(),this.compressorname=t.readString(32),this.depth=t.readUint16(),t.readUint16(),this.parseFooter(t)},BoxParser.VisualSampleEntry.prototype.isVideo=function(){return!0},BoxParser.VisualSampleEntry.prototype.getWidth=function(){return this.width},BoxParser.VisualSampleEntry.prototype.getHeight=function(){return this.height},BoxParser.AudioSampleEntry.prototype.parse=function(t){this.parseHeader(t),t.readUint32Array(2),this.channel_count=t.readUint16(),this.samplesize=t.readUint16(),t.readUint16(),t.readUint16(),this.samplerate=t.readUint32()/65536,this.parseFooter(t)},BoxParser.AudioSampleEntry.prototype.isAudio=function(){return!0},BoxParser.AudioSampleEntry.prototype.getChannelCount=function(){return this.channel_count},BoxParser.AudioSampleEntry.prototype.getSampleRate=function(){return this.samplerate},BoxParser.AudioSampleEntry.prototype.getSampleSize=function(){return this.samplesize},BoxParser.SubtitleSampleEntry.prototype.parse=function(t){this.parseHeader(t),this.parseFooter(t)},BoxParser.SubtitleSampleEntry.prototype.isSubtitle=function(){return!0},BoxParser.MetadataSampleEntry.prototype.parse=function(t){this.parseHeader(t),this.parseFooter(t)},BoxParser.MetadataSampleEntry.prototype.isMetadata=function(){return!0},BoxParser.TrackReferenceTypeBox.prototype.parse=function(t){this.track_ids=t.readUint8Array(this.size)},BoxParser.metxBox.prototype.parse=function(t){this.parseHeader(t),this.content_encoding=t.readCString(),this.namespace=t.readCString(),this.schema_location=t.readCString(),this.parseFooter(t)},BoxParser.mettBox.prototype.parse=function(t){this.parseHeader(t),this.content_encoding=t.readCString(),this.mime_format=t.readCString(),this.parseFooter(t)},BoxParser.sbttBox.prototype.parse=function(t){this.parseHeader(t),this.content_encoding=t.readCString(),this.mime_format=t.readCString(),this.parseFooter(t)},BoxParser.stxtBox.prototype.parse=function(t){this.parseHeader(t),this.content_encoding=t.readCString(),this.mime_format=t.readCString(),this.parseFooter(t)},BoxParser.stppBox.prototype.parse=function(t){this.parseHeader(t),this.namespace=t.readCString(),this.schema_location=t.readCString(),this.auxiliary_mime_types=t.readCString(),this.parseFooter(t)},BoxParser.tx3gBox.prototype.parse=function(t){this.parseHeader(t),this.displayFlags=t.readUint32(),this.horizontal_justification=t.readInt8(),this.vertical_justification=t.readInt8(),this.bg_color_rgba=t.readUint8Array(4),this.box_record=t.readInt16Array(4),this.style_record=t.readUint8Array(12),this.parseFooter(t)},BoxParser.ftypBox.prototype.parse=function(t){this.major_brand=t.readString(4),this.minor_version=t.readUint32(),this.size-=8,this.compatible_brands=[];for(var e=0;this.size>=4;)this.compatible_brands[e]=t.readString(4),this.size-=4,e++},BoxParser.mvhdBox.prototype.parse=function(t){this.flags=0,this.parseFullHeader(t),1==this.version?(this.creation_time=t.readUint64(),this.modification_time=t.readUint64(),this.timescale=t.readUint32(),this.duration=t.readUint64()):(this.creation_time=t.readUint32(),this.modification_time=t.readUint32(),this.timescale=t.readUint32(),this.duration=t.readUint32()),this.rate=t.readUint32(),this.volume=t.readUint16()>>8,t.readUint16(),t.readUint32Array(2),this.matrix=t.readUint32Array(9),t.readUint32Array(6),this.next_track_id=t.readUint32()},BoxParser.TKHD_FLAG_ENABLED=1,BoxParser.TKHD_FLAG_IN_MOVIE=2,BoxParser.TKHD_FLAG_IN_PREVIEW=4,BoxParser.tkhdBox.prototype.parse=function(t){this.parseFullHeader(t),1==this.version?(this.creation_time=t.readUint64(),this.modification_time=t.readUint64(),this.track_id=t.readUint32(),t.readUint32(),this.duration=t.readUint64()):(this.creation_time=t.readUint32(),this.modification_time=t.readUint32(),this.track_id=t.readUint32(),t.readUint32(),this.duration=t.readUint32()),t.readUint32Array(2),this.layer=t.readInt16(),this.alternate_group=t.readInt16(),this.volume=t.readInt16()>>8,t.readUint16(),this.matrix=t.readInt32Array(9),this.width=t.readUint32(),this.height=t.readUint32()},BoxParser.mdhdBox.prototype.parse=function(t){this.parseFullHeader(t),1==this.version?(this.creation_time=t.readUint64(),this.modification_time=t.readUint64(),this.timescale=t.readUint32(),this.duration=t.readUint64()):(this.creation_time=t.readUint32(),this.modification_time=t.readUint32(),this.timescale=t.readUint32(),this.duration=t.readUint32()),this.language=t.readUint16();var e=[];e[0]=this.language>>10&31,e[1]=this.language>>5&31,e[2]=31&this.language,this.languageString=String.fromCharCode(e[0]+96,e[1]+96,e[2]+96),t.readUint16()},BoxParser.hdlrBox.prototype.parse=function(t){this.parseFullHeader(t),0===this.version?(t.readUint32(),this.handler=t.readString(4),t.readUint32Array(3),this.name=t.readCString()):this.data=t.readUint8Array(size)},BoxParser.stsdBox.prototype.parse=function(t){var e,r;for(this.parseFullHeader(t),r=t.readUint32(),i=1;i<=r;i++)e=BoxParser.parseOneBox(t,!0),this.entries.push(e.box)},BoxParser.avcCBox.prototype.parse=function(t){var e,i,r;for(this.configurationVersion=t.readUint8(),this.AVCProfileIndication=t.readUint8(),this.profile_compatibility=t.readUint8(),this.AVCLevelIndication=t.readUint8(),this.lengthSizeMinusOne=3&t.readUint8(),i=31&t.readUint8(),this.size-=6,this.SPS=new Array(i),e=0;i>e;e++)r=t.readUint16(),this.SPS[e]=t.readUint8Array(r),this.size-=2+r;for(i=t.readUint8(),this.size--,this.PPS=new Array(i),e=0;i>e;e++)r=t.readUint16(),this.PPS[e]=t.readUint8Array(r),this.size-=2+r;this.size>0&&(this.ext=t.readUint8Array(this.size))},BoxParser.hvcCBox.prototype.parse=function(t){var e,i,r;for(this.configurationVersion=t.readUint8(),r=t.readUint8(),this.general_profile_space=r>>6,this.general_tier_flag=(32&r)>>5,this.general_profile_idc=31&r,this.general_profile_compatibility=t.readUint32(),this.general_constraint_indicator=t.readUint8Array(6),this.general_level_idc=t.readUint8(),this.min_spatial_segmentation_idc=4095&t.readUint16(),this.parallelismType=3&t.readUint8(),this.chromaFormat=3&t.readUint8(),this.bitDepthLumaMinus8=7&t.readUint8(),this.bitDepthChromaMinus8=7&t.readUint8(),this.avgFrameRate=t.readUint16(),r=t.readUint8(),this.constantFrameRate=r>>6,this.numTemporalLayers=(13&r)>>3,this.temporalIdNested=(4&r)>>2,this.lengthSizeMinusOne=3&r,this.nalu_arrays=[],numOfArrays=t.readUint8(),e=0;e<numOfArrays;e++){var s=[];for(this.nalu_arrays.push(s),r=t.readUint8(),s.completeness=(128&r)>>7,s.nalu_type=63&r,numNalus=t.readUint16(),j=0;j<numNalus;j++){var a={};s.push(a),i=t.readUint16(),a.data=t.readUint8Array(i)}}},BoxParser.avc1Box.prototype.getCodec=function(){var t=BoxParser.SampleEntry.prototype.getCodec.call(this);return this.avcC?t+"."+decimalToHex(this.avcC.AVCProfileIndication)+decimalToHex(this.avcC.profile_compatibility)+decimalToHex(this.avcC.AVCLevelIndication):t},BoxParser.hvc1Box.prototype.getCodec=function(){var t,e=BoxParser.SampleEntry.prototype.getCodec.call(this);if(this.hvcC){switch(e+=".",this.hvcC.general_profile_space){case 0:e+="";break;case 1:e+="A";break;case 2:e+="B";break;case 3:e+="C"}e+=this.hvcC.general_profile_idc,e+=".";var i=this.hvcC.general_profile_compatibility,r=0;for(t=0;32>t&&(r|=1&i,31!=t);t++)r<<=1,i>>=1;e+=decimalToHex(r,0),e+=".",e+=0===this.hvcC.general_tier_flag?"L":"H",e+=this.hvcC.general_level_idc;var s=!1,a="";for(t=5;t>=0;t--)(this.hvcC.general_constraint_indicator[t]||s)&&(a="."+decimalToHex(this.hvcC.general_constraint_indicator[t],0)+a,s=!0);e+=a}return e},BoxParser.mp4aBox.prototype.getCodec=function(){var t=BoxParser.SampleEntry.prototype.getCodec.call(this);if(this.esds&&this.esds.esd){var e=this.esds.esd.getOTI(),i=this.esds.esd.getAudioConfig();return t+"."+decimalToHex(e)+(i?"."+i:"")}return t},BoxParser.esdsBox.prototype.parse=function(t){this.parseFullHeader(t),this.data=t.readUint8Array(this.size),this.size=0;var e=new MPEG4DescriptorParser;this.esd=e.parseOneDescriptor(new DataStream(this.data.buffer,0,DataStream.BIG_ENDIAN))},BoxParser.txtCBox.prototype.parse=function(t){this.parseFullHeader(t),this.config=t.readCString()},BoxParser.cttsBox.prototype.parse=function(t){var e,i;if(this.parseFullHeader(t),e=t.readUint32(),this.sample_counts=[],this.sample_offsets=[],0===this.version)for(i=0;e>i;i++)this.sample_counts.push(t.readUint32()),this.sample_offsets.push(t.readInt32());else if(1==this.version)for(i=0;e>i;i++)this.sample_counts.push(t.readUint32()),this.sample_offsets.push(t.readInt32());else this.data=t.readUint8Array(this.size-4)},BoxParser.cttsBox.prototype.unpack=function(t){var e,i,r;for(r=0,e=0;e<this.sample_counts.length;e++)for(i=0;i<this.sample_counts[e];i++)t[r].pts=t[r].dts+this.sample_offsets[e],r++},BoxParser.cslgBox.prototype.parse=function(t){this.parseFullHeader(t),0===this.version?(this.compositionToDTSShift=t.readInt32(),this.leastDecodeToDisplayDelta=t.readInt32(),this.greatestDecodeToDisplayDelta=t.readInt32(),this.compositionStartTime=t.readInt32(),this.compositionEndTime=t.readInt32()):this.data=t.readUint8Array(this.size-4)},BoxParser.sttsBox.prototype.parse=function(t){var e,i;if(this.parseFullHeader(t),e=t.readUint32(),this.sample_counts=[],this.sample_deltas=[],0===this.version)for(i=0;e>i;i++)this.sample_counts.push(t.readUint32()),this.sample_deltas.push(t.readUint32());else this.data=t.readUint8Array(this.size-4)},BoxParser.sttsBox.prototype.unpack=function(t){var e,i,r;for(r=0,e=0;e<this.sample_counts.length;e++)for(i=0;i<this.sample_counts[e];i++)0===r?t[r].dts=0:t[r].dts=t[r-1].dts+this.sample_deltas[e],r++},BoxParser.stssBox.prototype.parse=function(t){var e;this.parseFullHeader(t),e=t.readUint32(),0===this.version?this.sample_numbers=t.readUint32Array(e):this.data=t.readUint8Array(this.size-4)},BoxParser.stshBox.prototype.parse=function(t){var e,i;if(this.parseFullHeader(t),e=t.readUint32(),this.shadowed_sample_numbers=[],this.sync_sample_numbers=[],0===this.version)for(i=0;e>i;i++)this.shadowed_sample_numbers.push(t.readUint32()),this.sync_sample_numbers.push(t.readUint32());else this.data=t.readUint8Array(this.size-4)},BoxParser.stcoBox.prototype.parse=function(t){var e;this.parseFullHeader(t),e=t.readUint32(),0===this.version?this.chunk_offsets=t.readUint32Array(e):this.data=t.readUint8Array(this.size-4)},BoxParser.stcoBox.prototype.unpack=function(t){var e;for(e=0;e<this.chunk_offsets.length;e++)t[e].offset=this.chunk_offsets[e]},BoxParser.co64Box.prototype.parse=function(t){var e,i;if(this.parseFullHeader(t),e=t.readUint32(),this.chunk_offsets=[],0===this.version)for(i=0;e>i;i++)this.chunk_offsets.push(t.readUint64());else this.data=t.readUint8Array(this.size-4)},BoxParser.stscBox.prototype.parse=function(t){var e,i;if(this.parseFullHeader(t),e=t.readUint32(),this.first_chunk=[],this.samples_per_chunk=[],this.sample_description_index=[],0===this.version)for(i=0;e>i;i++)this.first_chunk.push(t.readUint32()),this.samples_per_chunk.push(t.readUint32()),this.sample_description_index.push(t.readUint32());else this.data=t.readUint8Array(this.size-4)},BoxParser.stscBox.prototype.unpack=function(t){var e,i,r,s,a;for(s=0,a=0,e=0;e<this.first_chunk.length;e++)for(i=0;i<(e+1<this.first_chunk.length?this.first_chunk[e+1]:1/0);i++)for(a++,r=0;r<this.samples_per_chunk[e];r++){if(!t[s])return;t[s].description_index=this.sample_description_index[e],t[s].chunk_index=a,s++}},BoxParser.stszBox.prototype.parse=function(t){var e,i,r;if(this.parseFullHeader(t),this.sample_sizes=[],0===this.version)if(i=t.readUint32(),r=t.readUint32(),0===i)this.sample_sizes=t.readUint32Array(r);else for(this.sample_sizes=[],e=0;r>e;e++)this.sample_sizes[e]=i;else this.data=t.readUint8Array(this.size)},BoxParser.stszBox.prototype.unpack=function(t){var e;for(e=0;e<this.sample_sizes.length;e++)t[e].size=this.sample_sizes[e]},BoxParser.mehdBox.prototype.parse=function(t){this.parseFullHeader(t),1==this.version?this.fragment_duration=t.readUint64():this.fragment_duration=t.readUint32()},BoxParser.trexBox.prototype.parse=function(t){this.parseFullHeader(t),this.track_id=t.readUint32(),this.default_sample_description_index=t.readUint32(),this.default_sample_duration=t.readUint32(),this.default_sample_size=t.readUint32(),this.default_sample_flags=t.readUint32()},BoxParser.mfhdBox.prototype.parse=function(t){this.parseFullHeader(t),this.sequence_number=t.readUint32()},BoxParser.TFHD_FLAG_BASE_DATA_OFFSET=1,BoxParser.TFHD_FLAG_SAMPLE_DESC=2,BoxParser.TFHD_FLAG_SAMPLE_DUR=8,BoxParser.TFHD_FLAG_SAMPLE_SIZE=16,BoxParser.TFHD_FLAG_SAMPLE_FLAGS=32,BoxParser.TFHD_FLAG_DUR_EMPTY=65536,BoxParser.TFHD_FLAG_DEFAULT_BASE_IS_MOOF=131072,BoxParser.tfhdBox.prototype.parse=function(t){var e=0;this.parseFullHeader(t),this.track_id=t.readUint32(),this.size>e&&this.flags&BoxParser.TFHD_FLAG_BASE_DATA_OFFSET?(this.base_data_offset=t.readUint64(),e+=8):this.base_data_offset=0,this.size>e&&this.flags&BoxParser.TFHD_FLAG_SAMPLE_DESC?(this.default_sample_description_index=t.readUint32(),e+=4):this.default_sample_description_index=0,this.size>e&&this.flags&BoxParser.TFHD_FLAG_SAMPLE_DUR?(this.default_sample_duration=t.readUint32(),e+=4):this.default_sample_duration=0,this.size>e&&this.flags&BoxParser.TFHD_FLAG_SAMPLE_SIZE?(this.default_sample_size=t.readUint32(),e+=4):this.default_sample_size=0,this.size>e&&this.flags&BoxParser.TFHD_FLAG_SAMPLE_FLAGS?(this.default_sample_flags=t.readUint32(),e+=4):this.default_sample_flags=0},BoxParser.TRUN_FLAGS_DATA_OFFSET=1,BoxParser.TRUN_FLAGS_FIRST_FLAG=4,BoxParser.TRUN_FLAGS_DURATION=256,BoxParser.TRUN_FLAGS_SIZE=512,BoxParser.TRUN_FLAGS_FLAGS=1024,BoxParser.TRUN_FLAGS_CTS_OFFSET=2048,BoxParser.trunBox.prototype.parse=function(t){var e=0;if(this.parseFullHeader(t),this.sample_count=t.readUint32(),e+=4,this.size>e&&this.flags&BoxParser.TRUN_FLAGS_DATA_OFFSET?(this.data_offset=t.readInt32(),e+=4):this.data_offset=0,this.size>e&&this.flags&BoxParser.TRUN_FLAGS_FIRST_FLAG?(this.first_sample_flags=t.readUint32(),e+=4):this.first_sample_flags=0,this.sample_duration=[],this.sample_size=[],this.sample_flags=[],this.sample_composition_time_offset=[],this.size>e)for(var i=0;i<this.sample_count;i++)this.flags&BoxParser.TRUN_FLAGS_DURATION&&(this.sample_duration[i]=t.readUint32()),this.flags&BoxParser.TRUN_FLAGS_SIZE&&(this.sample_size[i]=t.readUint32()),this.flags&BoxParser.TRUN_FLAGS_FLAGS&&(this.sample_flags[i]=t.readUint32()),this.flags&BoxParser.TRUN_FLAGS_CTS_OFFSET&&(0===this.version?this.sample_composition_time_offset[i]=t.readUint32():this.sample_composition_time_offset[i]=t.readInt32())},BoxParser.tfdtBox.prototype.parse=function(t){this.parseFullHeader(t),1==this.version?this.baseMediaDecodeTime=t.readUint64():this.baseMediaDecodeTime=t.readUint32()},BoxParser.paylBox.prototype.parse=function(t){this.text=t.readString(this.size)},BoxParser.subsBox.prototype.parse=function(t){var e,i,r,s;for(this.parseFullHeader(t),r=t.readUint32(),this.samples=[],e=0;r>e;e++){var a={};if(this.samples[e]=a,a.sample_delta=t.readUint32(),a.subsamples=[],s=t.readUint16(),s>0)for(i=0;s>i;i++){var o={};a.subsamples.push(o),1==this.version?o.size=t.readUint32():o.size=t.readUint16(),o.priority=t.readUint8(),o.discardable=t.readUint8(),o.reserved=t.readUint32()}}},BoxParser.Box.prototype.writeHeader=function(t,e){this.size+=8,this.size>DataStream.MAX_SIZE&&(this.size+=8),Log.d("BoxWriter","Writing box "+this.type+" of size: "+this.size+" at position "+t.position+(e||"")),this.size>DataStream.MAX_SIZE?t.writeUint32(1):(this.sizePosition=t.position,t.writeUint32(this.size)),t.writeString(this.type,null,4),this.size>DataStream.MAX_SIZE&&t.writeUint64(this.size)},BoxParser.FullBox.prototype.writeHeader=function(t){this.size+=4,BoxParser.Box.prototype.writeHeader.call(this,t," v="+this.version+" f="+this.flags),t.writeUint8(this.version),t.writeUint24(this.flags)},BoxParser.Box.prototype.write=function(t){"mdat"===this.type?this.data&&(this.size=this.data.length,this.writeHeader(t),t.writeUint8Array(this.data)):(this.size=this.data.length,this.writeHeader(t),t.writeUint8Array(this.data))},BoxParser.ContainerBox.prototype.write=function(t){this.size=0,this.writeHeader(t);for(var e=0;e<this.boxes.length;e++)this.boxes[e]&&(this.boxes[e].write(t),this.size+=this.boxes[e].size);Log.d("BoxWriter","Adjusting box "+this.type+" with new size "+this.size),t.adjustUint32(this.sizePosition,this.size)},BoxParser.TrackReferenceTypeBox.prototype.write=function(t){this.size=4*this.track_ids.length,this.writeHeader(t),t.writeUint32Array(this.track_ids)},BoxParser.ftypBox.prototype.write=function(t){this.size=8+4*this.compatible_brands.length,this.writeHeader(t),t.writeString(this.major_brand,null,4),t.writeUint32(this.minor_version);for(var e=0;e<this.compatible_brands.length;e++)t.writeString(this.compatible_brands[e],null,4)},BoxParser.mvhdBox.prototype.write=function(t){this.version=0,this.flags=0,this.size=96,this.writeHeader(t),t.writeUint32(this.creation_time),t.writeUint32(this.modification_time),t.writeUint32(this.timescale),t.writeUint32(this.duration),t.writeUint32(this.rate),t.writeUint16(this.volume<<8),t.writeUint16(0),t.writeUint32(0),t.writeUint32(0),t.writeUint32Array(this.matrix),t.writeUint32(0),t.writeUint32(0),t.writeUint32(0),t.writeUint32(0),t.writeUint32(0),t.writeUint32(0),t.writeUint32(this.next_track_id)},BoxParser.tkhdBox.prototype.write=function(t){this.version=0,this.size=80,this.writeHeader(t),t.writeUint32(this.creation_time),t.writeUint32(this.modification_time),t.writeUint32(this.track_id),t.writeUint32(0),t.writeUint32(this.duration),t.writeUint32(0),t.writeUint32(0),t.writeInt16(this.layer),t.writeInt16(this.alternate_group),t.writeInt16(this.volume<<8),t.writeUint16(0),t.writeInt32Array(this.matrix),t.writeUint32(this.width),t.writeUint32(this.height)},BoxParser.mdhdBox.prototype.write=function(t){this.size=20,this.flags=0,this.version=0,this.writeHeader(t),t.writeUint32(this.creation_time),t.writeUint32(this.modification_time),t.writeUint32(this.timescale),t.writeUint32(this.duration),t.writeUint16(this.language),t.writeUint16(0)},BoxParser.hdlrBox.prototype.write=function(t){this.size=20+this.name.length+1,this.version=0,this.flags=0,this.writeHeader(t),t.writeUint32(0),t.writeString(this.handler,null,4),t.writeUint32(0),t.writeUint32(0),t.writeUint32(0),t.writeCString(this.name)},BoxParser.stsdBox.prototype.write=function(t){var e;for(this.version=0,this.flags=0,this.size=0,this.writeHeader(t),t.writeUint32(this.entries.length),this.size+=4,e=0;e<this.entries.length;e++)this.entries[e].write(t),this.size+=this.entries[e].size;Log.d("BoxWriter","Adjusting box "+this.type+" with new size "+this.size),t.adjustUint32(this.sizePosition,this.size)},BoxParser.SampleEntry.prototype.writeHeader=function(t){this.size=8,BoxParser.Box.prototype.writeHeader.call(this,t),t.writeUint8(0),t.writeUint8(0),t.writeUint8(0),t.writeUint8(0),t.writeUint8(0),t.writeUint8(0),t.writeUint16(this.data_reference_index)},BoxParser.SampleEntry.prototype.writeFooter=function(t){for(var e=0;e<this.boxes.length;e++)this.boxes[e].write(t),this.size+=this.boxes[e].size;Log.d("BoxWriter","Adjusting box "+this.type+" with new size "+this.size),t.adjustUint32(this.sizePosition,this.size)},BoxParser.SampleEntry.prototype.write=function(t){this.writeHeader(t),this.writeFooter(t)},BoxParser.VisualSampleEntry.prototype.write=function(t){this.writeHeader(t),this.size+=70,t.writeUint16(0),t.writeUint16(0),t.writeUint32(0),t.writeUint32(0),t.writeUint32(0),t.writeUint16(this.width-this.width%2),t.writeUint16(this.height-this.height%2),t.writeUint32(this.horizresolution),t.writeUint32(this.vertresolution),t.writeUint32(0),t.writeUint16(this.frame_count),t.writeString(this.compressorname,null,32),t.writeUint16(this.depth),t.writeInt16(-1),this.writeFooter(t)},BoxParser.AudioSampleEntry.prototype.write=function(t){this.writeHeader(t),this.size+=20,t.writeUint32(0),t.writeUint32(0),t.writeUint16(this.channel_count),t.writeUint16(this.samplesize),t.writeUint16(0),t.writeUint16(0),t.writeUint32(this.samplerate<<16),this.writeFooter(t)},BoxParser.avcCBox.prototype.write=function(t){var e;for(this.size=7,e=0;e<this.SPS.length;e++)this.size+=2+this.SPS[e].length;for(e=0;e<this.PPS.length;e++)this.size+=2+this.PPS[e].length;for(this.ext&&(this.size+=this.ext.length),this.writeHeader(t),t.writeUint8(this.configurationVersion),t.writeUint8(this.AVCProfileIndication),t.writeUint8(this.profile_compatibility),t.writeUint8(this.AVCLevelIndication),t.writeUint8(this.lengthSizeMinusOne+252),t.writeUint8(this.SPS.length+224),e=0;e<this.SPS.length;e++)t.writeUint16(this.SPS[e].length),t.writeUint8Array(this.SPS[e]);for(t.writeUint8(this.PPS.length),e=0;e<this.PPS.length;e++)t.writeUint16(this.PPS[e].length),t.writeUint8Array(this.PPS[e]);this.ext&&t.writeUint8Array(this.ext)},BoxParser.cttsBox.prototype.write=function(t){var e;for(this.version=1,this.flags=0,this.size=4+8*this.sample_counts.length,this.writeHeader(t),t.writeUint32(this.sample_counts.length),e=0;e<this.sample_counts.length;e++)t.writeUint32(this.sample_counts[e]),t.writeInt32(this.sample_offsets[e])},BoxParser.cslgBox.prototype.write=function(t){this.version=0,this.flags=0,this.size=20,this.writeHeader(t),t.writeInt32(this.compositionToDTSShift),t.writeInt32(this.leastDecodeToDisplayDelta),t.writeInt32(this.greatestDecodeToDisplayDelta),t.writeInt32(this.compositionStartTime),t.writeInt32(this.compositionEndTime)},BoxParser.sttsBox.prototype.write=function(t){var e;for(this.version=0,this.flags=0,this.size=4+8*this.sample_counts.length,this.writeHeader(t),t.writeUint32(this.sample_counts.length),e=0;e<this.sample_counts.length;e++)t.writeUint32(this.sample_counts[e]),t.writeUint32(this.sample_deltas[e])},BoxParser.stssBox.prototype.write=function(t){this.version=0,this.flags=0,this.size=4+4*this.sample_numbers.length,this.writeHeader(t),t.writeUint32(this.sample_numbers.length),t.writeUint32Array(this.sample_numbers)},BoxParser.stshBox.prototype.write=function(t){var e;for(this.version=0,this.flags=0,this.size=4+8*this.shadowed_sample_numbers.length,this.writeHeader(t),t.writeUint32(this.shadowed_sample_numbers.length),e=0;e<this.shadowed_sample_numbers.length;e++)t.writeUint32(this.shadowed_sample_numbers[e]),t.writeUint32(this.sync_sample_numbers[e])},BoxParser.stcoBox.prototype.write=function(t){this.version=0,this.flags=0,this.size=4+4*this.chunk_offsets.length,this.writeHeader(t),t.writeUint32(this.chunk_offsets.length),t.writeUint32Array(this.chunk_offsets)},BoxParser.co64Box.prototype.write=function(t){var e;for(this.version=0,this.flags=0,this.size=4+8*this.chunk_offsets.length,this.writeHeader(t),t.writeUint32(this.chunk_offsets.length),e=0;e<this.chunk_offsets.length;e++)t.writeUint64(this.chunk_offsets[e])},BoxParser.stscBox.prototype.write=function(t){var e;for(this.version=0,this.flags=0,this.size=4+12*this.first_chunk.length,this.writeHeader(t),t.writeUint32(this.first_chunk.length),e=0;e<this.first_chunk.length;e++)t.writeUint32(this.first_chunk[e]),t.writeUint32(this.samples_per_chunk[e]),t.writeUint32(this.sample_description_index[e])},BoxParser.stszBox.prototype.write=function(t){this.version=0,this.flags=0,this.size=8+12*this.sample_sizes.length,this.writeHeader(t),t.writeUint32(0),t.writeUint32(this.sample_sizes.length),t.writeUint32Array(this.sample_sizes)},BoxParser.mehdBox.prototype.write=function(t){this.version=0,this.flags=0,this.size=4,this.writeHeader(t),t.writeUint32(this.fragment_duration)},BoxParser.trexBox.prototype.write=function(t){this.version=0,this.flags=0,this.size=20,this.writeHeader(t),t.writeUint32(this.track_id),t.writeUint32(this.default_sample_description_index),t.writeUint32(this.default_sample_duration),t.writeUint32(this.default_sample_size),t.writeUint32(this.default_sample_flags)},BoxParser.mfhdBox.prototype.write=function(t){this.version=0,this.flags=0,this.size=4,this.writeHeader(t),t.writeUint32(this.sequence_number)},BoxParser.tfhdBox.prototype.write=function(t){this.version=0,this.size=4,this.flags&BoxParser.TFHD_FLAG_BASE_OFFSET&&(this.size+=8),this.flags&BoxParser.TFHD_FLAG_SAMPLE_DESC&&(this.size+=4),this.flags&BoxParser.TFHD_FLAG_SAMPLE_DUR&&(this.size+=4),this.flags&BoxParser.TFHD_FLAG_SAMPLE_SIZE&&(this.size+=4),this.flags&BoxParser.TFHD_FLAG_SAMPLE_FLAGS&&(this.size+=4),this.writeHeader(t),t.writeUint32(this.track_id),this.flags&BoxParser.TFHD_FLAG_BASE_OFFSET&&t.writeUint64(this.base_data_offset),this.flags&BoxParser.TFHD_FLAG_SAMPLE_DESC&&t.writeUint32(this.default_sample_description_index),this.flags&BoxParser.TFHD_FLAG_SAMPLE_DUR&&t.writeUint32(this.default_sample_duration),this.flags&BoxParser.TFHD_FLAG_SAMPLE_SIZE&&t.writeUint32(this.default_sample_size),this.flags&BoxParser.TFHD_FLAG_SAMPLE_FLAGS&&t.writeUint32(this.default_sample_flags)},BoxParser.trunBox.prototype.write=function(t){this.version=0,this.size=4,this.flags&BoxParser.TRUN_FLAGS_DATA_OFFSET&&(this.size+=4),this.flags&BoxParser.TRUN_FLAGS_FIRST_FLAG&&(this.size+=4),this.flags&BoxParser.TRUN_FLAGS_DURATION&&(this.size+=4*this.sample_duration.length),this.flags&BoxParser.TRUN_FLAGS_SIZE&&(this.size+=4*this.sample_size.length),this.flags&BoxParser.TRUN_FLAGS_FLAGS&&(this.size+=4*this.sample_flags.length),this.flags&BoxParser.TRUN_FLAGS_CTS_OFFSET&&(this.size+=4*this.sample_composition_time_offset.length),this.writeHeader(t),t.writeUint32(this.sample_count),
this.flags&BoxParser.TRUN_FLAGS_DATA_OFFSET&&(this.data_offset_position=t.position,t.writeInt32(this.data_offset)),this.flags&BoxParser.TRUN_FLAGS_FIRST_FLAG&&t.writeUint32(this.first_sample_flags);for(var e=0;e<this.sample_count;e++)this.flags&BoxParser.TRUN_FLAGS_DURATION&&t.writeUint32(this.sample_duration[e]),this.flags&BoxParser.TRUN_FLAGS_SIZE&&t.writeUint32(this.sample_size[e]),this.flags&BoxParser.TRUN_FLAGS_FLAGS&&t.writeUint32(this.sample_flags[e]),this.flags&BoxParser.TRUN_FLAGS_CTS_OFFSET&&(0===this.version?t.writeUint32(this.sample_composition_time_offset[e]):t.writeInt32(this.sample_composition_time_offset[e]))},BoxParser.tfdtBox.prototype.write=function(t){this.version=0,this.flags=0,this.size=4,this.writeHeader(t),1==this.version?t.writeUint64(this.baseMediaDecodeTime):t.writeUint32(this.baseMediaDecodeTime)};

},{"./DataStream":177,"./descriptor":179,"./log":181}],179:[function(require,module,exports){
var Log=require("./log"),MPEG4DescriptorParser=function(){var r=3,i=4,t=5,e=6,s=[];s[r]="ES_Descriptor",s[i]="DecoderConfigDescriptor",s[t]="DecoderSpecificInfo",s[e]="SLConfigDescriptor";var o=this,n={};return this.parseOneDescriptor=function(r){var i,t,e,o=0,p=0;for(i=r.readUint8(),o++,e=r.readUint8(),o++;128&e;)p=(127&e)<<7,e=r.readUint8(),o++;return p+=127&e,Log.d("MPEG4DescriptorParser","Found "+(s[i]|"Descriptor "+i)+", size "+p+" at position "+r.position),t=s[i]?new n[s[i]](p):new n.Descriptor(p),t.parse(r),t},n.Descriptor=function(r,i){this.tag=r,this.size=i,this.descs=[]},n.Descriptor.prototype.parse=function(r){this.data=r.readUint8Array(this.size)},n.Descriptor.prototype.findDescriptor=function(r){for(var i=0;i<this.descs.length;i++)if(this.descs[i].tag==r)return this.descs[i];return null},n.Descriptor.prototype.parseRemainingDescriptors=function(r){for(var i=r.position;r.position<i+this.size;){var t=o.parseOneDescriptor(r);this.descs.push(t)}},n.ES_Descriptor=function(i){n.Descriptor.call(this,r,i)},n.ES_Descriptor.prototype=new n.Descriptor,n.ES_Descriptor.prototype.parse=function(r){if(this.ES_ID=r.readUint16(),this.flags=r.readUint8(),this.size-=3,128&this.flags?(this.dependsOn_ES_ID=r.readUint16(),this.size-=2):this.dependsOn_ES_ID=0,64&this.flags){var i=r.readUint8();this.URL=r.readString(i),this.size-=i+1}else this.URL=null;32&this.flags?(this.OCR_ES_ID=r.readUint16(),this.size-=2):this.OCR_ES_ID=0,this.parseRemainingDescriptors(r)},n.ES_Descriptor.prototype.getOTI=function(r){var t=this.findDescriptor(i);return t?t.oti:0},n.ES_Descriptor.prototype.getAudioConfig=function(r){var e=this.findDescriptor(i);if(!e)return null;var s=e.findDescriptor(t);return s&&s.data?(248&s.data[0])>>3:null},n.DecoderConfigDescriptor=function(r){n.Descriptor.call(this,i,r)},n.DecoderConfigDescriptor.prototype=new n.Descriptor,n.DecoderConfigDescriptor.prototype.parse=function(r){this.oti=r.readUint8(),this.streamType=r.readUint8(),this.bufferSize=r.readUint24(),this.maxBitrate=r.readUint32(),this.avgBitrate=r.readUint32(),this.size-=13,this.parseRemainingDescriptors(r)},n.DecoderSpecificInfo=function(r){n.Descriptor.call(this,t,r)},n.DecoderSpecificInfo.prototype=new n.Descriptor,n.SLConfigDescriptor=function(r){n.Descriptor.call(this,e,r)},n.SLConfigDescriptor.prototype=new n.Descriptor,this};module.exports=MPEG4DescriptorParser;

},{"./log":181}],180:[function(require,module,exports){
var BoxParser=require("./box"),DataStream=require("./DataStream"),Log=require("./log"),ISOFile=function(t){this.stream=t,this.boxes=[],this.mdats=[],this.moofs=[],this.isProgressive=!1,this.lastMoofIndex=0,this.lastBoxStartPosition=0,this.parsingMdat=null,this.moovStartFound=!1,this.samplesDataSize=0,this.nextParsePosition=0};module.exports=ISOFile,ISOFile.prototype.mergeNextBuffer=function(){var t;if(this.stream.bufferIndex+1<this.stream.nextBuffers.length){if(t=this.stream.nextBuffers[this.stream.bufferIndex+1],t.fileStart===this.stream.buffer.fileStart+this.stream.buffer.byteLength){var e=this.stream.buffer.byteLength,s=this.stream.buffer.usedBytes,i=this.stream.buffer.fileStart;return this.stream.nextBuffers[this.stream.bufferIndex]=ArrayBuffer.concat(this.stream.buffer,t),this.stream.buffer=this.stream.nextBuffers[this.stream.bufferIndex],this.stream.nextBuffers.splice(this.stream.bufferIndex+1,1),this.stream.buffer.usedBytes=s,this.stream.buffer.fileStart=i,Log.d("ISOFile","Concatenating buffer for box parsing (length: "+e+"->"+this.stream.buffer.byteLength+")"),!0}return!1}return!1},ISOFile.prototype.parse=function(){var t,e,s;for(Log.d("ISOFile","Starting parsing with buffer #"+this.stream.bufferIndex+" (fileStart: "+this.stream.buffer.fileStart+" - Length: "+this.stream.buffer.byteLength+") from position "+this.lastBoxStartPosition+" ("+(this.stream.buffer.fileStart+this.lastBoxStartPosition)+" in the file)"),this.stream.seek(this.lastBoxStartPosition);;){if(null!==this.parsingMdat){if(s=this.parsingMdat,t=this.reposition(!1,s.fileStart+s.hdr_size+s.size)){Log.d("ISOFile","Found 'mdat' end in buffer #"+this.stream.bufferIndex),this.parsingMdat=null;continue}return void(this.nextParsePosition=this.findEndContiguousBuf(this.stream.bufferIndex))}if(this.lastBoxStartPosition=this.stream.position,e=BoxParser.parseOneBox(this.stream),e.code===BoxParser.ERR_NOT_ENOUGH_DATA){if("mdat"===e.type){if(s=new BoxParser[e.type+"Box"](e.size-e.hdr_size),this.parsingMdat=s,this.mdats.push(s),s.fileStart=this.stream.buffer.fileStart+this.stream.position,s.hdr_size=e.hdr_size,this.stream.buffer.usedBytes+=e.hdr_size,t=this.reposition(!1,s.fileStart+s.hdr_size+s.size)){this.parsingMdat=null;continue}return void(this.moovStartFound?this.nextParsePosition=this.findEndContiguousBuf(this.stream.bufferIndex):this.nextParsePosition=s.fileStart+s.size+s.hdr_size)}if("moov"===e.type)this.moovStartFound=!0,0===this.mdats.length&&(this.isProgressive=!0);else if("free"===e.type){if(t=this.reposition(!1,this.stream.buffer.fileStart+this.stream.position+e.size))continue;return void(this.nextParsePosition=this.stream.buffer.fileStart+this.stream.position+e.size)}if(merged=this.mergeNextBuffer(),merged){this.nextParsePosition=this.stream.buffer.fileStart+this.stream.buffer.byteLength;continue}return void(e.type?this.moovStartFound?this.nextParsePosition=this.stream.buffer.fileStart+this.stream.buffer.byteLength:this.nextParsePosition=this.stream.buffer.fileStart+this.stream.position+e.size:this.nextParsePosition=this.stream.buffer.fileStart+this.stream.buffer.byteLength)}switch(s=e.box,this.boxes.push(s),s.type){case"mdat":this.mdats.push(s),s.fileStart=this.stream.buffer.fileStart+s.start;break;case"moof":this.moofs.push(s);break;case"moov":this.moovStartFound=!0,0===this.mdats.length&&(this.isProgressive=!0);default:void 0!==this[s.type]&&Log.w("ISOFile","Duplicate Box of type: "+s.type+", overriding previous occurrence"),this[s.type]=s}"mdat"===s.type?this.stream.buffer.usedBytes+=s.hdr_size:this.stream.buffer.usedBytes+=e.size}},ISOFile.prototype.reposition=function(t,e){var s;return s=this.findPosition(t,e),-1!==s?(this.stream.buffer=this.stream.nextBuffers[s],this.stream.bufferIndex=s,this.stream.position=e-this.stream.buffer.fileStart,Log.d("ISOFile","Repositioning parser at buffer position: "+this.stream.position),!0):!1},ISOFile.prototype.findPosition=function(t,e){var s,i=null,a=-1;for(s=t===!0?0:this.stream.bufferIndex;s<this.stream.nextBuffers.length&&(i=this.stream.nextBuffers[s],i.fileStart<=e);)a=s,s++;return-1!==a?(i=this.stream.nextBuffers[a],i.fileStart+i.byteLength>=e?(Log.d("ISOFile","Found position in existing buffer #"+a),a):-1):-1},ISOFile.prototype.findEndContiguousBuf=function(t){var e,s,i;if(s=this.stream.nextBuffers[t],this.stream.nextBuffers.length>t+1)for(e=t+1;e<this.stream.nextBuffers.length&&(i=this.stream.nextBuffers[e],i.fileStart===s.fileStart+s.byteLength);e++)s=i;return s.fileStart+s.byteLength},ISOFile.prototype.write=function(t){for(var e=0;e<this.boxes.length;e++)this.boxes[e].write(t)},ISOFile.prototype.writeInitializationSegment=function(t){var e,s,i,a;if(Log.d("ISOFile","Generating initialization segment"),this.ftyp.write(t),this.moov.mvex){for(this.initial_duration=this.moov.mvex.mehd.fragment_duration,s=-1,e=0;e<this.moov.boxes.length;e++)a=this.moov.boxes[e],a===this.moov.mvex&&(s=e);s>-1&&this.moov.boxes.splice(s,1),this.moov.mvex=null}for(this.moov.mvex=new BoxParser.mvexBox,this.moov.boxes.push(this.moov.mvex),this.moov.mvex.mehd=new BoxParser.mehdBox,this.moov.mvex.boxes.push(this.moov.mvex.mehd),this.moov.mvex.mehd.fragment_duration=this.initial_duration,e=0;e<this.moov.traks.length;e++)this.moov.traks[e].ignore||(i=new BoxParser.trexBox,this.moov.mvex.boxes.push(i),i.track_id=this.moov.traks[e].tkhd.track_id,i.default_sample_description_index=1,i.default_sample_duration=this.moov.traks[e].samples.length>0?this.moov.traks[e].samples[0].duration:0,i.default_sample_size=0,i.default_sample_flags=65536);this.moov.write(t)},ISOFile.prototype.resetTables=function(){var t,e,s,i,a,r,o,f,n;for(this.initial_duration=this.moov.mvhd.duration,this.moov.mvhd.duration=0,t=0;t<this.moov.traks.length;t++){e=this.moov.traks[t],e.tkhd.duration=0,e.mdia.mdhd.duration=0,s=e.mdia.minf.stbl.stco||e.mdia.minf.stbl.co64,s.chunk_offsets=[],i=e.mdia.minf.stbl.stsc,i.first_chunk=[],i.samples_per_chunk=[],i.sample_description_index=[],a=e.mdia.minf.stbl.stsz,a.sample_sizes=[],r=e.mdia.minf.stbl.stts,r.sample_counts=[],r.sample_deltas=[],o=e.mdia.minf.stbl.ctts,o&&(o.sample_counts=[],o.sample_offsets=[]),f=e.mdia.minf.stbl.stss,f&&(f.sample_numbers=new Uint32Array(0)),n=e.mdia.minf.stbl.sdtp;var l=e.mdia.minf.stbl.boxes.indexOf(n);-1!=l&&(e.mdia.minf.stbl.boxes[l]=null)}},ISOFile.prototype.buildSampleLists=function(){var t,e,s,i,a,r,o,f,n,l,m,d,h,u,p,_,x,b,g,S,c;for(this.originalMvex=this.moov.mvex,t=0;t<this.moov.traks.length;t++){for(s=this.moov.traks[t],s.samples=[],i=s.mdia.minf.stbl.stco||s.mdia.minf.stbl.co64,a=s.mdia.minf.stbl.stsc,r=s.mdia.minf.stbl.stsz,o=s.mdia.minf.stbl.stts,f=s.mdia.minf.stbl.ctts,n=s.mdia.minf.stbl.stss,l=s.mdia.minf.stbl.stsd,m=s.mdia.minf.stbl.subs,x=-1,b=-1,g=-1,S=-1,c=0,subs_entry_index=0,last_subs_sample_index=0,e=0;e<r.sample_sizes.length;e++){var v={};v.number=e,v.track_id=s.tkhd.track_id,v.timescale=s.mdia.mdhd.timescale,s.samples[e]=v,v.size=r.sample_sizes[e],0===e?(h=1,d=0,v.chunk_index=h,v.chunk_run_index=d,_=a.samples_per_chunk[d],p=0,u=d+1<a.first_chunk.length?a.first_chunk[d+1]-1:1/0):_>e?(v.chunk_index=h,v.chunk_run_index=d):(h++,v.chunk_index=h,p=0,u>=h||(d++,u=d+1<a.first_chunk.length?a.first_chunk[d+1]-1:1/0),v.chunk_run_index=d,_+=a.samples_per_chunk[d]),v.description=l.entries[a.sample_description_index[v.chunk_run_index]-1],v.offset=i.chunk_offsets[v.chunk_index-1]+p,p+=v.size,e>x&&(b++,0>x&&(x=0),x+=o.sample_counts[b]),e>0?(s.samples[e-1].duration=o.sample_deltas[b],v.dts=s.samples[e-1].dts+s.samples[e-1].duration):v.dts=0,f?(e>g&&(S++,g+=f.sample_counts[S]),v.cts=s.samples[e].dts+f.sample_offsets[S]):v.cts=v.dts,n?e==n.sample_numbers[c]-1?(v.is_rap=!0,c++):v.is_rap=!1:v.is_rap=!0,m&&m.samples[subs_entry_index].sample_delta+last_subs_sample_index==e&&(v.subsamples=m.samples[subs_entry_index].subsamples,last_subs_sample_index+=m.samples[subs_entry_index].sample_delta)}e>0&&(s.samples[e-1].duration=s.mdia.mdhd.duration-s.samples[e-1].dts)}},ISOFile.prototype.updateSampleLists=function(){for(var t,e,s,i,a,r,o,f,n,l,m,d,h,u;this.lastMoofIndex<this.moofs.length;)if(n=this.moofs[this.lastMoofIndex],this.lastMoofIndex++,"moof"==n.type)for(l=n,t=0;t<l.trafs.length;t++){for(m=l.trafs[t],d=this.getTrackById(m.tfhd.track_id),h=this.getTrexById(m.tfhd.track_id),i=m.tfhd.flags&BoxParser.TFHD_FLAG_SAMPLE_DESC?m.tfhd.default_sample_description_index:h.default_sample_description_index,a=m.tfhd.flags&BoxParser.TFHD_FLAG_SAMPLE_DUR?m.tfhd.default_sample_duration:h.default_sample_duration,r=m.tfhd.flags&BoxParser.TFHD_FLAG_SAMPLE_SIZE?m.tfhd.default_sample_size:h.default_sample_size,o=m.tfhd.flags&BoxParser.TFHD_FLAG_SAMPLE_FLAGS?m.tfhd.default_sample_flags:h.default_sample_flags,e=0;e<m.truns.length;e++){var p=m.truns[e];for(s=0;s<p.sample_count;s++){u={},m.first_sample_index=d.samples.length,d.samples.push(u),u.track_id=d.tkhd.track_id,u.timescale=d.mdia.mdhd.timescale,u.description=d.mdia.minf.stbl.stsd.entries[i-1],u.size=r,p.flags&BoxParser.TRUN_FLAGS_SIZE&&(u.size=p.sample_size[s]),u.duration=a,p.flags&BoxParser.TRUN_FLAGS_DURATION&&(u.duration=p.sample_duration[s]),d.first_traf_merged||s>0?u.dts=d.samples[d.samples.length-2].dts+d.samples[d.samples.length-2].duration:(m.tfdt?u.dts=m.tfdt.baseMediaDecodeTime:u.dts=0,d.first_traf_merged=!0),u.cts=u.dts,p.flags&BoxParser.TRUN_FLAGS_CTS_OFFSET&&(u.cts=u.dts+p.sample_composition_time_offset[s]),sample_flags=o,p.flags&BoxParser.TRUN_FLAGS_FLAGS?sample_flags=p.sample_flags[s]:0===s&&p.flags&BoxParser.TRUN_FLAGS_FIRST_FLAG&&(sample_flags=p.first_sample_flags),u.is_rap=sample_flags>>16&1?!1:!0;var _=m.tfhd.flags&BoxParser.TFHD_FLAG_BASE_DATA_OFFSET?!0:!1,x=m.tfhd.flags&BoxParser.TFHD_FLAG_DEFAULT_BASE_IS_MOOF?!0:!1,b=p.flags&BoxParser.TRUN_FLAGS_DATA_OFFSET?!0:!1,g=0;g=_?m.tfhd.base_data_offset:x?l.fileStart:0===e?l.fileStart:f,0===e&&0===s?b?u.offset=g+p.data_offset:u.offset=g:u.offset=f,f=u.offset+u.size}}if(m.subs){var S=m.first_sample_index;for(e=0;e<m.subs.samples.length;e++)S+=m.subs.samples[e].sample_delta,u=d.samples[S-1],u.subsamples=m.subs.samples[e].subsamples}}},ISOFile.prototype.getCodecs=function(){var t,e="";for(t=0;t<this.moov.traks.length;t++){var s=this.moov.traks[t];t>0&&(e+=","),e+=s.mdia.minf.stbl.stsd.entries[0].getCodec()}return e},ISOFile.prototype.getTrexById=function(t){var e;if(!this.originalMvex)return null;for(e=0;e<this.originalMvex.trexs.length;e++){var s=this.originalMvex.trexs[e];if(s.track_id==t)return s}return null},ISOFile.prototype.getTrackById=function(t){for(var e=0;e<this.moov.traks.length;e++){var s=this.moov.traks[e];if(s.tkhd.track_id==t)return s}return null},ISOFile.prototype.getSample=function(t,e){var s,i,a=t.samples[e];if(!this.moov)return null;if(a.data){if(a.alreadyRead==a.size)return a}else a.data=new Uint8Array(a.size),a.alreadyRead=0,this.samplesDataSize+=a.size,Log.d("ISOFile","Allocating sample #"+e+" on track #"+t.tkhd.track_id+" of size "+a.size+" (total: "+this.samplesDataSize+")");for(i=0;i<this.stream.nextBuffers.length;i++)if(s=this.stream.nextBuffers[i],a.offset+a.alreadyRead>=s.fileStart&&a.offset+a.alreadyRead<s.fileStart+s.byteLength){var r=s.byteLength-(a.offset+a.alreadyRead-s.fileStart);if(a.size-a.alreadyRead<=r)return Log.d("ISOFile","Getting sample #"+e+" data (alreadyRead: "+a.alreadyRead+" offset: "+(a.offset+a.alreadyRead-s.fileStart)+" size: "+(a.size-a.alreadyRead)+")"),DataStream.memcpy(a.data.buffer,a.alreadyRead,s,a.offset+a.alreadyRead-s.fileStart,a.size-a.alreadyRead),a.alreadyRead=a.size,s.usedBytes+=a.size-a.alreadyRead,s.usedBytes===s.byteLength&&(this.stream.nextBuffers.splice(i,1),i--),a;Log.d("ISOFile","Getting sample data (alreadyRead: "+a.alreadyRead+" offset: "+(a.offset+a.alreadyRead-s.fileStart)+" size: "+r+")"),DataStream.memcpy(a.data.buffer,a.alreadyRead,s,a.offset+a.alreadyRead-s.fileStart,r),a.alreadyRead+=r,s.usedBytes+=r,s.usedBytes===s.byteLength&&(this.stream.nextBuffers.splice(i,1),i--)}return null},ISOFile.prototype.releaseSample=function(t,e){var s=t.samples[e];return s.data=null,this.samplesDataSize-=s.size,s.size};

},{"./DataStream":177,"./box":178,"./log":181}],181:[function(require,module,exports){
var Log=function(){var t=new Date,n=4,o=3,e=2,r=1,i=n,g={setLogLevel:function(t){i=t==this.d?r:t==this.i?e:t==this.w?o:t==this.e?n:n},d:function(n,o){r>=i&&console.debug("["+Log.getDurationString(new Date-t,1e3)+"]","["+n+"]",o)},i:function(n,o){e>=i&&console.info("["+Log.getDurationString(new Date-t,1e3)+"]","["+n+"]",o)},w:function(n,e){o>=i&&console.warn("["+Log.getDurationString(new Date-t,1e3)+"]","["+n+"]",e)},e:function(o,e){n>=i&&console.error("["+Log.getDurationString(new Date-t,1e3)+"]","["+o+"]",e)}};return g}();module.exports=Log,Log.getDurationString=function(t,n){function o(t,n){for(var o=""+t,e=o.split(".");e[0].length<n;)e[0]="0"+e[0];return e.join(".")}var e=n||1,r=t/e,i=Math.floor(r/3600);r-=3600*i;var g=Math.floor(r/60);r-=60*g;var a=1e3*r;return r=Math.floor(r),a-=1e3*r,a=Math.floor(a),""+i+":"+o(g,2)+":"+o(r,2)+"."+o(a,3)},Log.printRanges=function(t){var n=t.length;if(n>0){for(var o="",e=0;n>e;e++)e>0&&(o+=","),o+="["+Log.getDurationString(t.start(e))+","+Log.getDurationString(t.end(e))+"]";return o}return"(empty)"};

},{}],182:[function(require,module,exports){
var BoxParser=require("./box"),DataStream=require("./DataStream"),ISOFile=require("./isofile"),Log=require("./log"),MP4Box=function(){this.inputStream=null,this.nextBuffers=[],this.inputIsoFile=null,this.onMoovStart=null,this.moovStartSent=!1,this.onReady=null,this.readySent=!1,this.onSegment=null,this.onSamples=null,this.onError=null,this.sampleListBuilt=!1,this.fragmentedTracks=[],this.extractedTracks=[],this.isFragmentationStarted=!1,this.nextMoofNumber=0};module.exports=MP4Box,MP4Box.prototype.setSegmentOptions=function(e,t,i){var s=this.inputIsoFile.getTrackById(e);if(s){var a={};this.fragmentedTracks.push(a),a.id=e,a.user=t,a.trak=s,s.nextSample=0,a.segmentStream=null,a.nb_samples=1e3,a.rapAlignement=!0,i&&(i.nbSamples&&(a.nb_samples=i.nbSamples),i.rapAlignement&&(a.rapAlignement=i.rapAlignement))}},MP4Box.prototype.unsetSegmentOptions=function(e){for(var t=-1,i=0;i<this.fragmentedTracks.length;i++){var s=this.fragmentedTracks[i];s.id==e&&(t=i)}t>-1&&this.fragmentedTracks.splice(t,1)},MP4Box.prototype.setExtractionOptions=function(e,t,i){var s=this.inputIsoFile.getTrackById(e);if(s){var a={};this.extractedTracks.push(a),a.id=e,a.user=t,a.trak=s,s.nextSample=0,a.nb_samples=1e3,a.samples=[],i&&i.nbSamples&&(a.nb_samples=i.nbSamples)}},MP4Box.prototype.unsetExtractionOptions=function(e){for(var t=-1,i=0;i<this.extractedTracks.length;i++){var s=this.extractedTracks[i];s.id==e&&(t=i)}t>-1&&this.extractedTracks.splice(t,1)},MP4Box.prototype.createSingleSampleMoof=function(e){var t=new BoxParser.moofBox,i=new BoxParser.mfhdBox;i.sequence_number=this.nextMoofNumber,this.nextMoofNumber++,t.boxes.push(i);var s=new BoxParser.trafBox;t.boxes.push(s);var a=new BoxParser.tfhdBox;s.boxes.push(a),a.track_id=e.track_id,a.flags=BoxParser.TFHD_FLAG_DEFAULT_BASE_IS_MOOF;var r=new BoxParser.tfdtBox;s.boxes.push(r),r.baseMediaDecodeTime=e.dts;var n=new BoxParser.trunBox;return s.boxes.push(n),t.trun=n,n.flags=BoxParser.TRUN_FLAGS_DATA_OFFSET|BoxParser.TRUN_FLAGS_DURATION|BoxParser.TRUN_FLAGS_SIZE|BoxParser.TRUN_FLAGS_FLAGS|BoxParser.TRUN_FLAGS_CTS_OFFSET,n.data_offset=0,n.first_sample_flags=0,n.sample_count=1,n.sample_duration=[],n.sample_duration[0]=e.duration,n.sample_size=[],n.sample_size[0]=e.size,n.sample_flags=[],n.sample_flags[0]=0,n.sample_composition_time_offset=[],n.sample_composition_time_offset[0]=e.cts-e.dts,t},MP4Box.prototype.createFragment=function(e,t,i,s){var a=this.inputIsoFile.getTrackById(t),r=this.inputIsoFile.getSample(a,i);if(null==r)return this.nextSeekPosition?this.nextSeekPosition=Math.min(a.samples[i].offset,this.nextSeekPosition):this.nextSeekPosition=a.samples[i].offset,null;var n=s||new DataStream;n.endianness=DataStream.BIG_ENDIAN;var o=this.createSingleSampleMoof(r);o.write(n),o.trun.data_offset=o.size+8,Log.d("BoxWriter","Adjusting data_offset with new value "+o.trun.data_offset),n.adjustUint32(o.trun.data_offset_position,o.trun.data_offset);var l=new BoxParser.mdatBox;return l.data=r.data,l.write(n),n},ArrayBuffer.concat=function(e,t){Log.d("ArrayBuffer","Trying to create a new buffer of size: "+(e.byteLength+t.byteLength));var i=new Uint8Array(e.byteLength+t.byteLength);return i.set(new Uint8Array(e),0),i.set(new Uint8Array(t),e.byteLength),i.buffer},MP4Box.prototype.reduceBuffer=function(e,t,i){var s;return s=new Uint8Array(i),s.set(new Uint8Array(e,t,i)),s.buffer.fileStart=e.fileStart+t,s.buffer.usedBytes=0,s.buffer},MP4Box.prototype.insertBuffer=function(e){for(var t=!0,i=0;i<this.nextBuffers.length;i++){var s=this.nextBuffers[i];if(e.fileStart<=s.fileStart){if(e.fileStart===s.fileStart){if(e.byteLength>s.byteLength){this.nextBuffers.splice(i,1),i--;continue}Log.w("MP4Box","Buffer (fileStart: "+e.fileStart+" - Length: "+e.byteLength+") already appended, ignoring")}else e.fileStart+e.byteLength<=s.fileStart||(e=this.reduceBuffer(e,0,s.fileStart-e.fileStart)),Log.d("MP4Box","Appending new buffer (fileStart: "+e.fileStart+" - Length: "+e.byteLength+")"),this.nextBuffers.splice(i,0,e),0===i&&null!==this.inputStream&&(this.inputStream.buffer=e);t=!1;break}if(e.fileStart<s.fileStart+s.byteLength){var a=s.fileStart+s.byteLength-e.fileStart,r=e.byteLength-a;if(!(r>0)){t=!1;break}e=this.reduceBuffer(e,a,r)}}t&&(Log.d("MP4Box","Appending new buffer (fileStart: "+e.fileStart+" - Length: "+e.byteLength+")"),this.nextBuffers.push(e),0===i&&null!==this.inputStream&&(this.inputStream.buffer=e))},MP4Box.prototype.processSamples=function(){var e,t;if(this.isFragmentationStarted&&null!==this.onSegment)for(e=0;e<this.fragmentedTracks.length;e++){var i=this.fragmentedTracks[e];for(t=i.trak;t.nextSample<t.samples.length;){Log.d("MP4Box","Creating media fragment on track #"+i.id+" for sample "+t.nextSample);var s=this.createFragment(this.inputIsoFile,i.id,t.nextSample,i.segmentStream);if(!s)break;if(i.segmentStream=s,t.nextSample++,(t.nextSample%i.nb_samples===0||t.nextSample>=t.samples.length)&&(Log.i("MP4Box","Sending fragmented data on track #"+i.id+" for samples ["+(t.nextSample-i.nb_samples)+","+(t.nextSample-1)+"]"),this.onSegment&&this.onSegment(i.id,i.user,i.segmentStream.buffer,t.nextSample),i.segmentStream=null,i!==this.fragmentedTracks[e]))break}}if(null!==this.onSamples)for(e=0;e<this.extractedTracks.length;e++){var a=this.extractedTracks[e];for(t=a.trak;t.nextSample<t.samples.length;){Log.d("MP4Box","Exporting on track #"+a.id+" sample #"+t.nextSample);var r=this.inputIsoFile.getSample(t,t.nextSample);if(!r)return;if(t.nextSample++,a.samples.push(r),(t.nextSample%a.nb_samples===0||t.nextSample>=t.samples.length)&&(Log.d("MP4Box","Sending samples on track #"+a.id+" for sample "+t.nextSample),this.onSamples&&this.onSamples(a.id,a.user,a.samples),a.samples=[],a!==this.extractedTracks[e]))break}}},MP4Box.prototype.appendBuffer=function(e){var t,i;if(null===e||void 0===e)throw"Buffer must be defined and non empty";if(void 0===e.fileStart)throw"Buffer must have a fileStart property";if(0===e.byteLength)return void Log.w("MP4Box","Ignoring empty buffer (fileStart: "+e.fileStart+")");if(e.usedBytes=0,this.insertBuffer(e),!this.inputStream){if(!(this.nextBuffers.length>0))return void Log.w("MP4Box","No buffer to start parsing from");if(i=this.nextBuffers[0],0!==i.fileStart)return void Log.w("MP4Box","The first buffer should have a fileStart of 0");this.inputStream=new DataStream(i,0,DataStream.BIG_ENDIAN),this.inputStream.nextBuffers=this.nextBuffers,this.inputStream.bufferIndex=0}if(this.inputIsoFile||(this.inputIsoFile=new ISOFile(this.inputStream)),this.inputIsoFile.parse(),this.inputIsoFile.moovStartFound&&!this.moovStartSent&&(this.moovStartSent=!0,this.onMoovStart&&this.onMoovStart()),this.inputIsoFile.moov){if(this.sampleListBuilt||(this.inputIsoFile.buildSampleLists(),this.sampleListBuilt=!0),this.inputIsoFile.updateSampleLists(),this.onReady&&!this.readySent){var s=this.getInfo();this.readySent=!0,this.onReady(s)}this.processSamples(),this.nextSeekPosition?(t=this.nextSeekPosition,this.nextSeekPosition=void 0):t=this.inputIsoFile.nextParsePosition;var a=this.inputIsoFile.findPosition(!0,t);return-1!==a&&(t=this.inputIsoFile.findEndContiguousBuf(a)),Log.i("MP4Box","Next buffer to fetch should have a fileStart position of "+t),t}return null!==this.inputIsoFile?this.inputIsoFile.nextParsePosition:0},MP4Box.prototype.getInfo=function(){var e,t,s,a={},r=new Date(4,0,1,0,0,0,0).getTime();for(a.duration=this.inputIsoFile.moov.mvhd.duration,a.timescale=this.inputIsoFile.moov.mvhd.timescale,a.isFragmented=null!=this.inputIsoFile.moov.mvex,a.isFragmented&&this.inputIsoFile.moov.mvex.mehd?a.fragment_duration=this.inputIsoFile.moov.mvex.mehd.fragment_duration:a.fragment_duration=0,a.isProgressive=this.inputIsoFile.isProgressive,a.hasIOD=null!=this.inputIsoFile.moov.iods,a.brands=[],a.brands.push(this.inputIsoFile.ftyp.major_brand),a.brands=a.brands.concat(this.inputIsoFile.ftyp.compatible_brands),a.created=new Date(r+1e3*this.inputIsoFile.moov.mvhd.creation_time),a.modified=new Date(r+1e3*this.inputIsoFile.moov.mvhd.modification_time),a.tracks=[],a.audioTracks=[],a.videoTracks=[],a.subtitleTracks=[],a.metadataTracks=[],a.hintTracks=[],a.otherTracks=[],i=0;i<this.inputIsoFile.moov.traks.length;i++){if(e=this.inputIsoFile.moov.traks[i],s=e.mdia.minf.stbl.stsd.entries[0],t={},a.tracks.push(t),t.id=e.tkhd.track_id,t.references=[],e.tref)for(j=0;j<e.tref.boxes.length;j++)ref={},t.references.push(ref),ref.type=e.tref.boxes[j].type,ref.track_ids=e.tref.boxes[j].track_ids;for(t.created=new Date(r+1e3*e.tkhd.creation_time),t.modified=new Date(r+1e3*e.tkhd.modification_time),t.movie_duration=e.tkhd.duration,t.layer=e.tkhd.layer,t.alternate_group=e.tkhd.alternate_group,t.volume=e.tkhd.volume,t.matrix=e.tkhd.matrix,t.track_width=e.tkhd.width/65536,t.track_height=e.tkhd.height/65536,t.timescale=e.mdia.mdhd.timescale,t.duration=e.mdia.mdhd.duration,t.codec=s.getCodec(),t.language=e.mdia.mdhd.languageString,t.nb_samples=e.samples.length,t.size=0,j=0;j<t.nb_samples;j++)t.size+=e.samples[j].size;t.bitrate=8*t.size*t.timescale/t.duration,s.isAudio()?(a.audioTracks.push(t),t.audio={},t.audio.sample_rate=s.getSampleRate(),t.audio.channel_count=s.getChannelCount(),t.audio.sample_size=s.getSampleSize()):s.isVideo()?(a.videoTracks.push(t),t.video={},t.video.width=s.getWidth(),t.video.height=s.getHeight()):s.isSubtitle()?a.subtitleTracks.push(t):s.isHint()?a.hintTracks.push(t):s.isMetadata()?a.metadataTracks.push(t):a.otherTracks.push(t)}return a},MP4Box.prototype.getInitializationSegment=function(){var e=new DataStream;return e.endianness=DataStream.BIG_ENDIAN,this.inputIsoFile.writeInitializationSegment(e),e.buffer},MP4Box.prototype.writeFile=function(){var e=new DataStream;return e.endianness=DataStream.BIG_ENDIAN,this.inputIsoFile.write(e),e.buffer},MP4Box.prototype.initializeSegmentation=function(){var e,t,i,s,a;for(null===this.onSegment&&Log.w("MP4Box","No segmentation callback set!"),this.isFragmentationStarted||(this.isFragmentationStarted=!0,this.nextMoofNumber=0,this.inputIsoFile.resetTables()),s=[],e=0;e<this.fragmentedTracks.length;e++){for(t=0;t<this.inputIsoFile.moov.boxes.length;t++)i=this.inputIsoFile.moov.boxes[t],i&&"trak"===i.type&&(this.inputIsoFile.moov.boxes[t].ignore=!0,this.inputIsoFile.moov.boxes[t]=null);for(a=this.inputIsoFile.getTrackById(this.fragmentedTracks[e].id),delete a.ignore,t=0;t<this.inputIsoFile.moov.boxes.length;t++)if(i=this.inputIsoFile.moov.boxes[t],null==i){this.inputIsoFile.moov.boxes[t]=a;break}seg={},seg.id=a.tkhd.track_id,seg.user=this.fragmentedTracks[e].user,seg.buffer=this.getInitializationSegment(),s.push(seg)}return s},MP4Box.prototype.releaseUsedSamples=function(e,t){var i=0,s=this.inputIsoFile.getTrackById(e);s.lastValidSample||(s.lastValidSample=0);for(var a=s.lastValidSample;t>a;a++)i+=this.inputIsoFile.releaseSample(s,a);Log.d("MP4Box","Track #"+e+" released samples up to "+t+" (total size: "+i+", remaining: "+this.inputIsoFile.samplesDataSize+")"),s.lastValidSample=t},MP4Box.prototype.flush=function(){Log.i("MP4Box","Flushing remaining samples"),this.inputIsoFile.updateSampleLists(),this.processSamples()},MP4Box.prototype.seekTrack=function(e,t,i){var s,a,r,n=1/0,o=0,l=1/0,f=0,m=0;for(s=0;s<i.samples.length;s++){if(a=i.samples[s],0===s)l=a.offset,m=0,r=a.timescale;else if(a.cts>e*a.timescale){l=i.samples[s-1].offset,m=s-1;break}t&&a.is_rap&&(n=a.offset,o=a.cts,f=s)}return t?(i.nextSample=f,Log.i("MP4Box","Seeking to RAP sample #"+i.nextSample+" on track "+i.tkhd.track_id+", time "+Log.getDurationString(o,r)+" and offset: "+n),{offset:n,time:o/r}):(i.nextSample=m,Log.i("MP4Box","Seeking to non-RAP sample #"+i.nextSample+" on track "+i.tkhd.track_id+", time "+Log.getDurationString(e)+" and offset: "+n),{offset:l,time:e})},MP4Box.prototype.seek=function(e,t){var i,s,a,r=this.inputIsoFile.moov,n={offset:1/0,time:1/0};if(this.inputIsoFile.moov){for(a=0;a<r.traks.length;a++)i=r.traks[a],s=this.seekTrack(e,t,i),s.offset<n.offset&&(n.offset=s.offset),s.time<n.time&&(n.time=s.time);if(n.offset===1/0)n={offset:this.inputIsoFile.nextParsePosition,time:0};else{var o=this.inputIsoFile.findPosition(!0,n.offset);-1!==o&&(n.offset=this.inputIsoFile.findEndContiguousBuf(o))}return Log.i("MP4Box","Seeking at time "+Log.getDurationString(n.time,1)+" needs a buffer with a fileStart position of "+n.offset),n}throw"Cannot seek: moov not received!"};

},{"./DataStream":177,"./box":178,"./isofile":180,"./log":181}],183:[function(require,module,exports){
function save(e,r){var t=new Blob(r),n=URL.createObjectURL(t),o=document.createElement("a");o.setAttribute("href",n),o.setAttribute("download",e),o.click()}var debug=require("debug")("videostream"),MP4Box=require("mp4box"),EPSILON=.01,MAX_BUFFER=60;module.exports=function(e,r,t){function n(){r.addEventListener("waiting",d),r.addEventListener("timeupdate",c)}function o(e){m=!0,r.removeEventListener("waiting",d),r.removeEventListener("timeupdate",c),"open"===p.readyState&&p.endOfStream(e)}function a(e){for(var t=e.buffer.buffered,n=r.currentTime,o=-1,a=0;a<t.length;a++){var u=t.start(a),d=t.end(a)+EPSILON;if(u>n)break;(o>=0||d>=n)&&(o=d)}var f=o-n;return 0>f&&(f=0),debug("Buffer length: %f",f),MAX_BUFFER>=f}function u(r){function t(e){B.pause();var r=e.toArrayBuffer();r.fileStart=h,h+=r.byteLength;var t;try{t=g.appendBuffer(r)}catch(n){return debug("MP4Box threw exception: %s",n.message),"open"===p.readyState&&o("decode"),B.destroy(),void k()}u(t)}function n(){k(),u(h)}function a(e){debug("Stream error: %s",e.message),"open"===p.readyState&&o("network")}if(r===e.length)return void g.flush();if(B&&r===h){var d=B;return void setTimeout(function(){B===d&&B.resume()})}B&&(B.destroy(),k()),h=r;var f={start:h,end:e.length-1};B=e.createReadStream(f),B.on("data",t),B.on("end",n),B.on("error",a),k=function(){B.removeListener("data",t),B.removeListener("end",n),B.removeListener("error",a),B=null,k=null}}function d(){S&&f(r.currentTime)}function f(e){m&&n();var r=g.seek(e,!0);debug("Seeking to time: %d",e),debug("Seeked file offset: %d",r.offset),u(r.offset)}function i(e,r,t){e.arrayBuffers.push({buffer:r,ended:t||!1}),s(e)}function c(){Object.keys(y).forEach(function(e){var r=y[e];r.blocked&&s(r)})}function s(e){if(!e.buffer.updating&&(e.blocked=!a(e),!e.blocked&&0!==e.arrayBuffers.length)){var r=e.arrayBuffers.shift(),t=!1;try{e.buffer.appendBuffer(r.buffer),e.ended=r.ended,t=!0}catch(n){return debug("SourceBuffer error: %s",n.message),void o("decode")}t&&v()}}function v(){if("open"===p.readyState){var e=Object.keys(y).every(function(e){var r=y[e];return r.ended&&!r.buffer.updating});e&&o()}}t=t||{};var b=t.debugTrack||-1,l=[];n();var m=!1,p=new MediaSource;p.addEventListener("sourceopen",function(){u(0)}),r.src=window.URL.createObjectURL(p);var g=new MP4Box;g.onError=function(e){debug("MP4Box error: %s",e.message),k&&k(),"open"===p.readyState&&o("decode")};var S=!1,y={};g.onReady=function(e){if(debug("MP4 info: %o",e),e.tracks.forEach(function(e){var r;if(e.video)r="video/mp4";else{if(!e.audio)return;r="audio/mp4"}if(r+='; codecs="'+e.codec+'"',MediaSource.isTypeSupported(r)){var t=p.addSourceBuffer(r),n={buffer:t,arrayBuffers:[],meta:e,ended:!1};t.addEventListener("updateend",s.bind(null,n)),g.setSegmentOptions(e.id,null,{nbSamples:e.video?1:100}),y[e.id]=n}}),0===Object.keys(y).length)return void o("decode");var r=g.initializeSegmentation();r.forEach(function(e){i(y[e.id],e.buffer),e.id===b&&(save("init-track-"+b+".mp4",[e.buffer]),l.push(e.buffer))}),S=!0},g.onSegment=function(e,r,t,n){var o=y[e];i(o,t,n===o.meta.nb_samples),e===b&&l&&(l.push(t),n>1e3&&(save("track-"+b+".mp4",l),l=null))};var h,B=null,k=null};

},{"debug":114,"mp4box":182}],184:[function(require,module,exports){
function extend(){for(var r={},e=0;e<arguments.length;e++){var n=arguments[e];for(var t in n)n.hasOwnProperty(t)&&(r[t]=n[t])}return r}module.exports=extend;

},{}],185:[function(require,module,exports){
function extend(r){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var t in n)n.hasOwnProperty(t)&&(r[t]=n[t])}return r}module.exports=extend;

},{}],186:[function(require,module,exports){
module.exports=function n(t,o,r){return void 0===o?function(o,r){return n(t,o,r)}:(void 0===r&&(r="0"),t-=o.toString().length,t>0?new Array(t+(/\./.test(o)?2:1)).join(r)+o:o+"")};

},{}],187:[function(require,module,exports){
module.exports={
  "name": "webtorrent",
  "description": "Streaming torrent client",
  "version": "0.62.2",
  "author": {
    "name": "Feross Aboukhadijeh",
    "email": "feross@feross.org",
    "url": "http://feross.org/"
  },
  "bin": {
    "webtorrent": "./bin/cmd.js"
  },
  "browser": {
    "./lib/server": false,
    "bittorrent-dht/client": false,
    "fs-chunk-store": "memory-chunk-store",
    "load-ip-set": false,
    "ut_pex": false
  },
  "bugs": {
    "url": "https://github.com/feross/webtorrent/issues"
  },
  "dependencies": {
    "addr-to-ip-port": "^1.0.1",
    "bitfield": "^1.0.2",
    "bittorrent-dht": "^3.0.0",
    "bittorrent-swarm": "^5.0.0",
    "chunk-store-stream": "^2.0.0",
    "clivas": "^0.2.0",
    "create-torrent": "^3.4.0",
    "debug": "^2.1.0",
    "end-of-stream": "^1.0.0",
    "executable": "^1.1.0",
    "fs-chunk-store": "^1.3.4",
    "hat": "0.0.3",
    "immediate-chunk-store": "^1.0.7",
    "inherits": "^2.0.1",
    "inquirer": "^0.9.0",
    "load-ip-set": "^1.0.3",
    "mediasource": "^1.0.0",
    "memory-chunk-store": "^1.2.0",
    "mime": "^1.2.11",
    "minimist": "^1.1.0",
    "moment": "^2.8.3",
    "multistream": "^2.0.2",
    "network-address": "^1.0.0",
    "parse-torrent": "^5.1.0",
    "path-exists": "^1.0.0",
    "pretty-bytes": "^2.0.1",
    "pump": "^1.0.0",
    "random-iterate": "^1.0.1",
    "range-parser": "^1.0.2",
    "re-emitter": "^1.0.0",
    "run-parallel": "^1.0.0",
    "simple-sha1": "^2.0.0",
    "speedometer": "^0.1.2",
    "thunky": "^0.1.0",
    "torrent-discovery": "^3.0.0",
    "torrent-piece": "^1.0.0",
    "uniq": "^1.0.1",
    "ut_metadata": "^2.1.0",
    "ut_pex": "^1.0.1",
    "videostream": "^1.1.4",
    "windows-no-runnable": "0.0.6",
    "xtend": "^4.0.0",
    "zero-fill": "^2.2.0",
    "airplay-js": "^0.2.3",
    "chromecasts": "^1.5.3",
    "nodebmc": "0.0.5"
  },
  "devDependencies": {
    "bittorrent-tracker": "^6.0.0",
    "brfs": "^1.2.0",
    "browserify": "^11.0.0",
    "finalhandler": "^0.4.0",
    "run-auto": "^1.0.0",
    "serve-static": "^1.9.3",
    "simple-get": "^1.0.0",
    "standard": "^5.1.0",
    "tape": "^4.0.0",
    "uglify-js": "^2.4.15",
    "zelda": "^2.0.0",
    "zuul": "^3.0.0"
  },
  "homepage": "http://webtorrent.io",
  "keywords": [
    "torrent",
    "bittorrent",
    "bittorrent client",
    "streaming",
    "download",
    "webrtc",
    "webrtc data",
    "webtorrent",
    "mad science"
  ],
  "license": "MIT",
  "main": "index.js",
  "optionalDependencies": {
    "airplay-js": "^0.2.3",
    "chromecasts": "^1.5.3",
    "nodebmc": "0.0.5"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/feross/webtorrent.git"
  },
  "scripts": {
    "build": "browserify -s WebTorrent -e ./ | uglifyjs -m > webtorrent.min.js",
    "build-debug": "browserify -s WebTorrent -e ./ > webtorrent.debug.js",
    "size": "npm run build && cat webtorrent.min.js | gzip | wc -c",
    "test": "standard && node ./bin/test.js",
    "test-browser": "zuul -- test/basic.js",
    "test-browser-local": "zuul --local -- test/basic.js",
    "test-node": "tape test/*.js"
  },
  "gitHead": "3fc0668c639cf5f1780de9a338fd320431013a3c",
  "_id": "webtorrent@0.62.2",
  "_shasum": "a32e2f933f9bdc5bf9bb31989bc50dd89f2b2ff5",
  "_from": "webtorrent@*",
  "_npmVersion": "2.14.4",
  "_nodeVersion": "4.1.1",
  "_npmUser": {
    "name": "feross",
    "email": "feross@feross.org"
  },
  "dist": {
    "shasum": "a32e2f933f9bdc5bf9bb31989bc50dd89f2b2ff5",
    "tarball": "http://registry.npmjs.org/webtorrent/-/webtorrent-0.62.2.tgz"
  },
  "maintainers": [
    {
      "name": "feross",
      "email": "feross@feross.org"
    }
  ],
  "directories": {},
  "_resolved": "https://registry.npmjs.org/webtorrent/-/webtorrent-0.62.2.tgz"
}

},{}],188:[function(require,module,exports){
var d3,WebTorrent,nodes,links,x$,root,svg,force,addPeer;d3=require("d3"),WebTorrent=require("webtorrent"),nodes=[{}],links=[],x$=root=nodes[0],x$.x=.5*window.innerWidth,x$.y=.5*window.innerHeight,x$.radius=100,x$.fixed=!0,svg=d3.select("body").style("margin",0).style("padding",0).append("svg:svg").attr("width",window.innerWidth).attr("height",window.innerHeight),svg.selectAll("circle").data(nodes).enter().insert("svg:circle").attr("r",function(e){return e.radius-2}).style("fill","blue"),force=d3.layout.force().size([window.innerWidth,window.innerHeight]).charge(function(e,r){return r?-500:-1e4}).linkStrength(.1).nodes(nodes).links(links),window.addPeer=addPeer=function(e){var r;return r=e,r.x=.5*Math.random()*window.innerWidth+.25*window.innerWidth,r.y=.5*Math.random()*window.innerHeight+.25*window.innerHeight,r.radius=50,nodes.push(e),links.push({source:root,target:e}),svg.selectAll("line").data(links).enter().insert("svg:line","circle").style("stroke-width",function(){return 10}).style("stroke",function(){return"grey"}),svg.selectAll("circle").data(nodes).enter().insert("svg:circle").attr("r",function(e){return e.radius-2}).style("fill","red"),force.start()},force.start(),force.on("tick",function(){return svg.selectAll("line").attr("x1",function(e){return e.source.x}).attr("y1",function(e){return e.source.y}).attr("x2",function(e){return e.target.x}).attr("y2",function(e){return e.target.y}),svg.selectAll("circle").attr("cx",function(e){return e.x}).attr("cy",function(e){return e.y})});

},{"d3":1,"webtorrent":46}]},{},[188])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
